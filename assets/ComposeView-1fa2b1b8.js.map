{"version":3,"file":"ComposeView-1fa2b1b8.js","sources":["../../src/formats/LRCFormat.ts","../../src/services/projectExportService.ts","../../src/components/ExportDialog.vue","../../src/views/ComposeView.vue"],"sourcesContent":["/**\n * LRC (Lyrics) File Format - V2+ Implementation\n *\n * STANDARD LRC V2 FEATURES:\n * =========================\n * - Line-level timing: [mm:ss.xx]Line text\n * - Word-level timing: [mm:ss.xx]<mm:ss.xx>word\n * - Metadata tags: [au:Author] [ti:Title] [al:Album] [by:Creator] [offset:Â±ms]\n *   Note: We use [au:] for author/songwriter instead of [ar:] for artist/performer\n * - Multiple timestamps per line (repeated choruses)\n *\n * OUR V2+ EXTENSIONS:\n * ===================\n * We extend the format to preserve our rich syllable timing data:\n *\n * 1. SYLLABLE-LEVEL TIMING (Extension)\n *    Format: [mm:ss.xx]<mm:ss.xx>wo<mm:ss.xx>rd\n *    The '<' marker before a syllable indicates its start time\n *    Example: [00:10.50]<00:10.50>No<00:10.80>vem<00:11.20>ber\n *\n * 2. EXTENDED METADATA (Extension)\n *    [duration:mm:ss.xx] - Total song duration\n *    [creator:Application Name] - Creation tool\n *    [version:2.1] - Enhanced LRC version marker\n *    [syllable_timing:true] - Indicates syllable data present\n *\n * 3. LINE METADATA (Extension)\n *    #[line:N:metadata] format for line-specific data\n *    Examples: #[line:0:title:Verse 1], #[line:0:author:John Doe], #[line:0:caption:Lyrics]\n *\n * PARSING STRATEGY:\n * =================\n * - Read file line by line\n * - Parse metadata tags\n * - Extract timestamps and text\n * - Reconstruct syllable boundaries from timing markers\n * - Handle both standard LRC and our extensions gracefully\n *\n * WRITING STRATEGY:\n * =================\n * - Write metadata header first\n * - Convert milliseconds to mm:ss.xx format\n * - Insert syllable timing markers\n * - Sort lines by timestamp\n * - Ensure backward compatibility (standard players ignore extensions)\n */\n\nimport type { KaraokeProject, LyricLine } from '@/types/karaoke'\n\n/**\n * LRC file metadata\n * Note: 'author' refers to the songwriter/lyricist, not the performer\n */\nexport interface LRCMetadata {\n  author?: string // The songwriter/lyricist (our 'artist' field maps here)\n  title?: string\n  album?: string\n  creator?: string\n  version?: string\n  offset?: number // milliseconds\n  duration?: number // milliseconds\n  syllableTiming?: boolean\n}\n\n/**\n * LRC line with timing information\n */\nexport interface LRCLine {\n  timestamp: number // milliseconds\n  text: string\n  caption?: string // Optional caption for this line (e.g., \"Verse 1\", \"Chorus\")\n  words?: Array<{\n    text: string\n    timestamp: number\n    syllables?: Array<{\n      text: string\n      timestamp: number\n    }>\n  }>\n}\n\n/**\n * LRC Writer - Converts our rich timing data to LRC V2+ format\n */\nexport class LRCWriter {\n  /**\n   * Convert KaraokeProject to LRC V2+ format\n   */\n  static toLRC(project: KaraokeProject): string {\n    const lines: string[] = []\n\n    // Write metadata header\n    lines.push(`[version:2.1]`)\n    lines.push(`[syllable_timing:true]`)\n\n    if (project.name) {\n      lines.push(`[ti:${this.escapeMetadata(project.name)}]`)\n    }\n    if (project.artist) {\n      // Use [au:] tag for author/songwriter (not [ar:] for artist/performer)\n      lines.push(`[au:${this.escapeMetadata(project.artist)}]`)\n    }\n\n    lines.push(`[creator:Karaoke Composer]`)\n\n    // Calculate duration from last word\n    const duration = this.calculateDuration(project.lyrics)\n    if (duration > 0) {\n      lines.push(`[duration:${this.formatTimestamp(duration)}]`)\n    }\n\n    lines.push('') // Blank line after metadata\n\n    // Write lyrics with timing\n    let lyricsLineIndex = 0\n    for (const lyricLine of project.lyrics) {\n      // Skip metadata lines (title, author) but not caption\n      if (lyricLine.type && lyricLine.type !== 'lyrics' && lyricLine.type !== 'caption') {\n        continue\n      }\n\n      // Handle caption lines - output as extended metadata\n      if (lyricLine.type === 'caption') {\n        const captionText = lyricLine.metadata?.caption || lyricLine.text.replace(/^\\[@CAPTION:\\s*/, '').replace(/\\]$/, '')\n        lines.push(`#[line:${lyricsLineIndex}:caption:${this.escapeMetadata(captionText)}]`)\n        continue\n      }\n\n      if (!lyricLine.words || lyricLine.words.length === 0) {\n        continue\n      }\n\n      const lineTimestamp = lyricLine.words[0].startTime || 0\n      const lineText = this.formatLine(lyricLine)\n\n      lines.push(`[${this.formatTimestamp(lineTimestamp)}]${lineText}`)\n      lyricsLineIndex++\n    }\n\n    return lines.join('\\n') + '\\n'\n  }\n\n  /**\n   * Format a lyric line with syllable timing\n   */\n  private static formatLine(line: LyricLine): string {\n    if (!line.words) {\n      return line.text\n    }\n\n    const parts: string[] = []\n\n    for (const word of line.words) {\n      if (!word.syllables || word.syllables.length === 0) {\n        // Simple word without syllables\n        if (word.startTime !== undefined) {\n          parts.push(`<${this.formatTimestamp(word.startTime)}>${word.word}`)\n        } else {\n          parts.push(word.word)\n        }\n      } else {\n        // Word with syllable timing\n        for (const syllable of word.syllables) {\n          if (syllable.startTime !== undefined) {\n            parts.push(`<${this.formatTimestamp(syllable.startTime)}>${syllable.syllable}`)\n          } else {\n            parts.push(syllable.syllable)\n          }\n        }\n      }\n\n      parts.push(' ') // Space between words\n    }\n\n    // Remove trailing space\n    return parts.join('').trim()\n  }\n\n  /**\n   * Format timestamp as mm:ss.xx\n   */\n  private static formatTimestamp(ms: number): string {\n    const totalSeconds = ms / 1000\n    const minutes = Math.floor(totalSeconds / 60)\n    const seconds = totalSeconds % 60\n\n    return `${String(minutes).padStart(2, '0')}:${seconds.toFixed(2).padStart(5, '0')}`\n  }\n\n  /**\n   * Escape metadata values\n   */\n  private static escapeMetadata(value: string): string {\n    // Remove line breaks and brackets\n    return value.replace(/[\\r\\n]/g, ' ').replace(/[[\\]]/g, '')\n  }\n\n  /**\n   * Calculate total duration from lyrics\n   */\n  private static calculateDuration(lyrics: LyricLine[]): number {\n    let maxTime = 0\n\n    for (const line of lyrics) {\n      if (line.words) {\n        for (const word of line.words) {\n          if (word.endTime !== undefined && word.endTime > maxTime) {\n            maxTime = word.endTime\n          }\n        }\n      }\n    }\n\n    return maxTime\n  }\n}\n\n/**\n * LRC Parser - Reads LRC V2+ format back to our data structure\n */\nexport class LRCParser {\n  /**\n   * Parse LRC file content\n   */\n  static parse(content: string): { metadata: LRCMetadata; lines: LRCLine[] } {\n    const metadata: LRCMetadata = {}\n    const lines: LRCLine[] = []\n    const lineMetadata: Map<number, { caption?: string }> = new Map()\n\n    const fileLines = content.split(/\\r?\\n/)\n\n    // First pass: collect line metadata (captions, etc.)\n    for (const fileLine of fileLines) {\n      const trimmed = fileLine.trim()\n\n      if (!trimmed) {\n        continue // Skip empty lines\n      }\n\n      // Check for extended line metadata: #[line:N:key:value]\n      const lineMetadataMatch = trimmed.match(/^#\\[line:(\\d+):(\\w+):(.+)\\]$/)\n      if (lineMetadataMatch) {\n        const [, lineIndexStr, key, value] = lineMetadataMatch\n        const lineIndex = parseInt(lineIndexStr, 10)\n\n        if (!lineMetadata.has(lineIndex)) {\n          lineMetadata.set(lineIndex, {})\n        }\n\n        const lineMeta = lineMetadata.get(lineIndex)!\n        if (key === 'caption') {\n          lineMeta.caption = value\n        }\n\n        continue\n      }\n    }\n\n    // Second pass: parse lyrics lines\n    let lyricsLineIndex = 0\n    for (const fileLine of fileLines) {\n      const trimmed = fileLine.trim()\n\n      if (!trimmed) {\n        continue // Skip empty lines\n      }\n\n      // Skip line metadata lines (already processed)\n      if (trimmed.startsWith('#[line:')) {\n        continue\n      }\n\n      // Check if this is a timestamp line (starts with [MM:SS.xx])\n      const isTimestampLine = /^\\[\\d+:\\d+\\.\\d+\\]/.test(trimmed)\n\n      if (trimmed.startsWith('[') && !isTimestampLine) {\n        // This is metadata (tags like [ti:Title], [au:Author])\n        this.parseMetadata(trimmed, metadata)\n        continue\n      }\n\n      // Parse timed lines (lines with timestamps)\n      if (isTimestampLine) {\n        const parsedLine = this.parseLine(trimmed)\n        if (parsedLine) {\n          // Attach caption metadata if exists\n          const lineMeta = lineMetadata.get(lyricsLineIndex)\n          if (lineMeta?.caption) {\n            parsedLine.caption = lineMeta.caption\n          }\n\n          lines.push(parsedLine)\n          lyricsLineIndex++\n        }\n      }\n    }\n\n    // Sort lines by timestamp\n    lines.sort((a, b) => a.timestamp - b.timestamp)\n\n    return {\n      metadata,\n      lines\n    }\n  }\n\n  /**\n   * Parse metadata tag\n   */\n  private static parseMetadata(line: string, metadata: LRCMetadata): void {\n    const match = line.match(/\\[([^:]+):([^\\]]+)\\]/)\n    if (!match) return\n\n    const [, key, value] = match\n\n    switch (key.toLowerCase()) {\n      case 'au': // Author/songwriter\n        metadata.author = value\n        break\n      case 'ar': // Also accept artist tag for compatibility\n        metadata.author = value\n        break\n      case 'ti':\n        metadata.title = value\n        break\n      case 'al':\n        metadata.album = value\n        break\n      case 'creator':\n        metadata.creator = value\n        break\n      case 'version':\n        metadata.version = value\n        break\n      case 'offset':\n        metadata.offset = parseInt(value, 10)\n        break\n      case 'duration':\n        metadata.duration = this.parseTimestamp(value)\n        break\n      case 'syllable_timing':\n        metadata.syllableTiming = value.toLowerCase() === 'true'\n        break\n    }\n  }\n\n  /**\n   * Parse a timed line with syllable markers\n   */\n  private static parseLine(line: string): LRCLine | null {\n    // Extract timestamp and text\n    const match = line.match(/\\[([^\\]]+)\\](.+)/)\n    if (!match) return null\n\n    const [, timestampStr, text] = match\n    const timestamp = this.parseTimestamp(timestampStr)\n\n    // Check for syllable timing markers\n    if (text.includes('<')) {\n      return this.parseLineWithTiming(timestamp, text)\n    }\n\n    // Simple line without timing\n    return {\n      timestamp,\n      text: text.trim()\n    }\n  }\n\n  /**\n   * Parse line with word/syllable timing markers\n   */\n  private static parseLineWithTiming(lineTimestamp: number, text: string): LRCLine {\n    const words: LRCLine['words'] = []\n    let currentWord = ''\n    let currentTimestamp = lineTimestamp\n    const syllables: Array<{ text: string; timestamp: number }> = []\n\n    // Split by < markers\n    const parts = text.split('<')\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i]\n\n      if (i === 0 && !text.startsWith('<')) {\n        // Text before first marker\n        currentWord += part\n        continue\n      }\n\n      // Extract timestamp and text\n      const markerMatch = part.match(/^([^>]+)>(.*)$/)\n      if (!markerMatch) continue\n\n      const [, timestampStr, syllableText] = markerMatch\n      const syllableTimestamp = this.parseTimestamp(timestampStr)\n\n      // Check if this is end of word (has space)\n      const spaceIndex = syllableText.indexOf(' ')\n      if (spaceIndex !== -1) {\n        // End of word\n        syllables.push({\n          text: syllableText.substring(0, spaceIndex),\n          timestamp: syllableTimestamp\n        })\n\n        words.push({\n          text: currentWord + syllableText.substring(0, spaceIndex),\n          timestamp: currentTimestamp,\n          syllables: syllables.length > 0 ? [...syllables] : undefined\n        })\n\n        // Start new word\n        currentWord = ''\n        syllables.length = 0\n        // Don't update currentTimestamp here - it will be set by the next marker\n        // currentTimestamp will be updated when we process the next syllable/word\n\n        // Continue with text after space\n        if (spaceIndex + 1 < syllableText.length) {\n          currentWord = syllableText.substring(spaceIndex + 1)\n        }\n      } else {\n        // Middle of word or start of word\n        syllables.push({\n          text: syllableText,\n          timestamp: syllableTimestamp\n        })\n        currentWord += syllableText\n\n        // If this is the first syllable of a word, update the word timestamp\n        if (syllables.length === 1) {\n          currentTimestamp = syllableTimestamp\n        }\n      }\n    }\n\n    // Add last word if exists\n    if (currentWord.trim()) {\n      words.push({\n        text: currentWord.trim(),\n        timestamp: currentTimestamp,\n        syllables: syllables.length > 0 ? [...syllables] : undefined\n      })\n    }\n\n    return {\n      timestamp: lineTimestamp,\n      text: words.map(w => w.text).join(' '),\n      words\n    }\n  }\n\n  /**\n   * Parse timestamp from mm:ss.xx or mm:ss:xx format\n   */\n  private static parseTimestamp(timestamp: string): number {\n    const parts = timestamp.split(':')\n    if (parts.length < 2) return 0\n\n    const minutes = parseInt(parts[0], 10) || 0\n    const secondsParts = parts[1].split('.')\n    const seconds = parseInt(secondsParts[0], 10) || 0\n    const centiseconds = parseInt(secondsParts[1], 10) || 0\n\n    return (minutes * 60 + seconds) * 1000 + centiseconds * 10\n  }\n\n  /**\n   * Convert parsed LRC data to KaraokeProject\n   */\n  static toKaraokeProject(\n    content: string,\n    projectId: string = 'imported-song'\n  ): KaraokeProject {\n    const { metadata, lines } = this.parse(content)\n\n    const lyrics: LyricLine[] = []\n    let lineNumber = 1\n\n    for (const lrcLine of lines) {\n      // If this line has a caption, create a caption line first\n      if (lrcLine.caption) {\n        lyrics.push({\n          id: `caption-${lineNumber}`,\n          lineNumber: lineNumber++,\n          text: `[@CAPTION:${lrcLine.caption}]`,\n          words: [],\n          type: 'caption',\n          metadata: { caption: lrcLine.caption }\n        })\n      }\n\n      if (!lrcLine.words || lrcLine.words.length === 0) {\n        // Simple text line\n        const lyricLine: LyricLine = {\n          id: `line-${lineNumber}`,\n          lineNumber: lineNumber++,\n          text: lrcLine.text,\n          type: 'lyrics',\n          startTime: lrcLine.timestamp,\n          endTime: lrcLine.timestamp + 1000, // 1 second default duration\n          words: [\n            {\n              word: lrcLine.text,\n              startTime: lrcLine.timestamp,\n              syllables: [\n                {\n                  syllable: lrcLine.text,\n                  startTime: lrcLine.timestamp\n                }\n              ]\n            }\n          ]\n        }\n\n        // Attach caption metadata if exists\n        if (lrcLine.caption) {\n          if (!lyricLine.metadata) {\n            lyricLine.metadata = {}\n          }\n          lyricLine.metadata.caption = lrcLine.caption\n        }\n\n        lyrics.push(lyricLine)\n        continue\n      }\n\n      // Convert LRC words to our Word format\n      const words = lrcLine.words.map(lrcWord => ({\n        word: lrcWord.text,\n        startTime: lrcWord.timestamp,\n        syllables: lrcWord.syllables\n          ? lrcWord.syllables.map(s => ({\n            syllable: s.text,\n            startTime: s.timestamp\n          }))\n          : [\n            {\n              syllable: lrcWord.text,\n              startTime: lrcWord.timestamp\n            }\n          ]\n      }))\n\n      // Calculate line start and end times from words/syllables\n      let lineStartTime = lrcLine.timestamp\n      let lineEndTime = lrcLine.timestamp\n\n      if (words.length > 0) {\n        // Start time is the first word/syllable\n        lineStartTime = words[0].startTime || lrcLine.timestamp\n\n        // End time is after the last syllable\n        const lastWord = words[words.length - 1]\n        if (lastWord.syllables && lastWord.syllables.length > 0) {\n          const lastSyllable = lastWord.syllables[lastWord.syllables.length - 1]\n          // Add ~300ms per syllable as duration estimate\n          lineEndTime = (lastSyllable.startTime || lrcLine.timestamp) + 300\n        } else {\n          lineEndTime = (lastWord.startTime || lrcLine.timestamp) + 500\n        }\n      }\n\n      const lyricLine: LyricLine = {\n        id: `line-${lineNumber}`,\n        lineNumber: lineNumber++,\n        text: lrcLine.text,\n        type: 'lyrics',\n        words,\n        startTime: lineStartTime,\n        endTime: lineEndTime\n      }\n\n      // Attach caption metadata if exists\n      if (lrcLine.caption) {\n        if (!lyricLine.metadata) {\n          lyricLine.metadata = {}\n        }\n        lyricLine.metadata.caption = lrcLine.caption\n      }\n\n      lyrics.push(lyricLine)\n    }\n\n    return {\n      id: projectId,\n      name: metadata.title || 'Imported Song',\n      artist: metadata.author || 'Unknown Artist',\n      genre: '',\n      lyrics,\n      timings: [],\n      isCompleted: true,\n      audioFile: {\n        name: '',\n        file: null\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }\n}\n","/**\n * Project Export Service\n *\n * Exports KaraokeProject as JSON file with all timing data\n * for use with terminal renderer and other tools.\n */\n\nimport type { KaraokeProject } from '../types/karaoke'\n\n/**\n * Export project as JSON file download\n */\nexport function exportProjectAsJSON(project: KaraokeProject): void {\n  // Create clean export data\n  const exportData = {\n    version: '1.0',\n    exportDate: new Date().toISOString(),\n    project: {\n      id: project.id,\n      name: project.name,\n      artist: project.artist,\n      genre: project.genre,\n      createdAt: project.createdAt,\n      updatedAt: project.updatedAt,\n      audioFile: {\n        name: project.audioFile.name,\n        duration: project.audioFile.duration,\n        // Note: Don't export actual file blob, just metadata\n      },\n      lyrics: project.lyrics,\n      timings: project.timings,\n      isCompleted: project.isCompleted,\n      metadata: project.metadata\n    }\n  }\n\n  // Convert to JSON with nice formatting\n  const json = JSON.stringify(exportData, null, 2)\n\n  // Create blob\n  const blob = new Blob([json], { type: 'application/json' })\n\n  // Create download link\n  const url = URL.createObjectURL(blob)\n  const link = document.createElement('a')\n  link.href = url\n\n  // Generate filename from project name\n  const filename = `${sanitizeFilename(project.name)}_karaoke_project.json`\n  link.download = filename\n\n  // Trigger download\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n\n  // Cleanup\n  URL.revokeObjectURL(url)\n}\n\n/**\n * Export project for terminal renderer demo\n * (TypeScript format for direct import)\n */\nexport function exportProjectForTerminal(project: KaraokeProject): void {\n  // Create TypeScript code\n  const tsCode = `/**\n * Exported Karaoke Project: ${project.name}\n * Exported: ${new Date().toISOString()}\n *\n * Import this in terminal demo to test with real timing data!\n */\n\nimport type { KaraokeProject } from '../../types/karaoke'\n\nexport const ${sanitizeVariableName(project.name)}: KaraokeProject = ${JSON.stringify(\n    {\n      id: project.id,\n      name: project.name,\n      artist: project.artist,\n      genre: project.genre,\n      createdAt: project.createdAt.toISOString(),\n      updatedAt: project.updatedAt.toISOString(),\n      audioFile: {\n        name: project.audioFile.name,\n        file: null,\n        url: 'exported://audio',\n        duration: project.audioFile.duration\n      },\n      lyrics: project.lyrics,\n      timings: project.timings,\n      isCompleted: project.isCompleted,\n      metadata: project.metadata\n    },\n    null,\n    2\n  )}\n`\n\n  // Download as .ts file\n  const blob = new Blob([tsCode], { type: 'text/typescript' })\n  const url = URL.createObjectURL(blob)\n  const link = document.createElement('a')\n  link.href = url\n  link.download = `${sanitizeFilename(project.name)}_export.ts`\n\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n\n  URL.revokeObjectURL(url)\n}\n\n/**\n * Import project from JSON file\n */\nexport async function importProjectFromJSON(file: File): Promise<KaraokeProject> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n\n    reader.onload = (e) => {\n      try {\n        const json = e.target?.result as string\n        const data = JSON.parse(json)\n\n        // Validate version\n        if (!data.version || !data.project) {\n          throw new Error('Invalid project file format')\n        }\n\n        // Reconstruct project with proper Date objects\n        const project: KaraokeProject = {\n          ...data.project,\n          createdAt: new Date(data.project.createdAt),\n          updatedAt: new Date(data.project.updatedAt),\n          audioFile: {\n            ...data.project.audioFile,\n            file: null, // File blob not stored in JSON\n            url: undefined // Will need to re-load audio\n          }\n        }\n\n        resolve(project)\n      } catch (error) {\n        reject(new Error(`Failed to parse project file: ${error}`))\n      }\n    }\n\n    reader.onerror = () => {\n      reject(new Error('Failed to read file'))\n    }\n\n    reader.readAsText(file)\n  })\n}\n\n/**\n * Sanitize filename for download\n */\nfunction sanitizeFilename(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '_')\n    .replace(/^_+|_+$/g, '')\n}\n\n/**\n * Sanitize for use as TypeScript variable name\n */\nfunction sanitizeVariableName(name: string): string {\n  const clean = name\n    .replace(/[^a-zA-Z0-9]+/g, '_')\n    .replace(/^_+|_+$/g, '')\n\n  // Ensure starts with letter\n  return /^[a-zA-Z]/.test(clean) ? clean : `project_${clean}`\n}\n\n/**\n * Generate summary stats for export\n */\nexport function getProjectStats(project: KaraokeProject): {\n  totalLines: number\n  totalWords: number\n  totalSyllables: number\n  timedLines: number\n  timedWords: number\n  timedSyllables: number\n  duration: number\n  completionPercentage: number\n} {\n  let totalWords = 0\n  let totalSyllables = 0\n  let timedWords = 0\n  let timedSyllables = 0\n\n  const timedLines = project.lyrics.filter(line => line.startTime !== undefined).length\n\n  for (const line of project.lyrics) {\n    for (const word of line.words) {\n      totalWords++\n      if (word.startTime !== undefined) {\n        timedWords++\n      }\n\n      for (const syllable of word.syllables) {\n        totalSyllables++\n        if (syllable.startTime !== undefined) {\n          timedSyllables++\n        }\n      }\n    }\n  }\n\n  const duration = project.audioFile.duration || 0\n  const completionPercentage = totalSyllables > 0\n    ? Math.round((timedSyllables / totalSyllables) * 100)\n    : 0\n\n  return {\n    totalLines: project.lyrics.length,\n    totalWords,\n    totalSyllables,\n    timedLines,\n    timedWords,\n    timedSyllables,\n    duration,\n    completionPercentage\n  }\n}\n","<template>\n  <!-- Bootstrap Modal -->\n  <div class=\"modal show d-block\" tabindex=\"-1\" @click.self=\"closeDialog\">\n    <div class=\"modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\">ð¤ Export Project</h5>\n          <button type=\"button\" class=\"btn-close\" @click=\"closeDialog\" aria-label=\"Close\"></button>\n        </div>\n\n        <div class=\"modal-body\">\n          <!-- Project Info -->\n          <div class=\"alert alert-info\">\n            <h5 class=\"mb-1\">{{ project.name }}</h5>\n            <p class=\"mb-2 text-muted\"><em>by {{ project.artist }}</em></p>\n            <div class=\"d-flex gap-3 small\">\n              <span>{{ stats.timedSyllables }} syllables</span>\n              <span>â¢</span>\n              <span>{{ formatDuration(stats.duration) }}</span>\n              <span>â¢</span>\n              <span>{{ stats.completionPercentage }}% complete</span>\n            </div>\n          </div>\n\n          <!-- Format Tabs -->\n          <ul class=\"nav nav-tabs mb-3\" role=\"tablist\">\n            <li class=\"nav-item\" v-for=\"format in formats\" :key=\"format.id\">\n              <button class=\"nav-link\" :class=\"{ active: selectedFormat === format.id }\"\n                @click=\"selectedFormat = format.id\" type=\"button\">\n                <span class=\"me-2\">{{ format.icon }}</span>\n                {{ format.label }}\n              </button>\n            </li>\n          </ul>\n\n          <!-- Tab Content -->\n          <div class=\"tab-content\">\n            <!-- LRC Export -->\n            <div v-if=\"selectedFormat === 'lrc'\" class=\"tab-pane fade show active\">\n              <h5>LRC V2.1 Export</h5>\n              <p class=\"text-muted\">\n                Export as Enhanced LRC format with syllable-level timing. Compatible with modern karaoke players.\n              </p>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Settings</strong>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"lrcSettings.includeMetadata\"\n                      id=\"lrcMetadata\" />\n                    <label class=\"form-check-label\" for=\"lrcMetadata\">\n                      Include metadata (title, artist, album)\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"lrcSettings.includeSyllables\"\n                      id=\"lrcSyllables\" />\n                    <label class=\"form-check-label\" for=\"lrcSyllables\">\n                      Include syllable timing (V2.1 format)\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"lrcSettings.includeWordTiming\"\n                      id=\"lrcWordTiming\" />\n                    <label class=\"form-check-label\" for=\"lrcWordTiming\">\n                      Include word timing markers\n                    </label>\n                  </div>\n\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Timestamp precision:</label>\n                    <div class=\"col-sm-8\">\n                      <select class=\"form-select\" v-model=\"lrcSettings.precision\">\n                        <option value=\"2\">Centisecond (00.00)</option>\n                        <option value=\"3\">Millisecond (00.000)</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Preview</strong>\n                </div>\n                <div class=\"card-body\">\n                  <pre class=\"bg-dark text-light p-3 rounded small\"\n                    style=\"max-height: 200px; overflow-y: auto;\">{{ lrcPreview }}</pre>\n                </div>\n              </div>\n\n              <button class=\"btn btn-primary w-100\" @click=\"exportLRC\" :disabled=\"exporting\">\n                <span v-if=\"!exporting\">ð Export LRC File</span>\n                <span v-else>â³ Exporting...</span>\n              </button>\n            </div>\n\n            <!-- CDG Export -->\n            <div v-if=\"selectedFormat === 'cdg'\" class=\"tab-pane fade show active\">\n              <h5>CDG Export</h5>\n              <p class=\"text-muted\">\n                Export as CD+G format for professional karaoke machines. Creates binary .cdg file with graphics data.\n              </p>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Settings</strong>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Background color:</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"color\" class=\"form-control form-control-color\"\n                        v-model=\"cdgSettings.backgroundColor\" />\n                    </div>\n                  </div>\n\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Text color:</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"color\" class=\"form-control form-control-color\" v-model=\"cdgSettings.textColor\" />\n                    </div>\n                  </div>\n\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Highlight color:</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"color\" class=\"form-control form-control-color\"\n                        v-model=\"cdgSettings.highlightColor\" />\n                    </div>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"cdgSettings.showBorder\" id=\"cdgBorder\" />\n                    <label class=\"form-check-label\" for=\"cdgBorder\">\n                      Show decorative border\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"cdgSettings.centerText\" id=\"cdgCenter\" />\n                    <label class=\"form-check-label\" for=\"cdgCenter\">\n                      Center text on screen\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"cdgSettings.showCaptions\"\n                      id=\"cdgCaptions\" />\n                    <label class=\"form-check-label\" for=\"cdgCaptions\">\n                      Show captions (e.g., \"Verse 1\", \"Chorus\")\n                    </label>\n                  </div>\n\n                  <div v-if=\"cdgSettings.showCaptions\" class=\"row align-items-center mb-2 ms-4\">\n                    <label class=\"col-sm-5 col-form-label small\">Caption duration (seconds):</label>\n                    <div class=\"col-sm-7\">\n                      <input type=\"number\" class=\"form-control form-control-sm\"\n                        v-model.number=\"cdgSettings.captionDuration\" min=\"1\" max=\"10\" step=\"0.5\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>File Information</strong>\n                </div>\n                <div class=\"card-body\">\n                  <p class=\"mb-1\"><strong>Format:</strong> CD+G Binary</p>\n                  <p class=\"mb-1\"><strong>Estimated size:</strong> {{ estimatedCDGSize }} KB</p>\n                  <p class=\"mb-1\"><strong>Resolution:</strong> 288Ã192 pixels (6-bit color)</p>\n                  <p class=\"mb-0\"><strong>Packet rate:</strong> 75 packets/second</p>\n                </div>\n              </div>\n\n              <button class=\"btn btn-primary w-100\" @click=\"exportCDG\" :disabled=\"exporting\">\n                <span v-if=\"!exporting\">ð¿ Export CDG File</span>\n                <span v-else>â³ Exporting...</span>\n              </button>\n            </div>\n\n            <!-- JSON Export -->\n            <div v-if=\"selectedFormat === 'json'\" class=\"tab-pane fade show active\">\n              <h5>JSON Export</h5>\n              <p class=\"text-muted\">\n                Export complete project data as JSON for backup, sharing, or programmatic use.\n              </p>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Settings</strong>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"jsonSettings.prettyPrint\"\n                      id=\"jsonPretty\" />\n                    <label class=\"form-check-label\" for=\"jsonPretty\">\n                      Pretty print (formatted, readable)\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"jsonSettings.includeMetadata\"\n                      id=\"jsonMetadata\" />\n                    <label class=\"form-check-label\" for=\"jsonMetadata\">\n                      Include project metadata\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"jsonSettings.includeStats\"\n                      id=\"jsonStats\" />\n                    <label class=\"form-check-label\" for=\"jsonStats\">\n                      Include statistics\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>ð Export Info</strong>\n                </div>\n                <div class=\"card-body\">\n                  <p class=\"mb-1\"><strong>Lines:</strong> {{ stats.totalLines }}</p>\n                  <p class=\"mb-1\"><strong>Words:</strong> {{ stats.totalWords }}</p>\n                  <p class=\"mb-1\"><strong>Syllables:</strong> {{ stats.totalSyllables }}</p>\n                  <p class=\"mb-0\"><strong>Estimated size:</strong> ~{{ estimatedJSONSize }} KB</p>\n                </div>\n              </div>\n\n              <button class=\"btn btn-primary w-100\" @click=\"exportJSON\" :disabled=\"exporting\">\n                <span v-if=\"!exporting\">ð¾ Export JSON File</span>\n                <span v-else>â³ Exporting...</span>\n              </button>\n            </div>\n          </div>\n\n          <!-- Export Status -->\n          <div v-if=\"exportStatus\" class=\"alert mt-3\"\n            :class=\"exportStatus.type === 'success' ? 'alert-success' : 'alert-danger'\">\n            {{ exportStatus.message }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport type { KaraokeProject } from '../types/karaoke'\nimport { LRCWriter } from '../formats/LRCFormat'\nimport { getProjectStats } from '../services/projectExportService'\n\nconst props = defineProps<{\n  project: KaraokeProject\n}>()\n\nconst emit = defineEmits<{\n  close: []\n}>()\n\n// Selected format tab\nconst selectedFormat = ref<'lrc' | 'cdg' | 'json'>('lrc')\n\n// Export settings\nconst lrcSettings = ref({\n  includeMetadata: true,\n  includeSyllables: true,\n  includeWordTiming: true,\n  precision: 2\n})\n\nconst cdgSettings = ref({\n  backgroundColor: '#000080',  // Navy blue\n  textColor: '#FFFFFF',        // White\n  highlightColor: '#FFFF00',   // Yellow\n  showBorder: true,\n  centerText: true,\n  showMetadata: true,\n  metadataDuration: 3,\n  showCaptions: true,          // Show captions above lyrics\n  captionDuration: 2           // Show captions for 2 seconds\n})\n\nconst jsonSettings = ref({\n  prettyPrint: true,\n  includeMetadata: true,\n  includeStats: true\n})\n\n// State\nconst exporting = ref(false)\nconst exportStatus = ref<{ type: 'success' | 'error'; message: string } | null>(null)\n\n// Format definitions\nconst formats = [\n  {\n    id: 'lrc' as const,\n    label: 'LRC',\n    icon: 'ð'\n  },\n  {\n    id: 'cdg' as const,\n    label: 'CDG',\n    icon: 'ð¿'\n  },\n  {\n    id: 'json' as const,\n    label: 'JSON',\n    icon: 'ð¾'\n  }\n]\n\n// Computed\nconst stats = computed(() => getProjectStats(props.project))\n\nconst lrcPreview = computed(() => {\n  try {\n    const lines = LRCWriter.toLRC(props.project).split('\\n')\n    return lines.slice(0, 10).join('\\n') + (lines.length > 10 ? '\\n...' : '')\n  } catch {\n    return 'Preview not available'\n  }\n})\n\nconst estimatedCDGSize = computed(() => {\n  // CDG: 24 bytes per packet, 75 packets/second\n  const duration = stats.value.duration\n  const packets = Math.ceil(duration * 75)\n  const bytes = packets * 24\n  return Math.ceil(bytes / 1024)\n})\n\nconst estimatedJSONSize = computed(() => {\n  const jsonStr = JSON.stringify(props.project)\n  return Math.ceil(jsonStr.length / 1024)\n})\n\n// Functions\nfunction closeDialog() {\n  emit('close')\n}\n\nfunction formatDuration(seconds: number): string {\n  const mins = Math.floor(seconds / 60)\n  const secs = Math.floor(seconds % 60)\n  return `${mins}:${secs.toString().padStart(2, '0')}`\n}\n\nasync function exportLRC() {\n  exporting.value = true\n  try {\n    const lrcContent = LRCWriter.toLRC(props.project)\n\n    // Download as .lrc file\n    const blob = new Blob([lrcContent], { type: 'text/plain;charset=utf-8' })\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = `${props.project.name.toLowerCase().replace(/\\s+/g, '_')}.lrc`\n\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n\n    URL.revokeObjectURL(url)\n\n    showStatus('success', 'â LRC file exported successfully!')\n  } catch (error: any) {\n    showStatus('error', `â Export failed: ${error.message}`)\n  } finally {\n    exporting.value = false\n  }\n}\n\nasync function exportCDG() {\n  exporting.value = true\n  try {\n    // Dynamic import to avoid loading CDG renderer in browser build\n    showStatus('error', 'â CDG export requires Node.js environment. Use the CLI tool: npx tsx src/karaoke/demo/generateCDG.ts')\n  } catch (error: any) {\n    showStatus('error', `â Export failed: ${error.message}`)\n  } finally {\n    exporting.value = false\n  }\n}\n\nasync function exportJSON() {\n  exporting.value = true\n  try {\n    const jsonContent = jsonSettings.value.prettyPrint\n      ? JSON.stringify(props.project, null, 2)\n      : JSON.stringify(props.project)\n\n    // Download as .json file\n    const blob = new Blob([jsonContent], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = `${props.project.name.toLowerCase().replace(/\\s+/g, '_')}.json`\n\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n\n    URL.revokeObjectURL(url)\n\n    showStatus('success', 'â JSON file exported successfully!')\n  } catch (error: any) {\n    showStatus('error', `â Export failed: ${error.message}`)\n  } finally {\n    exporting.value = false\n  }\n}\n\nfunction showStatus(type: 'success' | 'error', message: string) {\n  exportStatus.value = {\n    type,\n    message\n  }\n  setTimeout(() => {\n    exportStatus.value = null\n  }, 4000)\n}\n</script>\n\n<style scoped>\n/* Bootstrap modal backdrop */\n.modal.show {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n</style>\n","<template>\n  <div class=\"compose-view\">\n    <!-- Project Creation Modal -->\n    <div class=\"modal\" :class=\"{ show: showCreateProject }\" v-if=\"showCreateProject\" @click=\"closeCreateProject\">\n      <div class=\"modal-dialog\" @click.stop>\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Create New Karaoke Project</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeCreateProject\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <form @submit.prevent=\"createProject\">\n              <div class=\"mb-3\">\n                <label for=\"projectName\" class=\"form-label\">Song Title *</label>\n                <input type=\"text\" class=\"form-control\" id=\"projectName\" v-model=\"newProject.name\" required\n                  placeholder=\"Enter song title\" />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"projectArtist\" class=\"form-label\">Artist *</label>\n                <input type=\"text\" class=\"form-control\" id=\"projectArtist\" v-model=\"newProject.artist\" required\n                  placeholder=\"Enter artist name\" />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"projectGenre\" class=\"form-label\">Genre</label>\n                <select class=\"form-control\" id=\"projectGenre\" v-model=\"newProject.genre\">\n                  <option value=\"\">Select Genre</option>\n                  <option value=\"Pop\">Pop</option>\n                  <option value=\"Rock\">Rock</option>\n                  <option value=\"Country\">Country</option>\n                  <option value=\"Hip-Hop\">Hip-Hop</option>\n                  <option value=\"R&B\">R&B</option>\n                  <option value=\"Jazz\">Jazz</option>\n                  <option value=\"Classical\">Classical</option>\n                  <option value=\"Other\">Other</option>\n                </select>\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"audioFile\" class=\"form-label\">Audio File (MP3, WAV) *</label>\n                <input type=\"file\" class=\"form-control\" id=\"audioFile\" accept=\"audio/*\" @change=\"handleAudioFile\"\n                  required />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"lyrics\" class=\"form-label\">Lyrics</label>\n                <textarea class=\"form-control\" id=\"lyrics\" rows=\"8\" v-model=\"newProject.lyricsText\"\n                  placeholder=\"Paste your lyrics here (one line per verse/chorus line)...\"></textarea>\n                <div class=\"form-text\">Each line will become a timing point for synchronization</div>\n              </div>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeCreateProject\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"createProject\" :disabled=\"!canCreateProject\">\n              Create Project\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Storage Info Modal -->\n    <div class=\"modal\" :class=\"{ show: showStorageInfo }\" v-if=\"showStorageInfo\" @click=\"closeStorageInfo\">\n      <div class=\"modal-dialog\" @click.stop>\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">ðï¸ Audio Storage Information</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeStorageInfo\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h6>Storage Methods</h6>\n                <div class=\"list-group list-group-flush\">\n                  <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span>ð¦ Base64 (localStorage)</span>\n                    <span class=\"badge bg-warning rounded-pill\">â¤1MB</span>\n                  </div>\n                  <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span>ðï¸ IndexedDB</span>\n                    <span class=\"badge bg-success rounded-pill\">4-5MB+ Files</span>\n                  </div>\n                  <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span>ð Reference</span>\n                    <span class=\"badge bg-warning rounded-pill\">Re-select</span>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <h6>Current Usage</h6>\n                <div v-if=\"storageInfo\" class=\"card\">\n                  <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Preferred:</span>\n                      <strong>{{ storageInfo.method }}</strong>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Audio Files:</span>\n                      <strong>{{ storageInfo.count }}</strong>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Audio Size:</span>\n                      <strong>{{ storageInfo.sizeMB }} MB</strong>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Storage Used:</span>\n                      <strong>{{ storageInfo.quotaUsedMB }}/{{ storageInfo.quotaLimitMB }} MB</strong>\n                    </div>\n\n                    <!-- Quota warning -->\n                    <div v-if=\"storageInfo.quotaUsedMB > storageInfo.quotaLimitMB * 0.8\"\n                      class=\"alert alert-warning mt-2 mb-0 p-2\">\n                      <small><i class=\"bi bi-exclamation-triangle\"></i> Storage nearly full!</small>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- Storage actions -->\n                <div class=\"mt-2\">\n                  <button class=\"btn btn-outline-info btn-sm w-100 mb-2\" @click=\"testIndexedDB\">\n                    <i class=\"bi bi-gear\"></i> Test IndexedDB\n                  </button>\n                  <button class=\"btn btn-outline-success btn-sm w-100 mb-2\" @click=\"fixStorageBadges\">\n                    <i class=\"bi bi-wrench\"></i> Fix Storage Badges\n                  </button>\n                  <button class=\"btn btn-outline-warning btn-sm w-100\" @click=\"clearAudioCache\">\n                    <i class=\"bi bi-trash3\"></i> Clear Audio Cache\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <hr />\n\n            <div class=\"alert alert-info\">\n              <h6><i class=\"bi bi-info-circle\"></i> Storage Methods Explained:</h6>\n              <ul class=\"mb-0\">\n                <li><strong>IndexedDB:</strong> Best for 4-5MB+ files - up to ~1GB capacity, persistent storage</li>\n                <li><strong>Base64:</strong> Small files only (â¤1MB) - fastest loading but limited by browser quota</li>\n                <li><strong>Reference:</strong> Fallback method - you'll need to re-select files when loading</li>\n              </ul>\n              <div class=\"mt-2 p-2 bg-light rounded\">\n                <small><strong>ð¡ IndexedDB is a built-in browser feature:</strong></small><br />\n                <small>â¢ No setup required - works automatically</small><br />\n                <small>â¢ Available in all modern browsers (Chrome, Firefox, Safari, Edge)</small><br />\n                <small>â¢ Perfect for your 4-5MB audio files - no quota issues!</small><br />\n                <small>â¢ Use \"Test IndexedDB\" button to verify it's working</small>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeStorageInfo\">Close</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Projects Management Screen -->\n    <div class=\"projects-screen py-4\">\n      <div class=\"card\">\n        <div class=\"card-header compose-header\">\n          <div class=\"row align-items-center\">\n            <div class=\"col-md-6\">\n              <h2 class=\"mb-1\">ð¼ Karaoke Composer</h2>\n              <p class=\"mb-0 text-muted\">Create and sync your karaoke tracks</p>\n            </div>\n            <div class=\"col-md-6 text-end\">\n              <button class=\"btn btn-primary me-2\" @click=\"showCreateProject = true\">\n                <i class=\"bi bi-plus-circle\"></i> New Project\n              </button>\n              <button class=\"btn btn-info btn-sm me-2\" @click=\"openStorageInfo\" title=\"Audio storage information\">\n                <i class=\"bi bi-info-circle\"></i> Storage\n              </button>\n              <button class=\"btn btn-danger btn-sm\" @click=\"clearAllProjects\" title=\"Clear all saved projects\">\n                <i class=\"bi bi-trash3\"></i> Clear All\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"card-body\">\n          <!-- Projects List -->\n          <div v-if=\"projects.length > 0\">\n            <h5 class=\"mb-3\">Your Projects</h5>\n            <div class=\"list-group\">\n              <div v-for=\"project in projects\" :key=\"project.id\" class=\"list-group-item p-0 project-item\">\n                <div class=\"btn-group w-100\" role=\"group\">\n                  <button class=\"btn btn-outline-secondary text-start flex-grow-1 project-content-btn\"\n                    @click=\"openProject(project)\">\n                    <div class=\"fw-bold d-flex align-items-center\">\n                      <i class=\"bi bi-music-note-beamed me-2 text-primary\"></i>\n                      {{ project.name }}\n                    </div>\n                    <div class=\"text-muted small\">by {{ project.artist }} â¢ {{ project.genre }}</div>\n                    <div class=\"text-muted small\">\n                      <i class=\"bi bi-clock me-1\"></i>\n                      Last updated {{ formatDate(project.updatedAt) }}\n                    </div>\n                    <div class=\"text-muted small\" v-if=\"project.audioFile\">\n                      <i class=\"bi bi-file-music me-1\"></i>\n                      {{ project.audioFile.name }}\n                      <span class=\"badge ms-2\"\n                        :class=\"getStorageBadgeClass(project.audioFile.storedData?.storageType || 'unknown')\">\n                        {{ getStorageBadgeText(project.audioFile.storedData?.storageType || 'unknown') }}\n                      </span>\n                    </div>\n                  </button>\n                  <button class=\"btn btn-success export-btn\" @click.stop=\"exportProject(project)\"\n                    title=\"Export project for terminal demo\">\n                    <i class=\"bi bi-download\"></i>\n                  </button>\n                  <button class=\"btn btn-warning delete-btn\" @click.stop=\"deleteProject(project)\"\n                    title=\"Delete project\">\n                    <i class=\"bi bi-trash3\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Empty State -->\n          <div v-else class=\"text-center py-5\">\n            <i class=\"bi bi-music-note-list display-1 text-muted mb-3\"></i>\n            <h5 class=\"text-muted\">No projects yet</h5>\n            <p class=\"text-muted\">Create your first karaoke project to get started</p>\n            <button class=\"btn btn-primary btn-lg\" @click=\"showCreateProject = true\">\n              <i class=\"bi bi-plus-circle me-2\"></i>Create Your First Project\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Developer Toolbar -->\n  <div class=\"developer-toolbar\">\n    <div class=\"container\">\n      <!-- Toolbar Header (always visible) -->\n      <div class=\"toolbar-header\" @click=\"toggleDevToolbar\">\n        <div class=\"toolbar-label\">\n          <i class=\"bi bi-code-slash me-1\"></i>\n          <small class=\"text-muted\">Developer Tools</small>\n        </div>\n        <div class=\"toolbar-toggle\">\n          <i class=\"bi bi-chevron-down\" :class=\"{ 'rotate-180': !showDevToolbar }\"></i>\n        </div>\n      </div>\n\n      <!-- Toolbar Content (collapsible) -->\n      <div v-if=\"showDevToolbar\" class=\"toolbar-content\">\n        <div class=\"toolbar-buttons\">\n          <router-link to=\"/test-timing\" class=\"btn btn-outline-primary btn-sm me-2\">\n            <i class=\"bi bi-play-circle me-1\"></i>\n            Test Word Timing Editor\n          </router-link>\n          <button class=\"btn btn-outline-secondary btn-sm me-2\" @click=\"showStorageInfo = true\">\n            <i class=\"bi bi-database me-1\"></i>\n            Storage Info\n          </button>\n          <button class=\"btn btn-outline-info btn-sm\" @click=\"fixStorageBadges\">\n            <i class=\"bi bi-wrench me-1\"></i>\n            Fix Badges\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Export Dialog -->\n  <ExportDialog v-if=\"showExportDialog && projectToExport\" :project=\"projectToExport\" @close=\"closeExportDialog\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\nimport { useRouter } from 'vue-router'\nimport type { KaraokeProject } from '@/types/karaoke'\nimport { audioStorageService } from '@/services/audioStorageService'\nimport { parseLyricsWithMetadata } from '@/utils/lyricsParser'\nimport ExportDialog from '@/components/ExportDialog.vue'\n\n// Reactive state\nconst router = useRouter()\nconst showCreateProject = ref(false)\nconst showStorageInfo = ref(false)\nconst showExportDialog = ref(false)\nconst projectToExport = ref<KaraokeProject | null>(null)\nconst projects = ref<KaraokeProject[]>([])\nconst isMounted = ref(true)\n\n// Developer toolbar\nconst showDevToolbar = ref(true)\n\n// Storage and IndexedDB testing\n// const indexedDBTestResult = ref<string>('')\nconst storageInfo = ref<{ method: string; sizeMB: number; count: number; quotaUsedMB: number; quotaLimitMB: number } | null>(null)\n\n// New project form\nconst newProject = ref({\n  name: '',\n  artist: '',\n  genre: '',\n  lyricsText: '',\n  audioFile: null as File | null,\n})\n\n// Computed properties\nconst canCreateProject = computed(() => {\n  return newProject.value.name && newProject.value.artist && newProject.value.audioFile\n})\n\n// const hotkeyHelpText = computed(() => {\n//   return 'Click for complete hotkey reference guide'\n// })\n\n// Watch for lyrics changes to auto-populate title and artist from metadata\nwatch(() => newProject.value.lyricsText, (newLyrics) => {\n  if (!newLyrics) return\n\n  const { metadata } = parseLyricsWithMetadata(newLyrics)\n\n  // Auto-populate title if found in metadata and user hasn't entered one yet\n  if (metadata.title && !newProject.value.name.trim()) {\n    newProject.value.name = metadata.title\n  }\n\n  // Auto-populate artist if found in metadata and user hasn't entered one yet\n  if (metadata.author && !newProject.value.artist.trim()) {\n    newProject.value.artist = metadata.author\n  }\n})\n\n// Methods\nconst closeCreateProject = () => {\n  showCreateProject.value = false\n  resetNewProject()\n}\n\nconst closeStorageInfo = () => {\n  showStorageInfo.value = false\n}\n\nconst openStorageInfo = () => {\n  storageInfo.value = audioStorageService.getStorageInfo()\n  showStorageInfo.value = true\n}\n\nconst clearAudioCache = async () => {\n  if (\n    confirm(\n      'This will remove all cached audio files from storage. Projects will still work but may need to re-select audio files. Continue?'\n    )\n  ) {\n    const cleared = await audioStorageService.clearOldAudioFiles()\n    alert(`Cleared ${cleared} audio files from cache.`)\n    // Refresh storage info\n    storageInfo.value = audioStorageService.getStorageInfo()\n  }\n}\n\nconst testIndexedDB = async () => {\n  const result = await audioStorageService.testIndexedDBConnection()\n\n  let message = 'ð IndexedDB Test Results:\\n\\n'\n\n  if (result.available) {\n    message += 'â IndexedDB is supported by your browser\\n'\n  } else {\n    message += 'â IndexedDB is NOT supported by your browser\\n'\n  }\n\n  if (result.canStore) {\n    message += 'â Can store files in IndexedDB\\n'\n    message += 'ðµ Your 4-5MB audio files will work perfectly!'\n  } else {\n    message += 'â Cannot store files in IndexedDB\\n'\n    if (result.error) {\n      message += `Error: ${result.error}\\n`\n    }\n    message += 'â ï¸ Will fallback to other storage methods'\n  }\n\n  alert(message)\n}\n\nconst getStorageBadgeClass = (storageType: string) => {\n  switch (storageType) {\n    case 'base64':\n      return 'bg-success'\n    case 'indexeddb':\n      return 'bg-info'\n    case 'reference':\n      return 'bg-warning'\n    default:\n      return 'bg-secondary'\n  }\n}\n\nconst getStorageBadgeText = (storageType: string) => {\n  switch (storageType) {\n    case 'base64':\n      return 'ð¦ Base64'\n    case 'indexeddb':\n      return 'ðï¸ IndexedDB'\n    case 'reference':\n      return 'ð Reference'\n    default:\n      return 'Unknown'\n  }\n}\n\nconst resetNewProject = () => {\n  newProject.value = {\n    name: '',\n    artist: '',\n    genre: '',\n    lyricsText: '',\n    audioFile: null,\n  }\n}\n\nconst handleAudioFile = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  if (target.files && target.files[0]) {\n    newProject.value.audioFile = target.files[0]\n  }\n}\n\nconst createProject = async () => {\n  console.log('createProject called', {\n    canCreate: canCreateProject.value,\n    name: newProject.value.name,\n    artist: newProject.value.artist,\n    audioFile: newProject.value.audioFile?.name,\n  })\n\n  if (!canCreateProject.value) {\n    console.log('Cannot create project - missing requirements')\n    return\n  }\n\n  // Parse lyrics with metadata and syllable support\n  const { lyrics } = parseLyricsWithMetadata(newProject.value.lyricsText)\n\n  const projectId = `project-${Date.now()}`\n\n  // Store the audio file using the storage service\n  console.log('Storing audio file...')\n  const storedAudioFile = await audioStorageService.storeAudioFile(newProject.value.audioFile!, projectId)\n\n  const project: KaraokeProject = {\n    id: projectId,\n    name: newProject.value.name,\n    artist: newProject.value.artist,\n    genre: newProject.value.genre || 'Unknown',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    audioFile: {\n      name: newProject.value.audioFile!.name,\n      file: newProject.value.audioFile,\n      url: URL.createObjectURL(newProject.value.audioFile!),\n      storedData: storedAudioFile,\n    },\n    lyrics,\n    timings: [],\n    isCompleted: false,\n  }\n\n  projects.value.push(project)\n\n  try {\n    saveProjectsToStorage()\n    closeCreateProject()\n    console.log('Project created successfully:', project.name)\n\n    // Navigate to the timing editor only if component is still mounted\n    if (isMounted.value) {\n      router.push(`/timing/${projectId}`)\n    }\n  } catch (error) {\n    console.error('Error creating project:', error)\n    alert('Error creating project: ' + error)\n  }\n}\n\nconst openProject = async (project: KaraokeProject) => {\n  // Navigate to the timing editor only if component is still mounted\n  if (isMounted.value) {\n    router.push(`/timing/${project.id}`)\n  }\n}\n\nconst deleteProject = async (project: KaraokeProject) => {\n  if (confirm(`Are you sure you want to delete \"${project.name}\"? This action cannot be undone.`)) {\n    // Remove from projects array\n    const index = projects.value.findIndex(p => p.id === project.id)\n    if (index > -1) {\n      projects.value.splice(index, 1)\n\n      // Save updated projects to storage\n      saveProjectsToStorage()\n\n      console.log(`Project \"${project.name}\" deleted successfully`)\n    }\n  }\n}\n\nconst exportProject = (project: KaraokeProject) => {\n  projectToExport.value = project\n  showExportDialog.value = true\n}\n\nconst closeExportDialog = () => {\n  showExportDialog.value = false\n  projectToExport.value = null\n}\n\nconst formatDate = (date: Date) => {\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(date)\n}\n\nconst loadProjectsFromStorage = () => {\n  const stored = localStorage.getItem('karaokeProjects')\n  if (stored) {\n    try {\n      const data = JSON.parse(stored)\n      projects.value = data.map((p: any) => ({\n        ...p,\n        createdAt: new Date(p.createdAt),\n        updatedAt: new Date(p.updatedAt),\n        // Ensure audioFile has the right structure\n        audioFile: {\n          ...p.audioFile,\n          file: null, // File objects can't be serialized, will be restored from storage\n        },\n      }))\n      console.log(`Loaded ${projects.value.length} projects from storage`)\n\n      // Debug storage badge issue\n      projects.value.forEach((project, index) => {\n        console.log(`ð Project ${index + 1}: \"${project.name}\"`)\n        console.log('   audioFile:', project.audioFile)\n        console.log('   storedData:', project.audioFile?.storedData)\n        console.log('   storageType:', project.audioFile?.storedData?.storageType)\n        console.log('   Badge will show:', getStorageBadgeText(project.audioFile?.storedData?.storageType || 'unknown'))\n        console.log('---')\n      })\n    } catch (error) {\n      console.error('Error loading projects:', error)\n    }\n  }\n}\n\nconst saveProjectsToStorage = () => {\n  try {\n    // Create a serializable version of projects (without File objects)\n    const serializableProjects = projects.value.map(project => ({\n      ...project,\n      audioFile: {\n        ...project.audioFile,\n        file: null, // Remove File object for serialization\n        url: undefined, // Remove blob URL (will be recreated)\n      },\n    }))\n\n    localStorage.setItem('karaokeProjects', JSON.stringify(serializableProjects))\n    console.log(`ð¾ Saved ${projects.value.length} projects to storage`)\n\n    // Debug: Check if storedData is preserved\n    serializableProjects.forEach((project, index) => {\n      console.log(`Project ${index}: ${project.name} - StoredData preserved:`, {\n        hasStoredData: !!project.audioFile.storedData,\n        storageType: project.audioFile.storedData?.storageType,\n        duration: project.audioFile.duration,\n      })\n    })\n  } catch (error) {\n    console.error('Error saving projects:', error)\n  }\n}\n\nconst fixStorageBadges = () => {\n  let fixedCount = 0\n\n  projects.value.forEach(project => {\n    if (project.audioFile && !project.audioFile.storedData) {\n      // Try to infer storage type from available data\n      let inferredStorageType = 'reference' // Default fallback\n\n      // Check if there's base64 data in localStorage\n      const lastModified = project.audioFile.file?.lastModified || 0\n      const audioKey = `audio_${project.id}_${project.audioFile.name}_${lastModified}`\n      if (localStorage.getItem(`audio_${audioKey}`)) {\n        inferredStorageType = 'base64'\n      }\n\n      // Create minimal storedData\n      project.audioFile.storedData = {\n        name: project.audioFile.name,\n        size: 0,\n        type: 'audio/mpeg',\n        lastModified: Date.now(),\n        storageType: inferredStorageType as 'base64' | 'indexeddb' | 'reference',\n      }\n\n      fixedCount++\n      console.log(`ð§ Fixed storage badge for project: ${project.name} -> ${inferredStorageType}`)\n    }\n  })\n\n  if (fixedCount > 0) {\n    saveProjectsToStorage()\n    alert(`Fixed storage badges for ${fixedCount} project(s). Refresh the page to see the changes.`)\n  } else {\n    alert('All projects already have proper storage data.')\n  }\n}\n\nconst clearAllProjects = () => {\n  if (confirm('Are you sure you want to delete ALL saved projects? This cannot be undone.')) {\n    localStorage.removeItem('karaokeProjects')\n    projects.value = []\n\n    console.log('All projects cleared from localStorage')\n    alert('All projects have been cleared. You can now start fresh!')\n  }\n}\n\nconst toggleDevToolbar = () => {\n  showDevToolbar.value = !showDevToolbar.value\n}\n\n// Global hotkey handler for ESC key\nconst handleKeyDown = (event: KeyboardEvent) => {\n  if (event.code === 'Escape') {\n    if (showCreateProject.value) {\n      event.preventDefault()\n      closeCreateProject()\n    } else if (showStorageInfo.value) {\n      event.preventDefault()\n      closeStorageInfo()\n    }\n  }\n}\n\nonMounted(async () => {\n  loadProjectsFromStorage()\n\n  // Wait a moment for IndexedDB to initialize\n  await new Promise(resolve => setTimeout(resolve, 100))\n\n  // Check storage health and IndexedDB status\n  const info = audioStorageService.getStorageInfo()\n  console.log('ð Audio storage service initialized:', info)\n\n  // Check IndexedDB availability\n  if (window.indexedDB) {\n    console.log('â IndexedDB is available in this browser')\n  } else {\n    console.warn('â IndexedDB is NOT available in this browser')\n  }\n\n  if (info.quotaUsedMB > info.quotaLimitMB * 0.9) {\n    console.warn('â ï¸ Storage quota nearly full:', info.quotaUsedMB, '/', info.quotaLimitMB, 'MB')\n  }\n\n  // Log storage method being used\n  if (info.method === 'indexeddb') {\n    console.log('ðï¸ Using IndexedDB - perfect for 4-5MB files!')\n  } else {\n    console.log('ð¦ Using fallback storage method:', info.method)\n  }\n\n  // Setup ESC key handler for closing modals\n  window.addEventListener('keydown', handleKeyDown)\n})\n\nonUnmounted(() => {\n  // Mark component as unmounted to prevent router navigation\n  isMounted.value = false\n\n  // Cleanup ESC key handler\n  window.removeEventListener('keydown', handleKeyDown)\n})\n</script>\n\n<style scoped>\n.modal.show {\n  display: block;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.compose-header {\n  border-radius: 0.5rem;\n  border: 1px solid #dee2e6;\n}\n\n.project-info {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n}\n\n.project-info .card-body {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 0.5rem;\n}\n\n.projects-screen {\n  min-height: 60vh;\n}\n\n.project-item {\n  border-left: 3px solid transparent;\n  transition: all 0.2s ease;\n}\n\n.project-item:hover {\n  border-left-color: #0d6efd;\n  transform: translateX(2px);\n}\n\n.project-content-btn {\n  padding: 1rem;\n  height: auto;\n  white-space: normal;\n  text-align: left !important;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex: 1;\n}\n\n.project-content-btn:hover {\n  background-color: #f8f9fa;\n  border-color: #0d6efd;\n  color: #212529 !important;\n}\n\n.project-content-btn:hover .text-muted {\n  color: #6c757d !important;\n}\n\n.project-content-btn:hover .text-primary {\n  color: #0d6efd !important;\n}\n\n.delete-btn {\n  width: 60px;\n  max-width: 60px;\n  flex: 0 0 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n}\n\n.export-btn {\n  width: 60px;\n  max-width: 60px;\n  flex: 0 0 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.3rem;\n}\n\n.export-btn:hover {\n  background-color: #198754 !important;\n  border-color: #198754 !important;\n}\n\n.project-item .btn-group {\n  transition: all 0.2s ease;\n}\n\n/* Ensure button group buttons connect properly */\n.btn-group>.btn:not(:last-child) {\n  border-right: none;\n}\n\n.btn-group>.btn:not(:first-child) {\n  border-left: none;\n}\n\n/* Developer Toolbar */\n.developer-toolbar {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: #f8f9fa;\n  border-top: 2px solid #007bff;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n}\n\n.toolbar-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 0;\n  cursor: pointer;\n  user-select: none;\n  transition: background-color 0.2s;\n}\n\n.toolbar-header:hover {\n  background-color: rgba(0, 0, 0, 0.02);\n}\n\n.toolbar-label {\n  display: flex;\n  align-items: center;\n}\n\n.toolbar-toggle {\n  color: #6c757d;\n  transition: transform 0.3s ease;\n}\n\n.toolbar-toggle .rotate-180 {\n  transform: rotate(180deg);\n}\n\n.toolbar-content {\n  padding-bottom: 10px;\n  border-top: 1px solid #dee2e6;\n  padding-top: 10px;\n}\n\n.toolbar-buttons {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n/* Add some padding to the main content so it doesn't get hidden behind the toolbar */\n.compose-view {\n  padding-bottom: 60px;\n}\n</style>\n"],"names":["LRCWriter","project","lines","duration","lyricsLineIndex","lyricLine","captionText","_a","lineTimestamp","lineText","line","parts","word","syllable","ms","totalSeconds","minutes","seconds","value","lyrics","maxTime","getProjectStats","totalWords","totalSyllables","timedWords","timedSyllables","timedLines","completionPercentage","props","__props","emit","__emit","selectedFormat","ref","lrcSettings","cdgSettings","jsonSettings","exporting","exportStatus","formats","stats","computed","lrcPreview","e","estimatedCDGSize","bytes","estimatedJSONSize","jsonStr","closeDialog","formatDuration","mins","secs","exportLRC","lrcContent","blob","url","link","showStatus","error","exportCDG","exportJSON","jsonContent","type","message","_createElementBlock","_createElementVNode","_hoisted_1","_hoisted_2","_cache","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","_hoisted_6","_hoisted_7","_hoisted_8","_Fragment","_renderList","format","$event","_hoisted_10","_hoisted_11","_openBlock","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_vModelCheckbox","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_vModelSelect","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_vModelText","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_normalizeClass","router","useRouter","showCreateProject","showStorageInfo","showExportDialog","projectToExport","projects","isMounted","showDevToolbar","storageInfo","newProject","canCreateProject","watch","newLyrics","metadata","parseLyricsWithMetadata","closeCreateProject","resetNewProject","closeStorageInfo","openStorageInfo","audioStorageService","clearAudioCache","cleared","testIndexedDB","result","getStorageBadgeClass","storageType","getStorageBadgeText","handleAudioFile","event","target","createProject","projectId","storedAudioFile","saveProjectsToStorage","openProject","deleteProject","index","p","exportProject","closeExportDialog","formatDate","date","loadProjectsFromStorage","stored","data","_c","_b","_e","_d","serializableProjects","fixStorageBadges","fixedCount","inferredStorageType","lastModified","audioKey","clearAllProjects","toggleDevToolbar","handleKeyDown","onMounted","resolve","info","onUnmounted","_hoisted_9","_hoisted_23","_hoisted_24","_hoisted_25","_createTextVNode","_withModifiers","_hoisted_43","_createVNode","_component_router_link","_createBlock","ExportDialog"],"mappings":"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"}