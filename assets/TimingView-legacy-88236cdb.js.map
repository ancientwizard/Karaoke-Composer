{"version":3,"file":"TimingView-legacy-88236cdb.js","sources":["../../src/services/audioService.ts","../../src/models/MusicalTimingModel.ts","../../src/components/LyricsEditor.vue","../../src/components/LyricsPreview.vue","../../src/components/WaveformViewer.vue","../../src/components/TimingControlsPanel.vue","../../src/components/ProgressStats.vue","../../src/components/HotkeyHelp.vue","../../src/components/ViewportIndicator.vue","../../src/views/TimingView.vue","../../src/composables/useTimingAnalysis.ts"],"sourcesContent":["// Audio playback service using Web Audio API and HTML5 Audio\nimport type { PlaybackState, AudioFile } from '@/types/karaoke'\nimport { TimingUtils } from '@/models/TimingConstants'\n\nexport class AudioService {\n  private audio: HTMLAudioElement | null = null\n  private audioContext: AudioContext | null = null\n  private source: MediaElementAudioSourceNode | null = null\n  private analyser: AnalyserNode | null = null\n  private gainNode: GainNode | null = null\n  private isInitialized = false\n\n  // High-frequency timer for smooth updates\n  private updateTimer: number | null = null\n  private fastMode = false\n\n  private playbackState: PlaybackState = {\n    isPlaying: false,\n    currentTime: 0,\n    duration: 0,\n    volume: 1,\n    playbackRate: 1,\n    isLoaded: false,\n  }\n\n  private timeUpdateCallback?: (time: number) => void\n  private playbackStateCallback?: (state: PlaybackState) => void\n\n  constructor() {\n    this.initializeAudioContext()\n  }\n\n  private async initializeAudioContext() {\n    try {\n      // Check if we need to recreate context\n      if (this.audioContext && this.audioContext.state === 'closed') {\n        this.audioContext = null\n        this.analyser = null\n        this.gainNode = null\n        this.source = null\n        this.isInitialized = false\n      }\n\n      if (!this.audioContext || this.audioContext.state === 'closed') {\n        this.audioContext = new AudioContext()\n        this.analyser = this.audioContext.createAnalyser()\n        this.gainNode = this.audioContext.createGain()\n\n        this.analyser.fftSize = 2048\n        this.analyser.connect(this.audioContext.destination)\n        this.gainNode.connect(this.analyser)\n\n        this.isInitialized = true\n        console.log('Audio context initialized successfully')\n      }\n\n      // Resume context if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume()\n        console.log('Audio context resumed')\n      }\n    } catch (error) {\n      console.error('Failed to initialize audio context:', error)\n    }\n  }\n\n  async loadAudioFile(audioFile: AudioFile): Promise<boolean> {\n    try {\n      // Ensure audio context is properly initialized\n      await this.initializeAudioContext()\n\n      // Create or update HTML5 audio element\n      if (this.audio) {\n        this.audio.pause()\n        this.audio.src = ''\n      }\n\n      this.audio = new Audio()\n\n      // Set up event listeners\n      this.setupAudioEventListeners()\n\n      // Load the audio file\n      if (audioFile.file) {\n        const url = URL.createObjectURL(audioFile.file)\n        this.audio.src = url\n      } else if (audioFile.url) {\n        this.audio.src = audioFile.url\n      } else {\n        throw new Error('No audio file or URL provided')\n      }\n\n      // Connect to Web Audio API if initialized\n      if (this.isInitialized && this.audioContext && this.gainNode) {\n        try {\n          if (this.source) {\n            this.source.disconnect()\n          }\n          this.source = this.audioContext.createMediaElementSource(this.audio)\n          this.source.connect(this.gainNode)\n          console.log('Audio source connected to Web Audio API')\n        } catch (contextError) {\n          console.warn('Web Audio API connection failed, falling back to basic audio:', contextError)\n          // Continue without Web Audio API features\n        }\n      }\n\n      // Wait for audio to be ready\n      await new Promise<void>((resolve, reject) => {\n        const handleCanPlay = () => {\n          this.audio!.removeEventListener('canplaythrough', handleCanPlay)\n          this.audio!.removeEventListener('error', handleError)\n          resolve()\n        }\n\n        const handleError = (error: Event) => {\n          this.audio!.removeEventListener('canplaythrough', handleCanPlay)\n          this.audio!.removeEventListener('error', handleError)\n          reject(error)\n        }\n\n        this.audio!.addEventListener('canplaythrough', handleCanPlay)\n        this.audio!.addEventListener('error', handleError)\n        this.audio!.load()\n      })\n\n      this.playbackState.isLoaded = true\n\n      // Robust duration detection\n      const duration = await this.detectAudioDuration(audioFile)\n      this.playbackState.duration = duration\n      this.updatePlaybackState()\n\n      return true\n    } catch (error) {\n      console.error('Failed to load audio file:', error)\n      this.playbackState.isLoaded = false\n      this.updatePlaybackState()\n      return false\n    }\n  }\n\n  private setupAudioEventListeners() {\n    if (!this.audio) return\n\n    this.audio.addEventListener('timeupdate', () => {\n      this.playbackState.currentTime = this.audio!.currentTime * 1000 // Convert to ms\n      this.updatePlaybackState()\n\n      if (this.timeUpdateCallback) {\n        this.timeUpdateCallback(this.playbackState.currentTime)\n      }\n    })\n\n    this.audio.addEventListener('play', () => {\n      this.playbackState.isPlaying = true\n      this.updatePlaybackState()\n    })\n\n    this.audio.addEventListener('pause', () => {\n      this.playbackState.isPlaying = false\n      this.updatePlaybackState()\n    })\n\n    this.audio.addEventListener('ended', () => {\n      this.playbackState.isPlaying = false\n      this.playbackState.currentTime = 0\n      this.updatePlaybackState()\n    })\n\n    this.audio.addEventListener('loadedmetadata', () => {\n      this.playbackState.duration = this.audio!.duration * 1000\n      this.updatePlaybackState()\n    })\n  }\n\n  async play(): Promise<void> {\n    if (!this.audio || !this.playbackState.isLoaded) return\n\n    try {\n      // Ensure audio context is properly initialized\n      await this.initializeAudioContext()\n\n      // Resume AudioContext if suspended (required by some browsers)\n      if (this.audioContext && this.audioContext.state === 'suspended') {\n        await this.audioContext.resume()\n        console.log('Audio context resumed for playback')\n      }\n\n      await this.audio.play()\n      this.playbackState.isPlaying = true\n      this.startUpdateTimer() // Start high-frequency timer\n      this.updatePlaybackState()\n      console.log('Audio playback started successfully')\n    } catch (error) {\n      console.error('Failed to play audio:', error)\n      throw error\n    }\n  }\n\n  pause(): void {\n    if (this.audio) {\n      this.audio.pause()\n      this.stopUpdateTimer() // Stop high-frequency timer\n    }\n  }\n\n  stop(): void {\n    if (this.audio) {\n      this.audio.pause()\n      this.audio.currentTime = 0\n    }\n  }\n\n  seek(timeMs: number): void {\n    if (this.audio && this.playbackState.isLoaded) {\n      this.audio.currentTime = timeMs / 1000 // Convert to seconds\n\n      // Immediately update playback state to sync waveform red line\n      this.playbackState.currentTime = timeMs\n      this.updatePlaybackState()\n\n      // Trigger time update callback for immediate UI sync\n      if (this.timeUpdateCallback) {\n        this.timeUpdateCallback(timeMs)\n      }\n    }\n  }\n\n  setVolume(volume: number): void {\n    if (this.audio) {\n      this.audio.volume = Math.max(0, Math.min(1, volume))\n      this.playbackState.volume = this.audio.volume\n    }\n\n    if (this.gainNode) {\n      this.gainNode.gain.value = this.playbackState.volume\n    }\n\n    this.updatePlaybackState()\n  }\n\n  setPlaybackRate(rate: number): void {\n    if (this.audio) {\n      this.audio.playbackRate = Math.max(0.25, Math.min(4, rate))\n      this.playbackState.playbackRate = this.audio.playbackRate\n    }\n\n    this.updatePlaybackState()\n  }\n\n  getPlaybackState(): PlaybackState {\n    return { ...this.playbackState }\n  }\n\n  onTimeUpdate(callback: (time: number) => void): void {\n    this.timeUpdateCallback = callback\n  }\n\n  onPlaybackStateChange(callback: (state: PlaybackState) => void): void {\n    this.playbackStateCallback = callback\n  }\n\n  // Enable/disable fast refresh mode for smoother updates\n  setFastMode(enabled: boolean): void {\n    this.fastMode = enabled\n    if (this.playbackState.isPlaying) {\n      this.stopUpdateTimer()\n      this.startUpdateTimer()\n    }\n    const hz = enabled ? '12Hz' : '8Hz'\n    const interval = enabled ? '~83ms' : '~125ms'\n    console.log(`🔄 Refresh rate: ${hz} (${interval} intervals) - ${enabled ? 'FAST MODE' : 'Normal mode'}`)\n  }\n\n  // Toggle fast refresh mode for hotkey convenience\n  toggleFastMode(): void {\n    this.setFastMode(!this.fastMode)\n  }\n\n  // Get current fast mode state\n  getFastMode(): boolean {\n    return this.fastMode\n  }\n\n  private startUpdateTimer(): void {\n    if (this.updateTimer) {\n      clearInterval(this.updateTimer)\n    }\n\n    const interval = TimingUtils.getPlaybackUpdateInterval(this.fastMode)\n    this.updateTimer = window.setInterval(() => {\n      if (this.audio && this.playbackState.isPlaying) {\n        const currentTimeMs = this.audio.currentTime * 1000\n        this.playbackState.currentTime = currentTimeMs\n\n        if (this.timeUpdateCallback) {\n          this.timeUpdateCallback(currentTimeMs)\n        }\n      }\n    }, interval)\n  }\n\n  private stopUpdateTimer(): void {\n    if (this.updateTimer) {\n      clearInterval(this.updateTimer)\n      this.updateTimer = null\n    }\n  }\n\n  private updatePlaybackState(): void {\n    if (this.playbackStateCallback) {\n      this.playbackStateCallback({ ...this.playbackState })\n    }\n  }\n\n  // Get frequency data for visualization\n  getFrequencyData(): Uint8Array | null {\n    if (!this.analyser) return null\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount)\n    this.analyser.getByteFrequencyData(dataArray)\n    return dataArray\n  }\n\n  // Get time domain data for waveform\n  getTimeDomainData(): Uint8Array | null {\n    if (!this.analyser) return null\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount)\n    this.analyser.getByteTimeDomainData(dataArray)\n    return dataArray\n  }\n\n  // Generate waveform data from audio buffer\n  async generateWaveformData(samples: number = 1000): Promise<number[] | null> {\n    if (!this.audio || !this.audioContext) return null\n\n    try {\n      // Fetch audio data\n      const response = await fetch(this.audio.src)\n      const arrayBuffer = await response.arrayBuffer()\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)\n\n      const channelData = audioBuffer.getChannelData(0)\n      const blockSize = Math.floor(channelData.length / samples)\n      const peaks: number[] = []\n\n      for (let i = 0; i < samples; i++) {\n        const start = i * blockSize\n        const end = start + blockSize\n        let max = 0\n\n        for (let j = start; j < end; j++) {\n          max = Math.max(max, Math.abs(channelData[j]))\n        }\n\n        peaks.push(max)\n      }\n\n      return peaks\n    } catch (error) {\n      console.error('Failed to generate waveform data:', error)\n      return null\n    }\n  }\n\n  private async detectAudioDuration(audioFile: AudioFile): Promise<number> {\n    // First check if we have a stored duration from previous detection\n    if (audioFile.duration && audioFile.duration > 0) {\n      console.log('✅ Using stored duration:', audioFile.duration / 1000, 'seconds')\n      return audioFile.duration\n    }\n\n    // Second try the simple approach - if HTML5 audio has valid duration\n    if (this.audio && isFinite(this.audio.duration) && this.audio.duration > 0) {\n      console.log('📏 Duration from HTML5 audio:', this.audio.duration, 'seconds')\n      return this.audio.duration * 1000 // Convert to ms\n    }\n\n    console.log('⏳ HTML5 duration invalid, using Web Audio API to detect duration...')\n\n    try {\n      // Use Web Audio API to decode the entire file and get accurate duration\n      const arrayBuffer = await this.fileToArrayBuffer(audioFile)\n\n      if (!this.audioContext) {\n        throw new Error('AudioContext not initialized')\n      }\n\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)\n      const durationMs = audioBuffer.duration * 1000\n\n      console.log('🎵 Duration detected via Web Audio API:', audioBuffer.duration, 'seconds')\n      return durationMs\n    } catch (error) {\n      console.error('❌ Failed to detect audio duration:', error)\n\n      // Fallback: return a default duration and warn user\n      console.warn('⚠️ Using fallback duration of 3 minutes - waveform scrolling may not work correctly')\n      return 180000 // 3 minutes in ms\n    }\n  }\n\n  private async fileToArrayBuffer(audioFile: AudioFile): Promise<ArrayBuffer> {\n    if (audioFile.file) {\n      return await audioFile.file.arrayBuffer()\n    } else if (audioFile.url) {\n      const response = await fetch(audioFile.url)\n      return await response.arrayBuffer()\n    } else {\n      throw new Error('No audio file or URL available')\n    }\n  }\n\n  dispose(): void {\n    if (this.audio) {\n      this.audio.pause()\n      this.audio.src = ''\n    }\n\n    if (this.source) {\n      this.source.disconnect()\n    }\n\n    if (this.audioContext) {\n      this.audioContext.close()\n    }\n\n    this.timeUpdateCallback = undefined\n    this.playbackStateCallback = undefined\n  }\n}\n\n// Export singleton instance\nexport const audioService = new AudioService()\n","/**\n * MUSICAL TIMING MODEL - Beat-Aware Syllable Distribution\n * Addresses the preference to distribute words & syllables musically\n * instead of being musically intelligent about rests and note patterns.\n */\n\nimport type { WordTiming } from '@/types/karaoke'\nimport { TIMING } from '@/models/TimingConstants'\n\nexport interface MusicalNote {\n  type: 'eighth' | 'quarter' | 'half' | 'whole'\n  duration: number // in milliseconds\n}\n\nexport interface TimingContext {\n  bpm?: number // beats per minute\n  timeSignature?: [number, number] // e.g., [4, 4]\n  estimatedBeatDuration?: number // milliseconds per beat\n}\n\nexport interface RestPattern {\n  hasRest: boolean\n  restType: 'comma' | 'period' | 'breath' | 'phrase'\n  estimatedRestDuration: number\n}\n\n/**\n * Analyze text for musical rest indicators\n */\nexport function detectRestPattern(\n  currentWord: string,\n  nextWordText?: string,\n  timeToNextWord?: number\n): RestPattern {\n  // Check punctuation that indicates rests\n  const wordEndsWithComma = /[,;]$/.test(currentWord)\n  const wordEndsWithPeriod = /[.!?]$/.test(currentWord)\n  const nextWordIsCapitalized = nextWordText ? /^[A-Z]/.test(nextWordText) : false\n\n  if (wordEndsWithPeriod || nextWordIsCapitalized) {\n    return {\n      hasRest: true,\n      restType: 'phrase',\n      estimatedRestDuration: TIMING.musical.restDuration.period\n    }\n  }\n\n  if (wordEndsWithComma) {\n    return {\n      hasRest: true,\n      restType: 'comma',\n      estimatedRestDuration: TIMING.musical.restDuration.comma\n    }\n  }\n\n  // Use timing gap to infer rest\n  if (timeToNextWord && timeToNextWord > 1000) {\n    return {\n      hasRest: true,\n      restType: 'breath',\n      estimatedRestDuration: Math.min(timeToNextWord * 0.3, TIMING.musical.restDuration.breath)\n    }\n  }\n\n  return {\n    hasRest: false,\n    restType: 'breath',\n    estimatedRestDuration: 0\n  }\n}\n\n/**\n * Estimate note durations based on syllable count and musical context\n */\nexport function estimateNotePattern(\n  syllableCount: number,\n  availableTime: number,\n  context: TimingContext = {}\n): MusicalNote[] {\n  const { estimatedBeatDuration = 500 } = context // Default: 120 BPM = 500ms per beat\n\n  // Common note durations in milliseconds (at 120 BPM)\n  const noteDurations = {\n    eighth: estimatedBeatDuration / 2,    // 250ms\n    quarter: estimatedBeatDuration,       // 500ms\n    half: estimatedBeatDuration * 2,      // 1000ms\n    whole: estimatedBeatDuration * 4      // 2000ms\n  }\n\n  // Musical patterns based on syllable count\n  if (syllableCount === 1) {\n    // Single syllable - usually gets a clean note value\n    if (availableTime > noteDurations.half) {\n      return [{\n        type: 'half', duration: noteDurations.half\n      }]\n    } else if (availableTime > noteDurations.quarter) {\n      return [{\n        type: 'quarter', duration: noteDurations.quarter\n      }]\n    } else {\n      return [{\n        type: 'eighth', duration: noteDurations.eighth\n      }]\n    }\n  }\n\n  if (syllableCount === 2) {\n    // Two syllables - common patterns: quarter+quarter, eighth+quarter, etc.\n    const halfTime = availableTime / 2\n    if (halfTime > noteDurations.quarter) {\n      return [\n        {\n          type: 'quarter', duration: noteDurations.quarter\n        },\n        {\n          type: 'quarter', duration: noteDurations.quarter\n        }\n      ]\n    } else {\n      return [\n        {\n          type: 'eighth', duration: noteDurations.eighth\n        },\n        {\n          type: 'quarter', duration: noteDurations.quarter\n        }\n      ]\n    }\n  }\n\n  if (syllableCount === 3) {\n    // Three syllables - triplet or eighth+quarter pattern\n    return [\n      {\n        type: 'eighth', duration: noteDurations.eighth\n      },\n      {\n        type: 'eighth', duration: noteDurations.eighth\n      },\n      {\n        type: 'quarter', duration: noteDurations.quarter\n      }\n    ]\n  }\n\n  // Fallback: distribute evenly but prefer musical note values\n  const avgDuration = availableTime / syllableCount\n  const closestNote = avgDuration > noteDurations.quarter ? 'quarter' : 'eighth'\n\n  return Array(syllableCount).fill(null).map(() => ({\n    type: closestNote,\n    duration: noteDurations[closestNote]\n  })) as MusicalNote[]\n}\n\n/**\n * MUSICAL SYLLABLE DISTRIBUTION - The core improvement\n * Instead of filling all available space, use musical intelligence\n */\nexport function distributeSyllablesMusically(\n  word: WordTiming,\n  wordStartTime: number,\n  timeToNextWord: number,\n  nextWordText?: string,\n  context: TimingContext = {},\n  silent = false,\n  preserveWordBoundaries = false\n): void {\n  if (word.syllables.length === 0) return\n\n  // Step 1: Detect if there should be a rest after this word\n  const restPattern = detectRestPattern(word.word, nextWordText, timeToNextWord)\n\n  // Step 2: Calculate available time for actual singing (minus rest)\n  let availableTime = timeToNextWord - restPattern.estimatedRestDuration\n\n  // If preserving word boundaries, constrain to existing word duration\n  if (preserveWordBoundaries && word.endTime !== undefined && word.startTime !== undefined) {\n    const existingWordDuration = word.endTime - word.startTime\n    availableTime = Math.min(availableTime, existingWordDuration)\n    console.log(`🎵 Constraining \"${word.word}\" to existing duration: ${existingWordDuration}ms`)\n  }\n\n  // Step 3: Use musical note patterns instead of filling all space\n  const notePattern = estimateNotePattern(word.syllables.length, availableTime, context)\n\n  // Step 4: Apply timing to syllables\n  let currentTime = wordStartTime\n  word.syllables.forEach((syllable, index) => {\n    const note = notePattern[index] || notePattern[notePattern.length - 1]\n\n    syllable.startTime = currentTime\n    syllable.endTime = currentTime + note.duration\n    syllable.duration = note.duration\n\n    currentTime = syllable.endTime\n  })\n\n  // Step 5: Set word boundaries (only if not preserving existing boundaries)\n  word.startTime = wordStartTime\n  if (!preserveWordBoundaries) {\n    word.endTime = currentTime\n    word.duration = currentTime - wordStartTime\n  } else {\n    // Keep existing word boundaries, just redistribute syllables within them\n    console.log(`🎵 Preserving word boundaries for \"${word.word}\": ${word.startTime}-${word.endTime}`)\n  }\n\n  if (!silent) {\n    console.log(`🎵 Musical timing: \"${word.word}\" uses ${word.duration}ms of ${timeToNextWord}ms available` +\n      (restPattern.hasRest ? ` (${restPattern.estimatedRestDuration}ms rest reserved)` : ''))\n  }\n}\n\n/**\n * BEAT LEARNING SYSTEM - Your idea about improving with more timing data\n */\nexport class BeatLearningSystem {\n  private timingHistory: Array<{\n    wordDuration: number\n    syllableCount: number\n    timestamp: number\n  }> = []\n\n  addTimingExample(wordDuration: number, syllableCount: number): void {\n    this.timingHistory.push({\n      wordDuration,\n      syllableCount,\n      timestamp: Date.now()\n    })\n\n    // Keep only recent examples (last 50)\n    if (this.timingHistory.length > 50) {\n      this.timingHistory.shift()\n    }\n  }\n\n  estimateBPM(): number {\n    if (this.timingHistory.length < 3) return 120 // Default BPM\n\n    // Analyze common word durations to infer beat patterns\n    const durations = this.timingHistory.map(h => h.wordDuration)\n    const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length\n\n    // Estimate BPM assuming average word is roughly one beat\n    const estimatedBPM = 60000 / avgDuration // 60000ms per minute\n\n    // Clamp to reasonable range\n    return Math.max(80, Math.min(200, estimatedBPM))\n  }\n\n  getTimingContext(): TimingContext {\n    const bpm = this.estimateBPM()\n    return {\n      bpm,\n      timeSignature: [4, 4],\n      estimatedBeatDuration: 60000 / bpm\n    }\n  }\n}\n\n// Global instance for the app to learn from user's timing patterns\nexport const beatLearner = new BeatLearningSystem()\n\n/**\n * BATCH MUSICAL TIMING PROCESSOR - Phase 2\n * Analyzes entire song at once for optimal musical timing\n */\nexport interface SongAnalysis {\n  totalWords: number\n  avgWordDuration: number\n  estimatedBPM: number\n  detectedRests: number\n  timingQuality: 'poor' | 'good' | 'excellent'\n}\n\nexport function analyzeSongTiming(lyrics: Array<{ words: WordTiming[] }>): SongAnalysis {\n  let totalWords = 0\n  let totalDuration = 0\n  let detectedRests = 0\n\n  for (const line of lyrics) {\n    for (let i = 0; i < line.words.length; i++) {\n      const word = line.words[i]\n      if (word.startTime !== undefined && word.endTime !== undefined) {\n        totalWords++\n        totalDuration += word.endTime - word.startTime\n\n        // Check for rests\n        const nextWord = line.words[i + 1]\n        if (nextWord?.startTime !== undefined) {\n          const gap = nextWord.startTime - word.endTime\n          const restPattern = detectRestPattern(word.word, nextWord.word, gap)\n          if (restPattern.hasRest) detectedRests++\n        }\n      }\n    }\n  }\n\n  const avgWordDuration = totalWords > 0 ? totalDuration / totalWords : 500\n  const estimatedBPM = totalWords > 0 ? 60000 / avgWordDuration : 120\n\n  // Clamp BPM to reasonable range\n  const clampedBPM = Math.max(80, Math.min(200, estimatedBPM))\n\n  // Determine timing quality based on word count and rest detection\n  let timingQuality: 'poor' | 'good' | 'excellent' = 'poor'\n  if (totalWords > 10 && detectedRests > 2) timingQuality = 'good'\n  if (totalWords > 20 && detectedRests > 5) timingQuality = 'excellent'\n\n  return {\n    totalWords,\n    avgWordDuration,\n    estimatedBPM: clampedBPM,\n    detectedRests,\n    timingQuality\n  }\n}\n\n/**\n * Apply musical timing to entire song (batch operation)\n */\nexport function applyMusicalTimingToSong(\n  lyrics: Array<{ words: WordTiming[] }>,\n  options: {\n    preserveWordTiming?: boolean // Keep word start/end times, only redistribute syllables\n    aggressiveness?: 'conservative' | 'moderate' | 'aggressive' // How much to change\n    onlyProcessUntimedSyllables?: boolean // Only fix syllables that have no timing yet\n  } = {}\n): SongAnalysis {\n  const {\n    preserveWordTiming = true,\n    onlyProcessUntimedSyllables = true\n  } = options\n\n  // First, analyze the song to understand its musical context\n  const analysis = analyzeSongTiming(lyrics)\n  console.log(`🎵 Song Analysis: ${analysis.totalWords} words, ${analysis.estimatedBPM.toFixed(0)} BPM, ${analysis.detectedRests} rests (${analysis.timingQuality} quality)`)\n\n  const context: TimingContext = {\n    bpm: analysis.estimatedBPM,\n    timeSignature: [4, 4],\n    estimatedBeatDuration: 60000 / analysis.estimatedBPM\n  }\n\n  // Apply musical timing to each word\n  for (const line of lyrics) {\n    for (let i = 0; i < line.words.length; i++) {\n      const word = line.words[i]\n      if (word.startTime !== undefined) {\n\n        // Skip words that already have good syllable timing (unless forced)\n        if (onlyProcessUntimedSyllables) {\n          const hasExistingSyllableTiming = word.syllables.some(s => s.startTime !== undefined)\n          if (hasExistingSyllableTiming) {\n            console.log(`🎵 Skipping \"${word.word}\" - already has syllable timing`)\n            continue\n          }\n        }\n        // Calculate time to next word\n        let timeToNextWord = 1000 // Default\n        const nextWord = line.words[i + 1]\n        if (nextWord?.startTime !== undefined) {\n          timeToNextWord = nextWord.startTime - word.startTime\n        }\n\n        // Get next word text for rest detection\n        const nextWordText = nextWord?.word\n\n        if (preserveWordTiming && word.endTime !== undefined) {\n          // Only redistribute syllables within existing word duration - DON'T change word boundaries\n          const wordDuration = word.endTime - word.startTime\n          distributeSyllablesMusically(word, word.startTime, wordDuration, nextWordText, context, false, true)\n        } else {\n          // Allow word timing to change based on musical analysis, using centralized conservative rules\n          const conservativeTime = Math.min(timeToNextWord * TIMING.musical.conservativeMultiplier, TIMING.autoTiming.maxPhraseBreakDuration)\n          distributeSyllablesMusically(word, word.startTime, conservativeTime, nextWordText, context, false, false)\n        }\n      }\n    }\n  }\n\n  return analysis\n}\n\n/**\n * Reset all syllable timing in the song\n */\nexport function resetSongSyllableTiming(lyrics: Array<{ words: WordTiming[] }>): void {\n  let resetCount = 0\n\n  for (const line of lyrics) {\n    for (const word of line.words) {\n      word.syllables.forEach(syllable => {\n        if (syllable.startTime !== undefined) resetCount++\n        syllable.startTime = undefined\n        syllable.endTime = undefined\n        syllable.duration = undefined\n      })\n    }\n  }\n\n  console.log(`🔄 Reset syllable timing for ${resetCount} syllables`)\n}\n","<template>\n  <div class=\"lyrics-editor\">\n    <div class=\"card\">\n      <div class=\"card-header d-flex justify-content-between align-items-center\">\n        <h5 class=\"mb-0\">📝 Lyrics Editor</h5>\n        <div class=\"editor-controls\">\n          <button class=\"btn btn-sm btn-outline-primary me-2\" @click=\"addLine\" title=\"Add new line\">\n            <i class=\"bi bi-plus\"></i>\n          </button>\n\n          <span class=\"badge\" :class=\"isTimingMode ? 'bg-success' : 'bg-secondary'\">\n            {{ isTimingMode ? 'Timing Mode' : 'Editing Ready' }}\n          </span>\n        </div>\n      </div>\n      <div class=\"card-body p-0\">\n        <div class=\"lyrics-container\" ref=\"lyricsContainer\">\n          <div v-for=\"(lyric, index) in lyrics\" :key=\"lyric.id\" class=\"lyric-line\" :class=\"{\n            active: index === currentLine,\n            'has-timing': lyric.startTime !== undefined,\n            'timing-mode': isTimingMode,\n            'metadata-line': isMetadataLyricLine(lyric),\n          }\" @click=\"selectLine(index)\">\n            <!-- Line Number -->\n            <div class=\"line-number\">\n              {{ lyric.lineNumber }}\n            </div>\n\n            <!-- Timing Display -->\n            <div class=\"timing-display\">\n              <small v-if=\"lyric.startTime !== undefined\" class=\"text-success\">\n                {{ formatTime(lyric.startTime) }}\n              </small>\n              <small v-else-if=\"isMetadataLyricLine(lyric)\" class=\"text-info\">\n                META\n              </small>\n              <small v-else class=\"text-muted\">--:--</small>\n            </div>\n\n            <!-- Lyrics Text -->\n            <div class=\"lyric-text-container\">\n              <input v-if=\"editingLine === index && !isMetadataLyricLine(lyric)\" type=\"text\"\n                class=\"form-control form-control-sm\" v-model=\"lyric.text\" @blur=\"finishEditing\"\n                @keyup.enter=\"finishEditing\" @keyup.esc=\"cancelEditing\" ref=\"editInput\"\n                placeholder=\"Use / to separate syllables: Hel/lo world a/maz/ing\" />\n              <input v-else-if=\"editingLine === index && isMetadataLyricLine(lyric)\" type=\"text\"\n                class=\"form-control form-control-sm\" v-model=\"lyric.text\" @blur=\"finishEditing\"\n                @keyup.enter=\"finishEditing\" @keyup.esc=\"cancelEditing\" ref=\"editInput\"\n                placeholder=\"[@TITLE:], [@AUTHOR:], or [@CAPTION:]\" />\n              <div v-else class=\"lyric-text\" @dblclick=\"startEditing(index)\"\n                :class=\"{ empty: !lyric.text.trim(), 'metadata-text': isMetadataLyricLine(lyric) }\">\n                <!-- Show metadata lines as-is -->\n                <div v-if=\"isMetadataLyricLine(lyric)\" class=\"metadata-display\">\n                  <i class=\"bi bi-tag me-1\"></i>{{ lyric.text }}\n                </div>\n                <!-- Show words with syllable breakdown for lyrics -->\n                <div v-else-if=\"lyric.words.length > 0\" class=\"words-display\">\n                  <span v-for=\"(word, wordIndex) in lyric.words\" :key=\"wordIndex\" class=\"word-item\" :class=\"{\n                    'current-word': index === currentLine && wordIndex === currentWord,\n                    'timed-word': word.startTime !== undefined,\n                  }\">\n                    <span v-for=\"(syllable, sylIndex) in word.syllables\" :key=\"sylIndex\" class=\"syllable-item\"\n                      :class=\"{ 'timed-syllable': syllable.startTime !== undefined }\">\n                      {{ syllable.syllable }}\n                    </span>\n                  </span>\n                </div>\n                <div v-else class=\"empty-text\">Empty line - double click to edit</div>\n              </div>\n            </div>\n\n            <!-- Line Actions -->\n            <div class=\"line-actions\">\n              <button v-if=\"!isTimingMode\" class=\"btn btn-sm btn-outline-danger\" @click=\"deleteLine(index)\"\n                title=\"Delete line\">\n                <i class=\"bi bi-trash3\"></i>\n              </button>\n              <button v-if=\"isTimingMode && lyric.startTime !== undefined && !isMetadataLyricLine(lyric)\"\n                class=\"btn btn-sm btn-outline-warning\" @click=\"clearTiming(index)\" title=\"Clear timing\">\n                <i class=\"bi bi-clock-history\"></i>\n              </button>\n            </div>\n          </div>\n\n          <!-- Add line placeholder -->\n          <div v-if=\"lyrics.length === 0\" class=\"empty-state text-center py-4\">\n            <p class=\"text-muted\">No lyrics yet. Click \"+\" to add your first line.</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"row align-items-center\">\n          <div class=\"col-sm-6\">\n            <small class=\"text-muted\"> {{ lyrics.length }} lines • {{ completedTimings }}/{{ lyrics.length }} timed\n            </small>\n          </div>\n          <div class=\"col-sm-6 text-end\">\n            <small class=\"text-muted\" v-if=\"isTimingMode\"> Press <kbd>Space</kbd> to assign timing to current line\n            </small>\n            <small class=\"text-muted\" v-else> Double-click to edit lyrics </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, nextTick } from 'vue'\nimport type { LyricLine } from '@/types/karaoke'\nimport { parseLyricsLine, clearTimingFromLine } from '@/utils/lyricsParser'\n\n// Props\ninterface Props {\n  lyrics: LyricLine[]\n  currentLine: number\n  currentWord: number\n  isTimingMode: boolean\n}\n\nconst props = defineProps<Props>()\n\n// Emits\nconst emit = defineEmits<{\n  'line-select': [lineIndex: number]\n  'lyrics-update': [lyrics: LyricLine[]]\n}>()\n\n// Reactive state\nconst editingLine = ref(-1)\nconst lyricsContainer = ref<HTMLElement>()\nconst editInput = ref<HTMLInputElement[]>()\n\n// Computed properties\nconst completedTimings = computed(() => {\n  return props.lyrics.filter(lyric => lyric.startTime !== undefined).length\n})\n\n// Helper function to check if a lyric line is metadata\nconst isMetadataLyricLine = (lyric: LyricLine): boolean => {\n  return lyric.type !== undefined && lyric.type !== 'lyrics'\n}\n\n// Methods\nconst selectLine = (index: number) => {\n  emit('line-select', index)\n}\n\nconst addLine = () => {\n  const newLine = parseLyricsLine('', props.lyrics.length + 1, `line-${Date.now()}`)\n\n  const updatedLyrics = [...props.lyrics, newLine]\n  updateLineNumbers(updatedLyrics)\n  emit('lyrics-update', updatedLyrics)\n\n  // Start editing the new line\n  nextTick(() => {\n    startEditing(updatedLyrics.length - 1)\n  })\n}\n\nconst deleteLine = (index: number) => {\n  if (confirm('Are you sure you want to delete this line?')) {\n    const updatedLyrics = props.lyrics.filter((_, i) => i !== index)\n    updateLineNumbers(updatedLyrics)\n    emit('lyrics-update', updatedLyrics)\n  }\n}\n\nconst startEditing = (index: number) => {\n  if (props.isTimingMode) return\n\n  editingLine.value = index\n  nextTick(() => {\n    const input = editInput.value?.[0]\n    if (input) {\n      input.focus()\n      input.select()\n    }\n  })\n}\n\nconst finishEditing = () => {\n  // Re-parse the edited line to update word/syllable structure\n  if (editingLine.value >= 0) {\n    const updatedLyrics = [...props.lyrics]\n    const line = updatedLyrics[editingLine.value]\n    if (line) {\n      const parsedLine = parseLyricsLine(line.text, line.lineNumber, line.id)\n      // Preserve any existing timing data\n      parsedLine.startTime = line.startTime\n      parsedLine.endTime = line.endTime\n      parsedLine.duration = line.duration\n      updatedLyrics[editingLine.value] = parsedLine\n      emit('lyrics-update', updatedLyrics)\n    }\n  }\n  editingLine.value = -1\n}\n\nconst cancelEditing = () => {\n  editingLine.value = -1\n  // Reset the text value if needed\n}\n\nconst clearTiming = (index: number) => {\n  // Confirm the action since it clears timing from this line and all subsequent lines\n  const lineCount = props.lyrics.length - index\n  const message = lineCount === 1\n    ? 'Clear timing for this line?'\n    : `Clear timing for this line and ${lineCount - 1} lines after it?\\n\\nThis prevents timing inconsistencies by clearing all subsequent timing.`\n\n  if (confirm(message)) {\n    const updatedLyrics = clearTimingFromLine(props.lyrics, index)\n    emit('lyrics-update', updatedLyrics)\n  }\n}\n\n// Edit mode removed - double-click now works directly\n\nconst updateLineNumbers = (lyrics: LyricLine[]) => {\n  lyrics.forEach((lyric, index) => {\n    lyric.lineNumber = index + 1\n  })\n}\n\nconst formatTime = (timeMs: number): string => {\n  const seconds = Math.floor(timeMs / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const remainingSeconds = seconds % 60\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n}\n\n// Watch for current line changes to scroll into view\n// watch(\n//   () => props.currentLine,\n//   newLine => {\n//     nextTick(() => {\n//       const container = lyricsContainer.value\n//       if (container) {\n//         const activeElement = container.querySelector('.lyric-line.active')\n//         if (activeElement) {\n//           activeElement.scrollIntoView({\n//             behavior: 'smooth',\n//             block: 'center',\n//           })\n//         }\n//       }\n//     })\n//   }\n// )\n\n// Keyboard shortcuts\nconst handleKeydown = (event: KeyboardEvent) => {\n  if (props.isTimingMode) {\n    if (event.code === 'Space') {\n      event.preventDefault()\n      // This will be handled by the parent component\n    } else if (event.code === 'ArrowUp') {\n      event.preventDefault()\n      if (props.currentLine > 0) {\n        emit('line-select', props.currentLine - 1)\n      }\n    } else if (event.code === 'ArrowDown') {\n      event.preventDefault()\n      if (props.currentLine < props.lyrics.length - 1) {\n        emit('line-select', props.currentLine + 1)\n      }\n    }\n  }\n}\n\n// Add keyboard listener\nif (typeof window !== 'undefined') {\n  window.addEventListener('keydown', handleKeydown)\n}\n</script>\n\n<style scoped>\n.lyrics-container {\n  height: 400px;\n  overflow-y: auto;\n}\n\n.lyric-line {\n  display: flex;\n  align-items: center;\n  padding: 0.15rem;\n  border-bottom: 1px solid #f0f0f0;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.lyric-line:hover {\n  background-color: #f8f9fa;\n}\n\n.lyric-line.active {\n  background-color: #e3f2fd;\n  border-left: 4px solid #2196f3;\n}\n\n.lyric-line.has-timing {\n  border-left: 4px solid #4caf50;\n}\n\n.lyric-line.timing-mode.active {\n  background-color: #fff3e0;\n  border-left: 4px solid #ff9800;\n}\n\n.line-number {\n  min-width: 40px;\n  text-align: center;\n  font-weight: bold;\n  color: #666;\n  font-size: 0.875rem;\n}\n\n.timing-display {\n  min-width: 60px;\n  text-align: center;\n  font-family: 'Courier New', monospace;\n}\n\n.lyric-text-container {\n  flex: 1;\n  padding: 0 1rem;\n}\n\n.lyric-text {\n  min-height: 1.5rem;\n  padding: 0.25rem 0;\n}\n\n.empty-text {\n  color: #999;\n  font-style: italic;\n}\n\n.words-display {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.word-item {\n  display: inline-flex;\n  padding: 0.125rem 0.25rem;\n  border-radius: 0.25rem;\n  transition: all 0.2s;\n}\n\n.word-item.current-word {\n  background-color: #fff3cd;\n  border: 1px solid #ffc107;\n}\n\n.word-item.timed-word {\n  background-color: #d1edff;\n  border: 1px solid #0d6efd;\n}\n\n.syllable-item {\n  position: relative;\n}\n\n.syllable-item:not(:last-child)::after {\n  content: '·';\n  color: #ccc;\n  margin: 0 1px;\n}\n\n.syllable-item.timed-syllable {\n  color: #0d6efd;\n  font-weight: 500;\n}\n\n.line-actions {\n  min-width: 50px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.empty-state {\n  min-height: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.editor-controls .btn.active {\n  background-color: #0d6efd;\n  color: white;\n}\n\nkbd {\n  background-color: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 0.25rem;\n  padding: 0.125rem 0.25rem;\n  font-size: 0.75rem;\n}\n\n/* Scrollbar styling */\n.lyrics-container::-webkit-scrollbar {\n  width: 8px;\n}\n\n.lyrics-container::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.lyrics-container::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.lyrics-container::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n/* Metadata line styling */\n.lyric-line.metadata-line {\n  background-color: #f8f9fa;\n  border-left: 3px solid #6c757d;\n  opacity: 0.8;\n}\n\n.lyric-line.metadata-line:hover {\n  opacity: 1;\n}\n\n.metadata-display {\n  color: #6c757d;\n  font-style: italic;\n  font-size: 0.9em;\n}\n\n.metadata-text {\n  color: #6c757d !important;\n}\n</style>\n","<template>\n  <div class=\"lyrics-preview\">\n    <div class=\"card\">\n      <div class=\"card-header d-flex justify-content-between align-items-center\">\n        <h5 class=\"mb-0\">👁️ Lyrics Preview</h5>\n        <div class=\"preview-controls\">\n          <button class=\"btn btn-sm btn-outline-secondary me-2\" @click=\"toggleKaraokeMode\"\n            :class=\"{ active: isKaraokeMode }\" title=\"Toggle karaoke mode\">\n            <i class=\"bi bi-display\"></i>\n          </button>\n          <div class=\"btn-group\" role=\"group\">\n            <button class=\"btn btn-sm btn-outline-primary\" :class=\"{ active: fontSize === 'small' }\"\n              @click=\"setFontSize('small')\">\n              A\n            </button>\n            <button class=\"btn btn-sm btn-outline-primary\" :class=\"{ active: fontSize === 'medium' }\"\n              @click=\"setFontSize('medium')\">\n              A\n            </button>\n            <button class=\"btn btn-sm btn-outline-primary\" :class=\"{ active: fontSize === 'large' }\"\n              @click=\"setFontSize('large')\">\n              A\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- Lyrics Display Area -->\n      <div class=\"card-body preview-container\" :class=\"[`font-${fontSize}`, { 'karaoke-mode': isKaraokeMode }]\">\n        <div v-if=\"lyrics.length === 0\" class=\"empty-state text-center py-4\">\n          <p class=\"text-muted\">No lyrics to preview</p>\n        </div>\n        <div v-else class=\"lyrics-display\" ref=\"lyricsDisplay\">\n          <!-- Karaoke Mode - Professional karaoke format display -->\n          <div v-if=\"isKaraokeMode\" class=\"karaoke-display\">\n            <!-- Clean 3-slot display: Title → Artist → Caption (smart slot assignment) -->\n            <div class=\"karaoke-position position-1\">\n              <div v-if=\"slot1Content.type === 'title'\" class=\"display-title\">{{ slot1Content.text }}</div>\n              <div v-else-if=\"slot1Content.type === 'caption'\" class=\"display-caption\">{{ slot1Content.text }}</div>\n            </div>\n\n            <div class=\"karaoke-position position-2\">\n              <div v-if=\"slot2Content.type === 'author'\" class=\"display-author\">{{ slot2Content.text }}</div>\n              <div v-else-if=\"slot2Content.type === 'caption'\" class=\"display-caption\">{{ slot2Content.text }}</div>\n            </div>\n\n            <div class=\"karaoke-position position-3\">\n              <div v-if=\"slot3Content.type === 'caption'\" class=\"display-caption\">{{ slot3Content.text }}</div>\n            </div>\n\n            <!-- Current Line - What we're singing now -->\n            <div v-if=\"currentLyric && (!currentLyric.type || currentLyric.type === 'lyrics')\"\n              class=\"current-line-display\" :class=\"{ highlighted: isCurrentLinePlaying }\">\n              <div class=\"line-text\">\n                <!-- Show word/syllable highlighting -->\n                <span v-for=\"(word, wordIndex) in currentLyric.words\" :key=\"wordIndex\" class=\"karaoke-word\" :class=\"{\n                  'current-word': wordIndex === currentWord,\n                  'past-word': isWordPast(currentLyric, wordIndex),\n                  'future-word': isWordFuture(currentLyric, wordIndex),\n                }\">\n                  <span v-for=\"(syllable, sylIndex) in word.syllables\" :key=\"sylIndex\" class=\"karaoke-syllable\" :class=\"{\n                    'current-syllable': wordIndex === currentWord && sylIndex === currentSyllable,\n                    'past-syllable': isSyllablePast(syllable),\n                    'future-syllable': isSyllableFuture(syllable),\n                  }\">\n                    {{ syllable.syllable }}\n                  </span>\n                  {{ ' ' }}\n                </span>\n              </div>\n            </div>\n\n            <!-- Future Lines - What's coming up (small and diminished) -->\n            <div class=\"future-lines\">\n              <div v-for=\"lyric in futureLyricLines\" :key=\"`future-${lyric.id}`\" class=\"future-line\">\n                {{ getCleanText(lyric) }}\n              </div>\n            </div>\n          </div>\n\n          <!-- Normal Mode - All lyrics visible -->\n          <div v-else class=\"normal-display\">\n            <div v-for=\"(lyric, index) in lyrics\" :key=\"lyric.id\" class=\"preview-line\" :class=\"{\n              current: index === currentLine,\n              'has-timing': lyric.startTime !== undefined,\n              past: lyric.startTime !== undefined && lyric.startTime < currentTime,\n              future: lyric.startTime !== undefined && lyric.startTime > currentTime,\n              playing: isLinePlaying(lyric),\n            }\">\n              <div class=\"line-content\">\n                <span class=\"line-number\">{{ lyric.lineNumber }}</span>\n                <span class=\"line-text\">{{ getCleanText(lyric) }}</span>\n                <span v-if=\"lyric.startTime !== undefined\" class=\"line-timing\">\n                  {{ formatTime(lyric.startTime) }}\n                </span>\n              </div>\n\n              <!-- Progress bar for current playing line -->\n              <div v-if=\"isLinePlaying(lyric) && lyric.duration\" class=\"line-progress\">\n                <div class=\"progress-bar\" :style=\"{ width: getLineProgress(lyric) + '%' }\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"row align-items-center\">\n          <div class=\"col-sm-6\">\n            <small class=\"text-muted\">\n              Line {{ currentLine + 1 }} of {{ lyrics.length }}\n              <span v-if=\"currentTime > 0\"> • {{ formatTime(currentTime) }}</span>\n            </small>\n          </div>\n          <div class=\"col-sm-6 text-end\">\n            <small class=\"text-muted\">\n              {{ timedLines }}/{{ lyrics.length }} lines timed\n              <span v-if=\"completionPercentage > 0\">({{ completionPercentage }}%)</span>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick } from 'vue'\nimport type { LyricLine } from '@/types/karaoke'\nimport { parseLyricsWithMetadata } from '@/utils/lyricsParser'\n\n// Props\ninterface Props {\n  lyrics: LyricLine[]\n  currentTime: number\n  currentLine: number\n  currentWord?: number\n  currentSyllable?: number\n}\n\nconst props = defineProps<Props>()\n\n// Reactive state\nconst isKaraokeMode = ref(true)\nconst fontSize = ref<'small' | 'medium' | 'large'>('medium')\nconst lyricsDisplay = ref<HTMLElement>()\n\n// Computed properties\nconst currentLyric = computed(() => {\n  return props.lyrics[props.currentLine] || null\n})\n\n// Removed previousLines and nextLines - replaced with futureLyricLines for karaoke mode\n\nconst isCurrentLinePlaying = computed(() => {\n  if (!currentLyric.value || currentLyric.value.startTime === undefined) {\n    return false\n  }\n\n  const startTime = currentLyric.value.startTime\n  const endTime = currentLyric.value.endTime || startTime + (currentLyric.value.duration || 3000)\n\n  return props.currentTime >= startTime && props.currentTime <= endTime\n})\n\nconst timedLines = computed(() => {\n  return props.lyrics.filter(lyric => lyric.startTime !== undefined).length\n})\n\nconst completionPercentage = computed(() => {\n  if (props.lyrics.length === 0) return 0\n  return Math.round((timedLines.value / props.lyrics.length) * 100)\n})\n\n// Extract metadata from lyrics for karaoke display\nconst extractedMetadata = computed(() => {\n  // Create a simple text representation to parse metadata\n  const lyricsText = props.lyrics.map(line => line.text).join('\\n')\n  const { metadata } = parseLyricsWithMetadata(lyricsText)\n  return metadata\n})\n\nconst songTitle = computed(() => {\n  return extractedMetadata.value.title || null\n})\n\nconst songAuthor = computed(() => {\n  return extractedMetadata.value.author || null\n})\n\n// Find the currently active caption based on timing and position in lyrics\nconst currentCaption = computed(() => {\n  // Find caption lines in the lyrics array\n  const captionLines = props.lyrics.filter(line => line.type === 'caption')\n\n  if (captionLines.length === 0) return null\n\n  // Find the most recent caption that should be displayed based on current position\n  let activeCaption = null\n  for (let i = 0; i < captionLines.length; i++) {\n    const captionLine = captionLines[i]\n    const captionLineIndex = props.lyrics.findIndex(line => line.id === captionLine.id)\n\n    // Show caption if we're at or past its position in the lyrics\n    if (captionLineIndex <= props.currentLine) {\n      activeCaption = captionLine.metadata?.caption || captionLine.text.replace(/^\\[@CAPTION:\\s*/, '').replace(/\\]$/, '')\n    } else {\n      break // We've reached future captions\n    }\n  }\n\n  return activeCaption\n})\n\n// Simple three-slot system: Title always there OR not, Author always there OR not, Caption comes and goes\nconst slot1Content = computed(() => {\n  // Slot 1 priority: Title first, then caption if no title\n  if (songTitle.value) {\n    return {\n      type: 'title',\n      text: songTitle.value\n    }\n  }\n  if (currentCaption.value) {\n    return {\n      type: 'caption',\n      text: currentCaption.value\n    }\n  }\n  return {\n    type: 'empty',\n    text: ''\n  }\n})\n\nconst slot2Content = computed(() => {\n  // Slot 2 priority: Author first, then caption if no author AND slot 1 is occupied by title\n  if (songAuthor.value) {\n    return {\n      type: 'author',\n      text: songAuthor.value\n    }\n  }\n  if (currentCaption.value && slot1Content.value.type === 'title') {\n    return {\n      type: 'caption',\n      text: currentCaption.value\n    }\n  }\n  return {\n    type: 'empty',\n    text: ''\n  }\n})\n\nconst slot3Content = computed(() => {\n  // Slot 3 only used for caption if both slot 1 and 2 are occupied by title and author\n  if (currentCaption.value && slot1Content.value.type === 'title' && slot2Content.value.type === 'author') {\n    return {\n      type: 'caption',\n      text: currentCaption.value\n    }\n  }\n  return {\n    type: 'empty',\n    text: ''\n  }\n})\n\n// Compute display lines for karaoke mode - only future lyrics\nconst futureLyricLines = computed(() => {\n  const futureLines = props.lyrics.slice(props.currentLine + 1)\n  // Filter to only lyric lines (not metadata)\n  const lyricsOnly = futureLines.filter(line => !line.type || line.type === 'lyrics')\n  return lyricsOnly.slice(0, 1) // Show next 1 lyric lines only\n})\n\n// Methods\nconst toggleKaraokeMode = () => {\n  isKaraokeMode.value = !isKaraokeMode.value\n}\n\nconst setFontSize = (size: 'small' | 'medium' | 'large') => {\n  fontSize.value = size\n}\n\nconst isLinePlaying = (lyric: LyricLine): boolean => {\n  if (lyric.startTime === undefined) return false\n\n  const startTime = lyric.startTime\n  const endTime = lyric.endTime || startTime + (lyric.duration || 3000)\n\n  return props.currentTime >= startTime && props.currentTime <= endTime\n}\n\nconst getLineProgress = (lyric: LyricLine): number => {\n  if (!lyric.startTime || !lyric.duration) return 0\n\n  const elapsed = props.currentTime - lyric.startTime\n  const progress = (elapsed / lyric.duration) * 100\n\n  return Math.max(0, Math.min(100, progress))\n}\n\nconst formatTime = (timeMs: number): string => {\n  const seconds = Math.floor(timeMs / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const remainingSeconds = seconds % 60\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n}\n\nconst getCleanText = (lyric: LyricLine): string => {\n  // For metadata lines, show the original text\n  if (lyric.type && lyric.type !== 'lyrics') {\n    return lyric.text\n  }\n\n  // For lyrics lines, return clean text without syllable markers\n  if (lyric.words && lyric.words.length > 0) {\n    return lyric.words.map(word => word.word).join(' ')\n  }\n\n  // Fallback to original text if no words\n  return lyric.text || ''\n}\n\nconst isWordPast = (line: LyricLine, wordIndex: number): boolean => {\n  const word = line.words[wordIndex]\n  if (!word?.endTime) return false\n  return props.currentTime > word.endTime\n}\n\nconst isWordFuture = (line: LyricLine, wordIndex: number): boolean => {\n  const word = line.words[wordIndex]\n  if (!word?.startTime) return false\n  return props.currentTime < word.startTime\n}\n\nconst isSyllablePast = (syllable: any): boolean => {\n  if (!syllable?.endTime) return false\n  return props.currentTime > syllable.endTime\n}\n\nconst isSyllableFuture = (syllable: any): boolean => {\n  if (!syllable?.startTime) return false\n  return props.currentTime < syllable.startTime\n}\n\n// Auto-scroll to current line in normal mode\nwatch(\n  () => props.currentLine,\n  () => {\n    if (!isKaraokeMode.value) {\n      nextTick(() => {\n        const display = lyricsDisplay.value\n        if (display) {\n          const currentElement = display.querySelector('.preview-line.current')\n          if (currentElement) {\n            currentElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'center',\n            })\n          }\n        }\n      })\n    }\n  }\n)\n</script>\n\n<style scoped>\n.preview-container {\n  height: 400px;\n  overflow-y: auto;\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n}\n\n.preview-container.karaoke-mode {\n  background: #1a1a1a;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n}\n\n/* Font sizes */\n.font-small {\n  font-size: 0.875rem;\n}\n\n.font-medium {\n  font-size: 1rem;\n}\n\n.font-large {\n  font-size: 1.25rem;\n}\n\n/* Karaoke Mode Styles */\n.karaoke-display {\n  width: 100%;\n  max-width: 600px;\n}\n\n.context-lines {\n  margin: 0.5rem 0;\n}\n\n.context-line {\n  padding: 0.25rem 0;\n  opacity: 0.6;\n  font-size: 0.9em;\n}\n\n.context-line.previous {\n  color: #999;\n}\n\n.context-line.next {\n  color: #ccc;\n}\n\n.current-line-display {\n  padding: 0.7rem 0.7rem;\n  border: 1px solid #444;\n  border-radius: 1rem;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  margin: 1rem 0;\n  transition: all 0.3s ease;\n}\n\n.current-line-display.highlighted {\n  border-color: #ffd700;\n  background: rgba(255, 215, 0, 0.2);\n  transform: scale(1.05);\n}\n\n.current-line-display .line-text {\n  font-size: 1.3em;\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.current-line-display .line-timing {\n  font-size: 0.9em;\n  color: #ffd700;\n}\n\n/* Word and syllable highlighting */\n.karaoke-word {\n  display: inline-block;\n  margin: 0 0.25rem;\n  transition: all 0.3s ease;\n}\n\n.karaoke-word.current-word {\n  color: #ffd700;\n  font-weight: bold;\n  text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);\n  transform: scale(1.1);\n}\n\n.karaoke-word.past-word {\n  color: #90ee90;\n  opacity: 0.8;\n}\n\n.karaoke-word.future-word {\n  color: #ddd;\n  opacity: 0.6;\n}\n\n.karaoke-syllable {\n  transition: all 0.2s ease;\n}\n\n.karaoke-syllable.current-syllable {\n  background: linear-gradient(135deg, #ffd700, #ffed4e);\n  color: #000;\n  padding: 0.1rem 0.2rem;\n  border-radius: 0.25rem;\n  animation: syllable-highlight 0.5s ease-in-out;\n}\n\n.karaoke-syllable.past-syllable {\n  color: #90ee90;\n}\n\n.karaoke-syllable.future-syllable {\n  color: #ccc;\n}\n\n@keyframes syllable-highlight {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.2);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Normal Mode Styles */\n.normal-display {\n  padding: 0.5rem;\n  height: 100%;\n}\n\n.preview-line {\n  padding: 0.5rem;\n  margin: 0.125rem 0;\n  border-radius: 0.375rem;\n  transition: all 0.3s ease;\n  border-left: 4px solid transparent;\n}\n\n.preview-line.current {\n  background-color: rgba(33, 150, 243, 0.1);\n  border-left-color: #2196f3;\n}\n\n.preview-line.has-timing {\n  border-left-color: #4caf50;\n}\n\n.preview-line.playing {\n  background-color: rgba(255, 193, 7, 0.2);\n  border-left-color: #ffc107;\n  animation: pulse 1.5s ease-in-out infinite alternate;\n}\n\n.preview-line.past {\n  opacity: 0.7;\n  color: #666;\n}\n\n.preview-line.future {\n  opacity: 0.8;\n}\n\n.line-content {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.line-number {\n  min-width: 30px;\n  font-weight: bold;\n  color: #666;\n  font-size: 0.875rem;\n}\n\n.line-text {\n  flex: 1;\n}\n\n.line-timing {\n  font-family: 'Courier New', monospace;\n  font-size: 0.875rem;\n  color: #28a745;\n  font-weight: bold;\n}\n\n.line-progress {\n  height: 3px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 2px;\n  margin-top: 0.5rem;\n  overflow: hidden;\n}\n\n.progress-bar {\n  height: 100%;\n  background: linear-gradient(90deg, #ffc107, #ff9800);\n  border-radius: 2px;\n  transition: width 0.1s linear;\n}\n\n.empty-state {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.preview-controls .btn.active {\n  background-color: #0d6efd;\n  color: white;\n}\n\n/* Button sizing for font controls */\n.btn-group .btn {\n  min-width: 32px;\n}\n\n.btn-group .btn:nth-child(1) {\n  font-size: 0.75rem;\n}\n\n.btn-group .btn:nth-child(2) {\n  font-size: 0.875rem;\n}\n\n.btn-group .btn:nth-child(3) {\n  font-size: 1rem;\n}\n\n/* Animation */\n@keyframes pulse {\n  from {\n    transform: scale(1);\n  }\n\n  to {\n    transform: scale(1.02);\n  }\n}\n\n/* Scrollbar styling */\n.preview-container::-webkit-scrollbar {\n  width: 8px;\n}\n\n.preview-container::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n}\n\n.preview-container::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n}\n\n.preview-container::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.5);\n}\n\n/* Metadata line styling in preview */\n.context-line,\n.current-line-display,\n.normal-line {\n  position: relative;\n}\n\n/* Add visual indicator for metadata lines */\n.context-line:has(.line-text:contains(\"[@\")),\n.current-line-display:has(.line-text:contains(\"[@\")),\n.normal-line:has(.line-text:contains(\"[@\")) {\n  opacity: 0.7;\n  font-style: italic;\n  color: #6c757d;\n}\n\n/* Alternative approach using data attributes or classes if the above doesn't work */\n.metadata-preview-line {\n  opacity: 0.7;\n  font-style: italic;\n  color: #6c757d;\n  border-left: 3px solid #6c757d;\n  padding-left: 8px;\n  margin-left: -8px;\n}\n\n/* Professional Karaoke Display - Fixed Positions */\n.karaoke-display {\n  display: flex;\n  flex-direction: column;\n  min-height: 400px;\n  padding: 1.8rem 1rem 1rem 1rem;\n  text-align: center;\n}\n\n/* Fixed positions for title/author/captions */\n.karaoke-position {\n  x-vicb-border: 1px solid #2196f3;\n  min-height: 1.2rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0rem;\n  padding: 0px;\n}\n\n.position-1 {\n  /* Reserved for title or caption */\n  order: 1;\n}\n\n.position-2 {\n  /* Reserved for author or caption */\n  order: 2;\n}\n\n.position-3 {\n  /* Reserved for caption only */\n  order: 3;\n}\n\n/* Title styling - always position 1 */\n.display-title {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: #fff;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n/* Author styling - always position 2 */\n.display-author {\n  font-size: 1.1em;\n  color: #e0e0e0;\n  font-style: italic;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n/* Caption styling - position 1, 2, or 3 based on availability */\n.display-caption {\n  font-size: 0.9em;\n  color: #b0b0b0;\n  font-style: italic;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);\n  background: rgba(0, 0, 0, 0.2);\n}\n\n/* Current line - prominent display */\n.current-line-display {\n  order: 4;\n  margin: 1rem 0;\n  font-size: 1.6em;\n  font-weight: 500;\n  color: #fff;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);\n  min-height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Future lines - small and diminished */\n.future-lines {\n  order: 5;\n  margin-top: 1rem;\n}\n\n.future-line {\n  font-size: 0.9em;\n  color: #999;\n  opacity: 0.6;\n  margin-bottom: 0.5rem;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n/* Responsive sizing for different font sizes */\n.font-small .display-title {\n  font-size: 1.27em;\n}\n\n.font-small .display-author {\n  font-size: 1.04em;\n}\n\n.font-small .display-caption {\n  font-size: 0.81em;\n}\n\n.font-small .current-line-display {\n  font-size: 1.38em;\n}\n\n.font-small .future-line {\n  font-size: 0.81em;\n}\n\n.font-large .display-title {\n  font-size: 2.13em;\n}\n\n.font-large .display-author {\n  font-size: 1.53em;\n}\n\n.font-large .display-caption {\n  font-size: 1.19em;\n}\n\n.font-large .current-line-display {\n  font-size: 1.7em;\n}\n\n.font-large .future-line {\n  font-size: 0.94em;\n}\n</style>\n","<template>\n  <div class=\"waveform-viewer\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <!-- Top row: Title and mode indicator -->\n        <div class=\"d-flex justify-content-between align-items-center mb-2\">\n          <h5 class=\"mb-0\">🌊 Audio Waveform & Controls</h5>\n          <div class=\"d-flex align-items-center\">\n            <div class=\"mode-indicator me-3\" v-if=\"isTimingMode !== undefined\">\n              <span class=\"badge\" :class=\"isTimingMode ? 'bg-warning' : 'bg-secondary'\">\n                {{ isTimingMode ? 'Timing Mode' : 'Playback Mode' }}\n              </span>\n            </div>\n            <div class=\"loading-spinner me-2\" v-if=\"isLoading\">\n              <div class=\"spinner-border spinner-border-sm\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Controls row -->\n        <div class=\"controls-row d-flex justify-content-between align-items-center flex-wrap gap-2\">\n          <!-- Audio Player Controls -->\n          <div class=\"player-controls d-flex align-items-center gap-2\">\n            <button class=\"btn btn-outline-secondary btn-sm\" @click=\"emit('skip-backward')\" title=\"Skip backward 10s\">\n              <i class=\"bi bi-skip-backward\"></i>\n            </button>\n            <button class=\"btn btn-primary btn-sm\" @click=\"emit('play-pause')\" :disabled=\"!audioFile?.file\">\n              <i :class=\"playbackState.isPlaying ? 'bi bi-pause-fill' : 'bi bi-play-fill'\"></i>\n            </button>\n            <button class=\"btn btn-outline-secondary btn-sm\" @click=\"emit('skip-forward')\" title=\"Skip forward 10s\">\n              <i class=\"bi bi-skip-forward\"></i>\n            </button>\n          </div>\n\n          <!-- View Mode Controls -->\n          <div class=\"view-controls d-flex align-items-center gap-2\">\n            <!-- View Mode Toggle -->\n            <div class=\"btn-group\" role=\"group\">\n              <button class=\"btn btn-sm\" :class=\"viewMode === 'window' ? 'btn-primary' : 'btn-outline-primary'\"\n                @click=\"setViewMode('window')\" title=\"Sliding window view\">\n                <i class=\"bi bi-window\"></i> Window\n              </button>\n              <button class=\"btn btn-sm\" :class=\"viewMode === 'full' ? 'btn-primary' : 'btn-outline-primary'\"\n                @click=\"setViewMode('full')\" title=\"Full song view\">\n                <i class=\"bi bi-arrows-fullscreen\"></i> Full\n              </button>\n            </div>\n\n            <!-- Zoom Controls (only for full view) -->\n            <div v-if=\"viewMode === 'full'\" class=\"zoom-controls d-flex align-items-center\">\n              <button class=\"btn btn-sm btn-outline-secondary\" @click=\"zoomOut\" :disabled=\"zoomLevel <= 1\"\n                title=\"Zoom out\">\n                <i class=\"bi bi-zoom-out\"></i>\n              </button>\n              <span class=\"zoom-level mx-2\">{{ Math.round(zoomLevel * 100) }}%</span>\n              <button class=\"btn btn-sm btn-outline-secondary\" @click=\"zoomIn\" :disabled=\"zoomLevel >= 5\"\n                title=\"Zoom in\">\n                <i class=\"bi bi-zoom-in\"></i>\n              </button>\n            </div>\n\n            <!-- Window Controls (only for window view) -->\n            <div v-if=\"viewMode === 'window'\" class=\"window-controls d-flex align-items-center gap-2\">\n              <select class=\"form-select form-select-sm\" v-model=\"windowDuration\" @change=\"onWindowDurationChange\">\n                <option :value=\"5000\">5s</option>\n                <option :value=\"10000\">10s</option>\n                <option :value=\"15000\">15s</option>\n                <option :value=\"25000\">25s</option>\n              </select>\n              <button class=\"btn btn-sm\" :class=\"autoScroll ? 'btn-success' : 'btn-outline-success'\"\n                @click=\"toggleAutoScroll\" title=\"Auto-scroll with playback\">\n                <i class=\"bi bi-skip-end\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Progress Bar -->\n        <div class=\"progress-container mt-2\" v-if=\"playbackState\">\n          <div class=\"progress\" style=\"height: 6px; cursor: pointer\" @click=\"seekToClick\">\n            <div class=\"progress-bar\" :style=\"{ width: progressPercent + '%' }\" role=\"progressbar\"></div>\n          </div>\n          <div class=\"time-display d-flex justify-content-between mt-1\">\n            <small class=\"text-muted\">{{ formatTime(currentTime) }}</small>\n            <small class=\"text-muted\">{{ formatTime(audioFile?.duration || 0) }}</small>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"card-body p-0\">\n        <div class=\"waveform-container\" ref=\"waveformContainer\">\n          <!-- Loading State -->\n          <div v-if=\"isLoading\" class=\"loading-state d-flex align-items-center justify-content-center\">\n            <div class=\"spinner-border text-primary me-2\" role=\"status\"></div>\n            <span>Analyzing audio...</span>\n          </div>\n\n          <!-- No Audio State -->\n          <div v-else-if=\"!audioFile?.file\" class=\"no-audio-state d-flex align-items-center justify-content-center\">\n            <div class=\"text-center text-muted\">\n              <i class=\"bi bi-music-note-beamed display-4\"></i>\n              <p class=\"mt-2\">No audio file loaded</p>\n            </div>\n          </div>\n\n          <!-- Audio File Content -->\n          <div v-else>\n            <!-- Content slot above waveform -->\n            <slot name=\"above-waveform\"></slot>\n\n            <!-- Waveform Canvas -->\n            <div class=\"waveform-canvas-container\" @mousedown=\"startSelection\" @mousemove=\"updateSelection\"\n              @mouseup=\"endSelection\">\n              <canvas ref=\"waveformCanvas\" class=\"waveform-canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\"\n                @click=\"seekToPosition\"></canvas>\n\n              <!-- Playback position handled by canvas drawing -->\n\n              <!-- Lyrics Markers -->\n              <div v-for=\"(lyric, index) in positionedLyrics\" :key=\"lyric.id\" class=\"lyric-marker\" :class=\"{\n                active: index === currentLineIndex,\n                selected: selectedMarkers.includes(index),\n              }\" :style=\"{ left: lyric.position + 'px' }\" @click=\"selectLyricMarker(index, $event)\"\n                @mousedown=\"startDragMarker(index, $event)\" :title=\"`Line ${lyric.lineNumber}: ${lyric.text}`\">\n                <div class=\"marker-line\"></div>\n                <div class=\"marker-label\">{{ lyric.lineNumber }}</div>\n              </div>\n\n              <!-- Selection Area -->\n              <div v-if=\"selectionStart !== null && selectionEnd !== null\" class=\"selection-area\"\n                :style=\"selectionStyle\">\n              </div>\n\n              <!-- Time Scale -->\n              <div class=\"time-scale\">\n                <div v-for=\"mark in timeMarks\" :key=\"mark.time\" class=\"time-mark\"\n                  :style=\"{ left: mark.position + 'px' }\">\n                  <div class=\"time-mark-line\"></div>\n                  <div class=\"time-mark-label\">{{ mark.label }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"row align-items-center\">\n          <div class=\"col-sm-4\">\n            <small class=\"text-muted\">\n              <span v-if=\"audioFile?.duration\">Duration: {{ formatTime(audioFile.duration) }}</span>\n              <span v-if=\"selectedDuration\"> • Selection: {{ formatTime(selectedDuration) }}</span>\n            </small>\n          </div>\n          <div class=\"col-sm-4 text-center\">\n            <small class=\"text-muted\">\n              {{ lyrics.length }} lyrics • {{ timedLyricsCount }} positioned\n            </small>\n          </div>\n          <div class=\"col-sm-4 text-end\">\n            <small class=\"text-muted\">\n              <span v-if=\"viewMode === 'window'\">Window: {{ formatTime(windowDuration) }}</span>\n              <span v-if=\"viewMode === 'full'\">Zoom: {{ Math.round(zoomLevel * 100) }}%</span>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\nimport type { AudioFile, LyricLine, WaveformData } from '@/types/karaoke'\n\n// Props\ninterface Props {\n  audioFile: AudioFile\n  lyrics: LyricLine[]\n  currentTime: number\n  waveformData: WaveformData | null\n  currentLineIndex?: number\n  playbackState?: any\n  isTimingMode?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  currentLineIndex: 0,\n  isTimingMode: false,\n})\n\n// Emits\nconst emit = defineEmits<{\n  seek: [time: number]\n  'lyrics-position': [lineIndex: number, time: number]\n  selection: [startTime: number, endTime: number]\n  'play-pause': []\n  'skip-backward': []\n  'skip-forward': []\n  'view-window-change': [viewStart: number, viewEnd: number, viewMode: 'full' | 'window']\n}>()\n\n// Reactive state\nconst waveformContainer = ref<HTMLElement>()\nconst waveformCanvas = ref<HTMLCanvasElement>()\nconst isLoading = ref(false)\nconst generatedWaveformData = ref<WaveformData | null>(null)\nconst zoomLevel = ref(1)\nconst canvasWidth = ref(800)\nconst canvasHeight = ref(120) // Increased height for better visibility\nconst selectionStart = ref<number | null>(null)\nconst selectionEnd = ref<number | null>(null)\nconst isDragging = ref(false)\nconst dragMarkerIndex = ref(-1)\nconst selectedMarkers = ref<number[]>([])\n\n// New waveform enhancement controls\nconst viewMode = ref<'full' | 'window'>('window') // Default to sliding window\nconst windowDuration = ref(15000) // 15 seconds window (in milliseconds)\nconst windowStart = ref(0) // Start position of the window in milliseconds\nconst autoScroll = ref(true) // Auto-scroll with playback\n\n// Computed properties\nconst positionedLyrics = computed(() => {\n  return props.lyrics\n    .filter(lyric => lyric.startTime !== undefined)\n    .map((lyric) => ({\n      ...lyric,\n      position: timeToPixel(lyric.startTime!),\n    }))\n})\n\n// Playback position now handled by canvas drawing\n\nconst timedLyricsCount = computed(() => {\n  return props.lyrics.filter((line: LyricLine) => line.startTime !== undefined).length\n})\n\n// Progress bar computed properties\nconst progressPercent = computed(() => {\n  if (!props.playbackState || !props.audioFile?.duration) return 0\n  return Math.min((props.currentTime / props.audioFile.duration) * 100, 100)\n})\n\nconst selectedDuration = computed(() => {\n  if (selectionStart.value !== null && selectionEnd.value !== null) {\n    const startTime = pixelToTime(Math.min(selectionStart.value, selectionEnd.value))\n    const endTime = pixelToTime(Math.max(selectionStart.value, selectionEnd.value))\n    return endTime - startTime\n  }\n  return 0\n})\n\nconst selectionStyle = computed(() => {\n  if (selectionStart.value !== null && selectionEnd.value !== null) {\n    const left = Math.min(selectionStart.value, selectionEnd.value)\n    const width = Math.abs(selectionEnd.value - selectionStart.value)\n    return {\n      left: left + 'px',\n      width: width + 'px',\n    }\n  }\n  return {}\n})\n\nconst timeMarks = computed(() => {\n  if (!props.audioFile?.duration) return []\n\n  const marks = []\n\n  if (viewMode.value === 'window') {\n    // Window mode: show marks only for the visible window (all values in milliseconds)\n    const windowStartMs = Math.floor(windowStart.value) // Already in milliseconds\n    const windowDurationMs = windowDuration.value // Already in milliseconds\n    const windowEndMs = windowStartMs + windowDurationMs\n    const intervalMs = windowDurationMs > 30000 ? 5000 : 2000 // 5s or 2s intervals\n\n    // Calculate starting mark aligned to interval boundaries\n    const firstMarkMs = Math.ceil(windowStartMs / intervalMs) * intervalMs\n\n    for (let timeMs = firstMarkMs; timeMs <= windowEndMs; timeMs += intervalMs) {\n      if (timeMs >= windowStartMs) {\n        const positionInWindow = (timeMs - windowStartMs) / windowDurationMs\n\n        // Only add marks that are within the visible window\n        if (positionInWindow >= 0 && positionInWindow <= 1) {\n          marks.push({\n            time: timeMs,\n            position: positionInWindow * canvasWidth.value,\n            label: formatTime(timeMs),\n          })\n        }\n      }\n    }\n  } else {\n    // Full mode: show marks for the entire duration\n    const duration = props.audioFile.duration\n    const interval = duration > 60000 ? 10000 : 5000 // 10s or 5s intervals\n\n    for (let time = 0; time <= duration; time += interval) {\n      marks.push({\n        time,\n        position: timeToPixel(time),\n        label: formatTime(time),\n      })\n    }\n  }\n\n  return marks\n})\n\n// Methods\nconst timeToPixel = (timeMs: number): number => {\n  if (!props.audioFile?.duration) return 0\n  const ratio = timeMs / props.audioFile.duration\n  return ratio * canvasWidth.value * zoomLevel.value\n}\n\nconst pixelToTime = (pixel: number): number => {\n  if (!props.audioFile?.duration) return 0\n  const ratio = pixel / (canvasWidth.value * zoomLevel.value)\n  return ratio * props.audioFile.duration\n}\n\nconst seekToPosition = (event: MouseEvent) => {\n  if (isDragging.value) return\n\n  const rect = waveformCanvas.value!.getBoundingClientRect()\n  const x = event.clientX - rect.left\n  const time = pixelToTime(x)\n  emit('seek', time)\n}\n\nconst selectLyricMarker = (index: number, event: MouseEvent) => {\n  event.stopPropagation()\n\n  if (event.ctrlKey || event.metaKey) {\n    // Multi-select\n    const markerIndex = selectedMarkers.value.indexOf(index)\n    if (markerIndex >= 0) {\n      selectedMarkers.value.splice(markerIndex, 1)\n    } else {\n      selectedMarkers.value.push(index)\n    }\n  } else {\n    // Single select\n    selectedMarkers.value = [index]\n  }\n}\n\nconst startDragMarker = (index: number, event: MouseEvent) => {\n  event.stopPropagation()\n  isDragging.value = true\n  dragMarkerIndex.value = index\n\n  const handleMouseMove = () => {\n    if (!isDragging.value) return\n\n    // Intentionally left blank for now; could compute live preview here if needed.\n  }\n\n  const handleMouseUp = () => {\n    if (isDragging.value) {\n      const rect = waveformCanvas.value!.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const time = pixelToTime(x)\n\n      emit('lyrics-position', dragMarkerIndex.value, Math.max(0, time))\n    }\n\n    isDragging.value = false\n    dragMarkerIndex.value = -1\n    document.removeEventListener('mousemove', handleMouseMove)\n    document.removeEventListener('mouseup', handleMouseUp)\n  }\n\n  document.addEventListener('mousemove', handleMouseMove)\n  document.addEventListener('mouseup', handleMouseUp)\n}\n\nconst startSelection = (event: MouseEvent) => {\n  if (event.target !== waveformCanvas.value) return\n\n  const rect = waveformCanvas.value!.getBoundingClientRect()\n  const x = event.clientX - rect.left\n  selectionStart.value = x\n  selectionEnd.value = x\n}\n\nconst updateSelection = (event: MouseEvent) => {\n  if (selectionStart.value === null) return\n\n  const rect = waveformCanvas.value!.getBoundingClientRect()\n  const x = event.clientX - rect.left\n  selectionEnd.value = x\n}\n\nconst endSelection = () => {\n  if (selectionStart.value !== null && selectionEnd.value !== null) {\n    const startTime = pixelToTime(Math.min(selectionStart.value, selectionEnd.value))\n    const endTime = pixelToTime(Math.max(selectionStart.value, selectionEnd.value))\n\n    if (Math.abs(selectionEnd.value - selectionStart.value) > 5) {\n      emit('selection', startTime, endTime)\n    }\n  }\n\n  // Clear selection after a delay\n  setTimeout(() => {\n    selectionStart.value = null\n    selectionEnd.value = null\n  }, 2000)\n}\n\nconst zoomIn = () => {\n  if (zoomLevel.value < 5) {\n    zoomLevel.value += 0.5\n    drawWaveform()\n  }\n}\n\nconst zoomOut = () => {\n  if (zoomLevel.value > 1) {\n    zoomLevel.value -= 0.5\n    drawWaveform()\n  }\n}\n\n// View mode controls\nconst setViewMode = (mode: 'full' | 'window') => {\n  viewMode.value = mode\n  if (mode === 'window') {\n    // Reset zoom when switching to window mode\n    zoomLevel.value = 1\n    updateWindowPosition()\n  }\n  drawWaveform()\n  emitViewWindowChange()\n}\n\nconst onWindowDurationChange = () => {\n  updateWindowPosition()\n  drawWaveform()\n  emitViewWindowChange()\n}\n\nconst toggleAutoScroll = () => {\n  autoScroll.value = !autoScroll.value\n}\n\n// Helper function to emit view window changes\nconst emitViewWindowChange = () => {\n  if (viewMode.value === 'window') {\n    const viewStart = windowStart.value / 1000 // Convert to seconds\n    const viewEnd = (windowStart.value + windowDuration.value) / 1000 // Convert to seconds\n    emit('view-window-change', viewStart, viewEnd, 'window')\n  } else {\n    // Full mode - show entire duration\n    const duration = props.audioFile?.duration || 60000 // Default to 60 seconds\n    emit('view-window-change', 0, duration / 1000, 'full')\n  }\n}\n\nconst updateWindowPosition = () => {\n  if (viewMode.value === 'window') {\n    const halfWindow = windowDuration.value / 2 // Half window in milliseconds\n\n    if (autoScroll.value && props.currentTime > 0) {\n      if (props.currentTime <= halfWindow) {\n        // Before mid-point: keep window at start\n        windowStart.value = 0\n      } else {\n        // After mid-point: center the window around current time\n        windowStart.value = Math.max(0, props.currentTime - halfWindow)\n      }\n    } else {\n      // When not playing or at start, show from beginning\n      windowStart.value = 0\n    }\n\n    // console.log('Window position updated:', {\n    //   windowStart: windowStart.value,\n    //   windowDuration: windowDuration.value,\n    //   currentTime: props.currentTime,\n    //   halfWindow,\n    //   autoScroll: autoScroll.value,\n    //   phase: props.currentTime <= halfWindow ? 'line-moves' : 'wave-scrolls',\n    // })\n  }\n\n  // Emit view window change whenever position updates\n  emitViewWindowChange()\n}\n\n// Timing controls methods\nconst seekToClick = (event: MouseEvent) => {\n  if (!props.audioFile?.duration) return\n\n  const progressBar = event.currentTarget as HTMLElement\n  const rect = progressBar.getBoundingClientRect()\n  const clickX = event.clientX - rect.left\n  const percentage = clickX / rect.width\n  const seekTime = percentage * props.audioFile.duration\n\n  emit('seek', seekTime)\n}\n\nconst drawWaveform = async () => {\n  const canvas = waveformCanvas.value\n  const waveformData = props.waveformData || generatedWaveformData.value\n  if (!canvas || !waveformData) return\n\n  const ctx = canvas.getContext('2d')\n  if (!ctx) return\n\n  // Clear canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n  // Draw waveform\n  const { peaks } = waveformData\n  const width = canvas.width\n  const height = canvas.height\n\n  // Calculate visible range based on view mode\n  let visiblePeaks = peaks\n  let startIndex = 0\n\n  if (viewMode.value === 'window') {\n    // Show only the window duration worth of peaks\n    const totalDuration = waveformData.duration || props.audioFile?.duration || 1\n    const startRatio = windowStart.value / totalDuration\n    const durationRatio = windowDuration.value / totalDuration\n\n    startIndex = Math.floor(startRatio * peaks.length)\n    const endIndex = Math.min(Math.floor((startRatio + durationRatio) * peaks.length), peaks.length)\n    visiblePeaks = peaks.slice(startIndex, endIndex)\n\n    // Debug logging - TMI for the console; it just noise!\n    //  we could add a vue based element to show this in the brower UI if needed\n    // console.log('Window mode debug:', {\n    //   totalDuration,\n    //   windowStart: windowStart.value,\n    //   windowDuration: windowDuration.value,\n    //   startRatio,\n    //   durationRatio,\n    //   peaksLength: peaks.length,\n    //   startIndex,\n    //   endIndex,\n    //   visiblePeaksLength: visiblePeaks.length,\n    //   visiblePeaksPreview: visiblePeaks.slice(0, 5)\n    // })\n\n    // Fallback: if no visible peaks (edge case), show first portion\n    if (visiblePeaks.length === 0) {\n      const fallbackEndIndex = Math.min(Math.floor(peaks.length * 0.2), peaks.length) // Show first 20%\n      visiblePeaks = peaks.slice(0, fallbackEndIndex)\n      // Better as a UI visualization than console logging\n      // console.log('Fallback applied, showing first 20% of peaks:', visiblePeaks.length)\n    }\n  }\n\n  const barWidth = width / visiblePeaks.length\n\n  // Enhanced visualization: top-half waves, bottom-centered, auto-height\n  ctx.fillStyle = '#3b82f6'\n  ctx.strokeStyle = '#1d4ed8'\n\n  // Calculate step size for proper zoom level - with 8000 samples, we can afford smaller steps\n  const stepSize =\n    viewMode.value === 'window'\n      ? Math.max(1, Math.ceil(visiblePeaks.length / (width * 2))) // More detail for window mode\n      : Math.max(1, Math.ceil(visiblePeaks.length / (width * zoomLevel.value * 2))) // More detail for full mode too\n\n  for (let i = 0; i < visiblePeaks.length; i += stepSize) {\n    // Only show top half of waveform (positive amplitudes only)\n    const amplitude = Math.abs(visiblePeaks[i])\n\n    // More aggressive height scaling - multiply by a scaling factor\n    const scalingFactor = 3.0 // Increase this to make waveform taller\n    const barHeight = Math.min(amplitude * height * scalingFactor, height * 0.95) // Use up to 95% of height\n\n    const x =\n      viewMode.value === 'window' ? (i / visiblePeaks.length) * width : (i / visiblePeaks.length) * width * zoomLevel.value\n    const y = height - barHeight // Bottom-centered: start from bottom and go up\n\n    // Calculate bar width based on view mode\n    const actualBarWidth =\n      viewMode.value === 'window'\n        ? Math.max(1, (width / visiblePeaks.length) * stepSize)\n        : Math.max(1, barWidth * zoomLevel.value)\n\n    // Draw the bar\n    if (barHeight > 1) {\n      ctx.fillRect(x, y, actualBarWidth, barHeight)\n    }\n  }\n\n  // Draw baseline at bottom\n  ctx.strokeStyle = '#6b7280'\n  ctx.lineWidth = 1\n  ctx.beginPath()\n  ctx.moveTo(0, height - 1)\n  ctx.lineTo(width, height - 1)\n  ctx.stroke()\n\n  // Draw current time indicator if provided\n  if (props.currentTime !== undefined) {\n    const totalDuration = waveformData.duration || props.audioFile?.duration\n    if (totalDuration) {\n      let timeX\n      if (viewMode.value === 'window') {\n        // Smart positioning with three states:\n        const halfWindow = windowDuration.value / 2\n        const endThreshold = totalDuration - halfWindow\n\n        if (props.currentTime <= halfWindow) {\n          // STATE 1: Before mid-point - red line moves from left (0% to 50%)\n          timeX = (props.currentTime / windowDuration.value) * width\n        } else if (props.currentTime >= endThreshold) {\n          // STATE 3: Near end of song - red line tracks to the right\n          const remainingTime = totalDuration - props.currentTime\n          const remainingWindow = windowDuration.value\n          timeX = width - (remainingTime / remainingWindow) * width\n        } else {\n          // STATE 2: Middle section - red line stays centered, waveform scrolls\n          timeX = width / 2\n        }\n      } else {\n        timeX = (props.currentTime / totalDuration) * width * zoomLevel.value\n      }\n\n      if (timeX >= 0 && timeX <= width) {\n        ctx.strokeStyle = '#ef4444'\n        ctx.lineWidth = 3 // Make it slightly thicker for better visibility\n        ctx.beginPath()\n        ctx.moveTo(timeX, 0)\n        ctx.lineTo(timeX, height)\n        ctx.stroke()\n      }\n    }\n  }\n}\n\nconst generateWaveformData = async () => {\n  if (!props.audioFile?.file) return\n\n  isLoading.value = true\n\n  try {\n    const audioContext = new AudioContext()\n    const arrayBuffer = await props.audioFile.file.arrayBuffer()\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer)\n\n    const channelData = audioBuffer.getChannelData(0)\n    const samples = 8000 // Much higher sample count for smooth waveform\n    const blockSize = Math.floor(channelData.length / samples)\n    const peaks = []\n\n    // Find the overall maximum to normalize peaks properly\n    let globalMax = 0\n    for (let i = 0; i < channelData.length; i++) {\n      globalMax = Math.max(globalMax, Math.abs(channelData[i]))\n    }\n\n    for (let i = 0; i < samples; i++) {\n      const start = i * blockSize\n      const end = start + blockSize\n      let max = 0\n\n      for (let j = start; j < end; j++) {\n        max = Math.max(max, Math.abs(channelData[j]))\n      }\n\n      // Normalize peaks to use full height range\n      peaks.push(globalMax > 0 ? max / globalMax : 0)\n    }\n\n    // Store the generated waveform data\n    generatedWaveformData.value = {\n      peaks,\n      sampleRate: audioBuffer.sampleRate,\n      duration: audioBuffer.duration,\n      channels: audioBuffer.numberOfChannels,\n    }\n\n    // Initialize window position now that we have duration\n    if (viewMode.value === 'window') {\n      updateWindowPosition()\n    }\n\n    nextTick(() => {\n      drawWaveform()\n    })\n  } catch (error) {\n    console.error('Error generating waveform:', error)\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst formatTime = (timeMs: number): string => {\n  const seconds = Math.floor(timeMs / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const remainingSeconds = seconds % 60\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n}\n\nconst updateCanvasSize = () => {\n  if (waveformContainer.value) {\n    canvasWidth.value = waveformContainer.value.clientWidth - 20\n  }\n}\n\n// Watchers\nwatch(\n  () => props.audioFile,\n  () => {\n    if (props.audioFile?.file) {\n      generateWaveformData()\n    }\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => props.waveformData,\n  () => {\n    if (props.waveformData) {\n      nextTick(() => {\n        drawWaveform()\n      })\n    }\n  }\n)\n\nwatch(\n  () => generatedWaveformData.value,\n  () => {\n    if (generatedWaveformData.value) {\n      nextTick(() => {\n        drawWaveform()\n      })\n    }\n  }\n)\n\nwatch(\n  () => props.currentTime,\n  (newTime, oldTime) => {\n    // Auto-scroll in window mode with smart positioning\n    if (viewMode.value === 'window' && newTime !== undefined && props.audioFile?.duration) {\n      const halfWindow = windowDuration.value / 2\n\n      // Detect if this is a manual seek (large time jump) vs natural playback\n      const isManualSeek = oldTime !== undefined && Math.abs(newTime - oldTime) > 2000 // 2+ second jump\n\n      // Update window position if auto-scroll is on OR if it's a manual seek\n      if (autoScroll.value || isManualSeek) {\n        const endThreshold = props.audioFile.duration - halfWindow\n\n        if (newTime <= halfWindow) {\n          // STATE 1: Before mid-point - keep window at start, red line moves from left\n          windowStart.value = 0\n        } else if (newTime >= endThreshold) {\n          // STATE 3: Near end of song - keep window at end, red line tracks to right\n          windowStart.value = Math.max(0, props.audioFile.duration - windowDuration.value)\n        } else {\n          // STATE 2: Middle section - center current time, red line stays at 50%\n          windowStart.value = Math.max(0, Math.min(newTime - halfWindow, props.audioFile.duration - windowDuration.value))\n        }\n\n        // const behavior = newTime <= halfWindow ? 'red-line-moves-left' :\n        //   newTime >= endThreshold ? 'red-line-tracks-right' : 'waveform-scrolls'\n\n        // console.log('Window position update:', {\n        //   currentTime: newTime,\n        //   endThreshold,\n        //   isManualSeek,\n        //   autoScroll: autoScroll.value,\n        //   windowStart: windowStart.value,\n        //   behavior\n        // })\n\n        // Emit view window change after updating window position\n        emitViewWindowChange()\n      }\n    }\n\n    nextTick(() => {\n      drawWaveform()\n    })\n  }\n)\n\n// Lifecycle\nonMounted(() => {\n  updateCanvasSize()\n  window.addEventListener('resize', updateCanvasSize)\n\n  // Values are already set in ref initialization - 15 seconds window mode with auto-scroll\n  // Emit initial view window state\n  emitViewWindowChange()\n})\n</script>\n\n<style scoped>\n.waveform-container {\n  min-height: 220px;\n  position: relative;\n  background: #f8f9fa;\n  overflow-x: auto;\n}\n\n.loading-state,\n.no-audio-state {\n  height: 220px;\n}\n\n.waveform-canvas-container {\n  margin-top: 0.5em;\n  position: relative;\n  padding: 20px 10px 5px;\n  /* Remove min-height to let content determine size naturally */\n  /* Total content: 20px + 120px (canvas) + 15px (time-scale) + 5px = 160px */\n}\n\n.waveform-canvas {\n  display: block;\n  cursor: crosshair;\n  border: 1px solid #dee2e6;\n  background: white;\n}\n\n/* Playback position now handled by canvas drawing */\n\n.lyric-marker {\n  position: absolute;\n  top: 15px;\n  /* Calculate height to stop at canvas baseline: container top padding (20px) + canvas baseline (119px) - marker top (15px) = 124px */\n  height: 124px;\n  cursor: pointer;\n  z-index: 5;\n}\n\n.marker-line {\n  width: 2px;\n  height: 100%;\n  background-color: #28a745;\n  margin: 0 auto;\n}\n\n.marker-label {\n  position: absolute;\n  top: -15px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: #28a745;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 0.75rem;\n  font-weight: bold;\n  white-space: nowrap;\n}\n\n.lyric-marker.active .marker-line {\n  background-color: #ffc107;\n  width: 3px;\n}\n\n.lyric-marker.active .marker-label {\n  background-color: #ffc107;\n  color: #000;\n}\n\n.lyric-marker.selected .marker-line {\n  background-color: #007bff;\n  width: 3px;\n}\n\n.lyric-marker.selected .marker-label {\n  background-color: #007bff;\n}\n\n.selection-area {\n  position: absolute;\n  top: 20px;\n  bottom: 40px;\n  background-color: rgba(0, 123, 255, 0.2);\n  border: 1px solid #007bff;\n  pointer-events: none;\n  z-index: 3;\n}\n\n.time-scale {\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  right: 10px;\n  height: 15px;\n}\n\n.time-mark {\n  position: absolute;\n  bottom: 0;\n}\n\n.time-mark-line {\n  width: 1px;\n  height: 10px;\n  background-color: #6c757d;\n  margin: 0 auto;\n}\n\n.time-mark-label {\n  position: absolute;\n  top: 3px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 0.75rem;\n  color: #6c757d;\n  white-space: nowrap;\n}\n\n.zoom-level {\n  font-size: 0.875rem;\n  color: #6c757d;\n  min-width: 50px;\n  text-align: center;\n}\n\n.controls-row {\n  min-height: 38px;\n}\n\n.controls-row>* {\n  flex-shrink: 0;\n}\n\n.player-controls .btn {\n  min-width: 36px;\n}\n\n.view-controls {\n  flex-wrap: wrap;\n}\n\n@media (max-width: 768px) {\n  .controls-row {\n    flex-direction: column;\n    gap: 0.75rem !important;\n  }\n\n  .view-controls {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n/* Scrollbar styling */\n.waveform-container::-webkit-scrollbar {\n  height: 8px;\n}\n\n.waveform-container::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.waveform-container::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.waveform-container::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n</style>\n","<template>\n  <div class=\"mb-4\">\n    <h6><i class=\"bi bi-stopwatch\"></i> Timing Mode</h6>\n    <div class=\"d-grid gap-1\">\n      <button class=\"btn btn-sm\" :class=\"isTimingMode ? 'btn-warning' : 'btn-outline-primary'\"\n        @click=\"$emit('toggle-timing-mode')\">\n        <i class=\"bi bi-crosshair\"></i>\n        {{ isTimingMode ? 'Exit Timing' : 'Start Timing' }}\n      </button>\n      <div class=\"timing-status small text-muted mt-1\">\n        <template v-if=\"isTimingMode\">\n          Press Space during playback to assign word timings\n        </template>\n        <template v-else>\n          Word boxes can be edited manually\n        </template>\n      </div>\n    </div>\n  </div>\n\n  <!-- Musical Timing Section -->\n  <div class=\"mb-4\">\n    <h6><i class=\"bi bi-music-note\"></i> Musical Timing</h6>\n    <div class=\"d-grid gap-1\">\n      <button class=\"btn btn-sm btn-outline-success\" @click=\"$emit('apply-musical-timing')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-magic\"></i>\n        Apply Musical Intelligence\n      </button>\n      <button class=\"btn btn-sm btn-outline-secondary\" @click=\"$emit('reset-syllable-timing')\"\n        :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-arrow-clockwise\"></i>\n        Reset Syllable Timing\n      </button>\n      <button class=\"btn btn-sm btn-outline-danger\" @click=\"$emit('clear-timing')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-trash\"></i>\n        Clear from Current Line\n      </button>\n      <button class=\"btn btn-sm btn-outline-info\" @click=\"showAnalysis = !showAnalysis\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-graph-up\"></i>\n        {{ showAnalysis ? 'Hide' : 'Show' }} Analysis\n      </button>\n    </div>\n\n    <!-- Analysis Panel -->\n    <div v-if=\"showAnalysis && songAnalysis\" class=\"mt-2 p-2 bg-light rounded small\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <strong>BPM:</strong> {{ songAnalysis.estimatedBPM.toFixed(0) }}<br>\n          <strong>Words:</strong> {{ songAnalysis.totalWords }}\n        </div>\n        <div class=\"col-6\">\n          <strong>Rests:</strong> {{ songAnalysis.detectedRests }}<br>\n          <strong>Quality:</strong> {{ songAnalysis.timingQuality }}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"timing-status small text-muted mt-1\">\n      Musical timing analyzes your word timings to distribute syllables using musical patterns (8th notes, quarter\n      notes,\n      etc.) and respects natural pauses.\n    </div>\n  </div>\n\n  <!-- Timing Diagnostics Section -->\n  <div class=\"mb-4\">\n    <h6><i class=\"bi bi-search\"></i> Timing Diagnostics</h6>\n    <div class=\"d-grid gap-1\">\n      <button class=\"btn btn-sm btn-outline-info\" @click=\"$emit('analyze-timing')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-bug\"></i>\n        Check for Overlaps\n      </button>\n      <button class=\"btn btn-sm btn-outline-warning\" @click=\"$emit('fix-overlaps')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-wrench\"></i>\n        Fix Overlaps\n      </button>\n      <button class=\"btn btn-sm btn-outline-secondary\" @click=\"showDiagnostics = !showDiagnostics\"\n        :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-info-circle\"></i>\n        {{ showDiagnostics ? 'Hide' : 'Show' }} Details\n      </button>\n    </div>\n\n    <!-- Diagnostics Panel -->\n    <div v-if=\"showDiagnostics && timingAnalysis\" class=\"mt-2 p-2 rounded small\"\n      :class=\"timingAnalysis.hasIssues ? 'bg-warning bg-opacity-10 border border-warning' : 'bg-success bg-opacity-10 border border-success'\">\n      <div class=\"mb-2\">\n        <strong>Status:</strong> {{ timingAnalysis.summary }}\n      </div>\n\n      <div v-if=\"timingAnalysis.sequenceViolations && timingAnalysis.sequenceViolations.length > 0\" class=\"mb-2\">\n        <strong class=\"text-danger\">🚨 Sequence Violations:</strong>\n        <ul class=\"mb-0 ps-3\">\n          <li v-for=\"violation in timingAnalysis.sequenceViolations.slice(0, 3)\"\n            :key=\"`${violation.word1}-${violation.word2}`\" class=\"small text-danger\">\n            {{ violation.issue }}\n          </li>\n          <li v-if=\"timingAnalysis.sequenceViolations.length > 3\" class=\"small text-muted\">\n            ...and {{ timingAnalysis.sequenceViolations.length - 3 }} more\n          </li>\n        </ul>\n      </div>\n\n      <div v-if=\"timingAnalysis.overlaps.length > 0\" class=\"mb-2\">\n        <strong class=\"text-warning\">Overlaps Found:</strong>\n        <ul class=\"mb-0 ps-3\">\n          <li v-for=\"overlap in timingAnalysis.overlaps.slice(0, 5)\"\n            :key=\"`${overlap.word1.lineIndex}-${overlap.word1.wordIndex}`\" class=\"small\">\n            \"{{ overlap.word1.word }}\" → \"{{ overlap.word2.word }}\" ({{ overlap.overlapDuration }}ms overlap)\n          </li>\n          <li v-if=\"timingAnalysis.overlaps.length > 5\" class=\"small text-muted\">\n            ...and {{ timingAnalysis.overlaps.length - 5 }} more\n          </li>\n        </ul>\n      </div>\n\n      <div v-if=\"timingAnalysis.smallGaps.length > 0\" class=\"mb-2\">\n        <strong class=\"text-info\">Small Gaps:</strong>\n        <span class=\"small\">{{ timingAnalysis.smallGaps.length }} gaps &lt; 50ms</span>\n      </div>\n\n      <div class=\"small text-muted\">\n        {{ timingAnalysis.timedWords }} of {{ timingAnalysis.totalWords }} words have timing data\n      </div>\n    </div>\n\n    <div class=\"timing-status small text-muted mt-1\">\n      Overlapping word timings can cause editing issues. Use diagnostics to detect and fix timing problems.\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport type { TimingAnalysisResult } from '../composables/useTimingAnalysis'\n\ninterface Props {\n  isTimingMode: boolean\n  timedWords?: number\n  totalWords?: number\n  songAnalysis?: {\n    estimatedBPM: number\n    totalWords: number\n    detectedRests: number\n    timingQuality: string\n  } | null\n  timingAnalysis?: TimingAnalysisResult | null\n}\n\nconst props = defineProps<Props>()\n\n// Local reactive state\nconst showAnalysis = ref(false)\nconst showDiagnostics = ref(false)\n\n// Computed properties\nconst hasTimedWords = computed(() => {\n  return (props.timedWords || 0) > 0\n})\n\ndefineEmits<{\n  'toggle-timing-mode': []\n  'apply-musical-timing': []\n  'reset-syllable-timing': []\n  'clear-timing': []\n  'analyze-timing': []\n  'fix-overlaps': []\n}>()\n</script>\n","<template>\n  <div class=\"mb-4\">\n    <h6>Progress</h6>\n    <div class=\"small\">\n      <div class=\"d-flex justify-content-between\">\n        <span>Lines:</span>\n        <span>{{ timingStats.timedLines }}/{{ timingStats.totalLines }}</span>\n      </div>\n      <div class=\"d-flex justify-content-between\">\n        <span>Words:</span>\n        <span>{{ timingStats.timedWords }}/{{ timingStats.totalWords }}</span>\n      </div>\n      <div class=\"d-flex justify-content-between\">\n        <span>Syllables:</span>\n        <span>{{ timingStats.timedSyllables }}/{{ timingStats.totalSyllables }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface TimingStats {\n  totalLines: number\n  timedLines: number\n  totalWords: number\n  timedWords: number\n  totalSyllables: number\n  timedSyllables: number\n  completionPercent: number\n}\n\ninterface Props {\n  timingStats: TimingStats\n}\n\ndefineProps<Props>()\n</script>\n","<template>\n  <div>\n    <h6><i class=\"bi bi-question-circle\"></i> Hotkeys</h6>\n    <div class=\"small\">\n      <div class=\"hotkey-list mb-2\">\n        <div class=\"hotkey-item\">\n          <kbd>Space</kbd><span>Play/Timing</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Enter</kbd><span>Play/Pause</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>0</kbd><kbd>.</kbd><span>Assign timing</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>+</kbd><kbd>-</kbd><span>Skip short</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Ctrl</kbd><kbd>←</kbd><kbd>→</kbd><span>Skip 5s</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Alt</kbd><kbd>T</kbd><span>Toggle mode</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Ctrl</kbd><kbd>F</kbd><span>Fast refresh (smoother)</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Home</kbd><kbd>End</kbd><span>Start/End</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Esc</kbd><span>Exit \"Add Timing\" mode</span>\n        </div>\n      </div>\n      <div class=\"timing-steps\">\n        <strong>Workflow:</strong>\n        <ol class=\"small-steps\">\n          <li>Start timing mode</li>\n          <li>Press Space to play, then Space during playback to assign timings</li>\n          <li>Edit word boxes manually</li>\n          <li>Adjust syllable timings</li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.hotkey-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.25rem;\n}\n\n.hotkey-item kbd {\n  font-size: 0.7rem;\n  padding: 0.15rem 0.3rem;\n  min-width: auto;\n}\n\n.hotkey-item span {\n  flex: 1;\n  font-size: 0.75rem;\n}\n\n.timing-steps {\n  background: rgba(0, 0, 0, 0.05);\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  margin-top: 0.5rem;\n  font-size: 1.1rem;\n}\n\n.small-steps {\n  margin: 0.25rem 0 0 1rem;\n  padding-left: 0;\n  line-height: 1.3;\n  font-size: 0.9rem;\n}\n</style>\n","<template>\n  <div class=\"mb-3\">\n    <h6><i class=\"bi bi-display\"></i> Viewport</h6>\n    <div class=\"small\">\n      <div class=\"d-flex justify-content-between\">\n        <span>Width:</span>\n        <span class=\"text-primary font-monospace\">{{ viewportWidth }}px</span>\n      </div>\n      <div class=\"d-flex justify-content-between\">\n        <span>Breakpoint:</span>\n        <span class=\"text-success font-monospace\">{{ currentBreakpoint }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  viewportWidth: number\n  currentBreakpoint: string\n}\n\ndefineProps<Props>()\n</script>\n","<template>\n  <div class=\"timing-view\" tabindex=\"0\" ref=\"timingViewRef\" @click=\"ensureAudioReady\">\n    <!-- Main Layout Container - Full Width -->\n    <div class=\"full-width-layout\" v-if=\"project\">\n      <div class=\"flexible-layout\">\n        <!-- Left Sidebar Column: Help & Timing Controls -->\n        <div class=\"sidebar-column\">\n          <div class=\"card h-100\">\n            <!-- Compact Header -->\n            <div class=\"card-header py-2\">\n              <div class=\"d-flex align-items-center justify-content-between\">\n                <div>\n                  <h6 class=\"mb-0\">{{ project?.name }}</h6>\n                  <small class=\"text-muted\">{{ project?.artist }}</small>\n                </div>\n                <div class=\"btn-group-vertical btn-group-sm\">\n                  <button class=\"btn btn-success btn-sm\" @click=\"saveProject\" title=\"Save project (Ctrl+S)\"\n                    data-bs-toggle=\"tooltip\">\n                    <i class=\"bi bi-save\"></i>\n                  </button>\n                  <button class=\"btn btn-outline-secondary btn-sm\" @click=\"exitProject\" title=\"Exit to previous page\"\n                    data-bs-toggle=\"tooltip\">\n                    <i class=\"bi bi-x-circle\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <!-- Help & Controls Body -->\n            <div class=\"card-body\">\n              <!-- Timing Controls -->\n              <TimingControlsPanel :is-timing-mode=\"isTimingMode\" :timed-words=\"timingStats.timedWords\"\n                :total-words=\"timingStats.totalWords\" :song-analysis=\"songAnalysis\" :timing-analysis=\"timingAnalysis\"\n                @toggle-timing-mode=\"toggleTimingMode\" @clear-timing=\"clearCurrentLineTiming\"\n                @apply-musical-timing=\"applyMusicalTiming\" @reset-syllable-timing=\"resetSyllableTiming\"\n                @analyze-timing=\"analyzeCurrentTiming\" @fix-overlaps=\"fixCurrentOverlaps\" />\n\n              <!-- Progress Stats -->\n              <ProgressStats :timing-stats=\"timingStats\" />\n\n              <!-- Viewport Info -->\n              <ViewportIndicator :viewport-width=\"viewportWidth\" :current-breakpoint=\"currentBreakpoint\" />\n\n              <!-- Help Section -->\n              <HotkeyHelp />\n            </div>\n          </div>\n        </div>\n\n        <!-- Right Main Content Column -->\n        <div class=\"main-content-column\">\n          <!-- Lyrics Editor and Preview Row - Side by Side -->\n          <div class=\"row mb-3\">\n            <!-- Lyrics Editor - Left Half -->\n            <div class=\"col-6\">\n              <LyricsEditor :lyrics=\"project.lyrics\" :currentLine=\"currentLine\" :currentWord=\"currentWordIndex\"\n                :isTimingMode=\"isTimingMode\" @line-select=\"selectLine\" @lyrics-update=\"updateLyrics\" />\n            </div>\n            <!-- Lyrics Preview - Right Half -->\n            <div class=\"col-6\">\n              <LyricsPreview :lyrics=\"project.lyrics\" :currentTime=\"playbackState.currentTime\"\n                :currentLine=\"currentLine\" :currentWord=\"currentWordIndex\"\n                :currentSyllable=\"isTimingMode ? 0 : playbackState.currentSyllable?.syllableIndex\" />\n            </div>\n          </div>\n\n          <!-- Waveform View with Word Timing Editor - Full Width -->\n          <div class=\"row mb-3\">\n            <div class=\"col-12\">\n              <WaveformViewer :audioFile=\"project.audioFile\" :lyrics=\"project.lyrics\"\n                :currentTime=\"playbackState.currentTime\" :waveformData=\"waveformData\" :playbackState=\"playbackState\"\n                :isTimingMode=\"isTimingMode\" @seek=\"seekAudio\" @lyrics-position=\"updateLyricsPosition\"\n                @play-pause=\"togglePlayPause\" @skip-backward=\"skipBackward\" @skip-forward=\"skipForward\"\n                @view-window-change=\"handleViewWindowChange\">\n\n                <!-- Word Timing Editor in slot above waveform -->\n                <template #above-waveform>\n                  <WordTimingEditor :key=\"`timing-editor-${visualRefreshKey}`\" :words=\"timingEditorWords\"\n                    :duration=\"audioDuration\" :view-start=\"viewWindowStart\" :view-end=\"viewWindowEnd\"\n                    :show-debug=\"false\" @update:words=\"handleTimingEditorWordsUpdate\" @select-word=\"handleWordSelect\" />\n                </template>\n              </WaveformViewer>\n            </div>\n          </div>\n\n          <!-- Debug info -->\n          <div class=\"row mb-3\">\n            <div class=\"col-12\">\n              <small class=\" text-muted\">\n                🎯 {{ isTimingMode ? 'Timing' : 'Playback' }} Mode: Line {{ currentLine }}\n                , Word {{ currentWordIndex + 1 }}\n                <span v-if=\"project.lyrics[currentLine]?.words[currentWordIndex]\">\n                  ({{ project.lyrics[currentLine].words[currentWordIndex].word }})\n                </span>\n                <span class=\"ms-3\" :class=\"isFastMode ? 'text-success fw-bold' : 'text-muted'\">\n                  🔄 {{ isFastMode ? '12Hz FAST' : '8Hz Normal' }}\n                </span>\n              </small>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading State -->\n    <div v-else-if=\"loading\" class=\"full-width-layout\">\n      <div class=\"text-center py-5\">\n        <div class=\"spinner-border text-primary\" role=\"status\">\n          <span class=\"visually-hidden\">Loading...</span>\n        </div>\n        <p class=\"mt-3\">Loading project...</p>\n      </div>\n    </div>\n\n    <!-- Project Not Found -->\n    <div v-else class=\"full-width-layout\">\n      <div class=\"d-flex justify-content-center\">\n        <div class=\"card\" style=\"max-width: 500px;\">\n          <div class=\"card-body p-5 text-center\">\n            <h3>Project Not Found</h3>\n            <p class=\"lead\">The requested project could not be found.</p>\n            <router-link to=\"/compose\" class=\"btn btn-primary\">\n              <i class=\"bi bi-arrow-left\"></i> Back to Projects\n            </router-link>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Hotkey Help Modal -->\n    <div class=\"modal\" :class=\"{ show: showHotkeyModal }\" v-if=\"showHotkeyModal\" @click=\"closeHotkeyModal\">\n      <div class=\"modal-dialog modal-lg\" @click.stop>\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">🎹 Hotkey Reference Guide</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeHotkeyModal\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h6 class=\"text-primary\">⏯️ Playback Controls</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Spacebar</kbd> - Play/Pause (or Timing in Timing Mode)</li>\n                  <li class=\"mb-2\"><kbd>Numpad Enter</kbd> - Play/Pause</li>\n                  <li class=\"mb-2\"><kbd>Ctrl+P</kbd> - Play/Pause</li>\n                </ul>\n\n                <h6 class=\"text-success\">⏩ Navigation</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Home</kbd> - Jump to start (0:00)</li>\n                  <li class=\"mb-2\"><kbd>End</kbd> - Jump to end of song</li>\n                  <li class=\"mb-2\"><kbd>Numpad +</kbd> - Skip forward 1 second</li>\n                  <li class=\"mb-2\"><kbd>Numpad -</kbd> - Skip backward 1 second</li>\n                  <li class=\"mb-2\"><kbd>Ctrl+R</kbd> - Skip forward 10 seconds</li>\n                  <li class=\"mb-2\"><kbd>Ctrl+L</kbd> - Skip backward 10 seconds</li>\n                </ul>\n              </div>\n              <div class=\"col-md-6\">\n                <h6 class=\"text-warning\">⏱️ Timing Assignment</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Spacebar</kbd> - Assign timing (in Timing Mode)</li>\n                  <li class=\"mb-2\"><kbd>Numpad 0</kbd> or <kbd>.</kbd> - Assign timing</li>\n                  <li class=\"mb-2\"><kbd>T</kbd> or <kbd>Insert</kbd> - Toggle Timing Mode</li>\n                </ul>\n\n                <h6 class=\"text-info\">📝 Editing</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Ctrl+S</kbd> - Save project</li>\n                  <li class=\"mb-2\"><kbd>Escape</kbd> - Close modal or exit timing mode</li>\n                  <li class=\"mb-2\"><kbd>Double-click</kbd> any lyric line to edit</li>\n                  <li class=\"mb-2\"><kbd>Enter</kbd> or <kbd>Blur</kbd> to save</li>\n                  <li class=\"mb-2\"><kbd>Escape</kbd> to cancel</li>\n                </ul>\n              </div>\n            </div>\n\n            <div class=\"alert alert-info mt-3\">\n              <strong>💡 Pro Tips:</strong>\n              <ul class=\"mb-0 mt-2\">\n                <li>Use <kbd>Home</kbd>/<kbd>End</kbd> for instant navigation to start/end</li>\n                <li>Use the numpad for fastest timing assignment workflow</li>\n                <li>Toggle Timing Mode (<kbd>T</kbd> or <kbd>Insert</kbd>) to focus on timing vs playback</li>\n                <li>Double-click lyrics for quick inline editing</li>\n                <li>Use 1-second skips for precise timing adjustments</li>\n              </ul>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"closeHotkeyModal\">Got it!</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, nextTick } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport type { KaraokeProject, LyricLine, PlaybackState, WaveformData } from '@/types/karaoke'\nimport { audioService } from '@/services/audioService'\nimport { audioStorageService } from '@/services/audioStorageService'\nimport { assignWordTiming, getCurrentPosition, getTimingStats, finalizePendingSyllableTiming, clearTimingFromLine } from '@/utils/lyricsParser'\nimport { applyMusicalTimingToSong, resetSongSyllableTiming, type SongAnalysis } from '@/models/MusicalTimingModel'\nimport { TIMING, TimingUtils } from '@/models/TimingConstants'\nimport { useTimingAnalysis, type TimingAnalysisResult } from '@/composables/useTimingAnalysis'\nimport { RelativeSyllableTiming } from '@/models/RelativeSyllableTiming'\nimport LyricsEditor from '@/components/LyricsEditor.vue'\nimport LyricsPreview from '@/components/LyricsPreview.vue'\nimport WaveformViewer from '@/components/WaveformViewer.vue'\nimport WordTimingEditor from '@/components/WordTimingEditor.vue'\nimport TimingControlsPanel from '@/components/TimingControlsPanel.vue'\nimport ProgressStats from '@/components/ProgressStats.vue'\nimport HotkeyHelp from '@/components/HotkeyHelp.vue'\nimport ViewportIndicator from '@/components/ViewportIndicator.vue'\n\n// Router\nconst route = useRoute()\nconst router = useRouter()\n\n// Reactive state\nconst timingViewRef = ref<HTMLElement>()\nconst project = ref<KaraokeProject | null>(null)\nconst loading = ref(true)\nconst showHotkeyModal = ref(false)\nconst currentLine = ref(0)\nconst currentWordIndex = ref(0)\nconst isTimingMode = ref(false)\n\n// Visual refresh counter to force component re-renders after timing fixes\nconst visualRefreshKey = ref(0)\nconst waveformData = ref<WaveformData | null>(null)\n\n// Musical timing state\nconst songAnalysis = ref<SongAnalysis | null>(null)\n\n// Timing analysis state\nconst { analyzeTimingOverlaps, fixTimingOverlaps } = useTimingAnalysis()\nconst timingAnalysis = ref<TimingAnalysisResult | null>(null)\n\n// View window state (synchronized with WaveformViewer)\nconst viewWindowStart = ref(0) // in seconds\nconst viewWindowEnd = ref(60) // in seconds, default to 60s\nconst viewWindowMode = ref<'full' | 'window'>('window')\n\n// Viewport tracking\nconst viewportWidth = ref(typeof window !== 'undefined' ? window.innerWidth : 1024)\nconst viewportHeight = ref(typeof window !== 'undefined' ? window.innerHeight : 768)\n\n// Global hotkeys cleanup\nlet cleanupGlobalHotkeys: (() => void) | null = null\n\n// Playback state\nconst playbackState = ref<PlaybackState>({\n  isPlaying: false,\n  currentTime: 0,\n  duration: 0,\n  volume: 1,\n  playbackRate: 1,\n  isLoaded: false,\n})\n\n// Fast refresh mode state\nconst isFastMode = ref(false)\n\n// Computed properties\nconst timingStats = computed(() => {\n  if (!project.value) {\n    return {\n      totalLines: 0,\n      timedLines: 0,\n      totalWords: 0,\n      timedWords: 0,\n      totalSyllables: 0,\n      timedSyllables: 0,\n      completionPercent: 0,\n    }\n  }\n  return getTimingStats(project.value.lyrics)\n})\n\nconst currentBreakpoint = computed(() => {\n  const width = viewportWidth.value\n  if (width >= 1400) return 'xxl'\n  if (width >= 1200) return 'xl'\n  if (width >= 992) return 'lg'\n  if (width >= 768) return 'md'\n  if (width >= 576) return 'sm'\n  return 'xs'\n})\n\n// Computed properties for WordTimingEditor\nconst timingEditorWords = computed(() => {\n  if (!project.value?.lyrics) {\n    console.log('🔍 timingEditorWords: No project or lyrics')\n    return []\n  }\n\n  const words: { id: string; text: string; startTime: number; endTime: number; syllables?: any[] }[] = []\n  let lyricsLineIndex = 0 // Track lyrics-only line index\n\n  project.value.lyrics.forEach((line) => {\n\n    // console.log(`🔍 Processing line ${originalLineIndex}:`, {\n    //   text: line.text,\n    //   type: line.type,\n    //   isMetadata: isMetadataLine(line),\n    //   hasWords: !!line.words,\n    //   wordCount: line.words?.length || 0\n    // })\n\n    // Skip metadata lines - only process lyrics lines\n    if (isMetadataLine(line)) {\n      return\n    }\n\n    // Only process lines that have words array\n    if (!line.words || !Array.isArray(line.words)) {\n      return\n    }\n\n    line.words.forEach((word, wordIndex) => {\n      words.push({\n        id: `lyrics-${lyricsLineIndex}-word-${wordIndex}`, // Use lyrics-only line index\n        text: word.word,\n        startTime: (word.startTime || 0) / 1000, // Convert milliseconds to seconds\n        endTime: (word.endTime || word.startTime || 0) / 1000, // Convert milliseconds to seconds\n        syllables: word.syllables?.map((syllable) => ({\n          text: syllable.syllable,\n          startTime: (syllable.startTime || 0) / 1000, // Convert milliseconds to seconds\n          endTime: (syllable.endTime || syllable.startTime || 0) / 1000, // Convert milliseconds to seconds\n        })),\n      })\n    })\n\n    lyricsLineIndex++ // Increment only for actual lyrics lines\n  })\n\n  // Debug logging disabled - this computed runs frequently during drag operations\n  // console.log('🔍 timingEditorWords result:', {\n  //   totalLyricsLines: project.value.lyrics.length,\n  //   wordsGenerated: words.length,\n  //   firstFewWords: words.slice(0, 5).map(w => ({\n  //     id: w.id, text: w.text, startTime: w.startTime, endTime: w.endTime\n  //   }))\n  // })\n\n  return words\n})\n\nconst audioDuration = computed(() => {\n  return playbackState.value.duration || 60 // Default to 60 seconds if not loaded\n})\n\n// Methods\nconst closeHotkeyModal = () => {\n  showHotkeyModal.value = false\n}\n\nconst exitProject = () => {\n  // Use browser back navigation to maintain proper history\n  // If there's no history (user came directly to this URL), fall back to compose page\n  if (window.history.length > 1) {\n    router.back()\n  } else {\n    router.push('/compose')\n  }\n}\n\n// Handler for view window changes from WaveformViewer\nconst handleViewWindowChange = (viewStart: number, viewEnd: number, mode: 'full' | 'window') => {\n  viewWindowStart.value = viewStart\n  viewWindowEnd.value = viewEnd\n  viewWindowMode.value = mode\n  // console.log('🔄 View window synchronized:', {\n  //   viewStart, viewEnd, mode\n  // })\n}\n\n// Helper function to check if a line is a metadata line\nconst isMetadataLine = (line: LyricLine): boolean => {\n  return line.type !== undefined && line.type !== 'lyrics'\n}\n\n// Helper function to find the next lyric line (skip metadata)\nconst findNextLyricLine = (startIndex: number): number => {\n  if (!project.value) return startIndex\n\n  for (let i = startIndex; i < project.value.lyrics.length; i++) {\n    const line = project.value.lyrics[i]\n    if (!isMetadataLine(line) && line.words && line.words.length > 0) {\n      return i\n    }\n  }\n  return startIndex // Return original if no lyric line found\n}\n\n// Helper function to find the previous lyric line (skip metadata)\nconst findPrevLyricLine = (startIndex: number): number => {\n  if (!project.value) return startIndex\n\n  for (let i = startIndex; i >= 0; i--) {\n    const line = project.value.lyrics[i]\n    if (!isMetadataLine(line) && line.words && line.words.length > 0) {\n      return i\n    }\n  }\n  return startIndex // Return original if no lyric line found\n}\n\n// Helper function to finalize syllables when we reach the end of a line or song\nconst finalizeCurrentWordSyllables = () => {\n  if (!project.value) return\n\n  const lineIndex = currentLine.value\n  const wordIndex = currentWordIndex.value\n\n  if (lineIndex >= 0 && lineIndex < project.value.lyrics.length) {\n    const line = project.value.lyrics[lineIndex]\n    if (line && line.words && wordIndex >= 0 && wordIndex < line.words.length) {\n      const word = line.words[wordIndex]\n      // Only finalize if the word has timing assigned and syllables that need timing\n      if (word.startTime !== undefined && word.syllables && word.syllables.length > 0) {\n        // Check if syllables need timing (have undefined or 0 timing)\n        const needsTiming = word.syllables.some(s => s.startTime === undefined || s.endTime === undefined)\n        if (needsTiming) {\n          project.value.lyrics = finalizePendingSyllableTiming(project.value.lyrics, lineIndex, wordIndex)\n          console.log('🔄 Finalized syllables for current word:', word.word)\n        }\n      }\n    }\n  }\n}\n\nconst selectLine = (lineIndex: number) => {\n  if (!project.value || lineIndex >= project.value.lyrics.length) {\n    currentLine.value = lineIndex\n    return\n  }\n\n  const selectedLine = project.value.lyrics[lineIndex]\n\n  // If selecting a metadata line, find the nearest lyric line\n  if (isMetadataLine(selectedLine)) {\n    // Try to find the next lyric line first, then previous\n    let nextLyricIndex = findNextLyricLine(lineIndex + 1)\n    if (nextLyricIndex === lineIndex + 1 && nextLyricIndex >= project.value.lyrics.length) {\n      nextLyricIndex = findPrevLyricLine(lineIndex - 1)\n    }\n    currentLine.value = nextLyricIndex\n    return\n  }\n\n  // Handle regular lyric lines with smart timing behavior\n  if (selectedLine.startTime !== undefined && selectedLine.words && selectedLine.words.length > 0) {\n    // Case A: Line has timing - focus first word and seek to start time minus word duration as lead-in\n    currentLine.value = lineIndex\n    currentWordIndex.value = 0\n\n    // Calculate lead-in time: subtract first word's duration from line start time\n    const firstWord = selectedLine.words[0]\n    const wordDuration = firstWord.endTime && firstWord.startTime\n      ? firstWord.endTime - firstWord.startTime\n      : 500 // Default 500ms if no word timing\n\n    const leadInTime = Math.max(0, selectedLine.startTime - wordDuration)\n\n    console.log(`📍 Smart line selection: Line ${lineIndex + 1} with timing at ${selectedLine.startTime}ms, seeking to lead-in at ${leadInTime}ms`)\n    audioService.seek(leadInTime)\n\n  } else {\n    // Case B: Line has no timing - find previous timed line, seek there, select next line and focus first word\n    let previousTimedLineIndex = lineIndex - 1\n    let previousTimedLine = null\n\n    // Find the closest previous line with timing\n    while (previousTimedLineIndex >= 0) {\n      const line = project.value.lyrics[previousTimedLineIndex]\n      if (!isMetadataLine(line) && line.startTime !== undefined) {\n        previousTimedLine = line\n        break\n      }\n      previousTimedLineIndex--\n    }\n\n    if (previousTimedLine && previousTimedLine.startTime !== undefined) {\n      // Seek to the previous timed line's start time\n      console.log(`📍 Smart line selection: Line ${lineIndex + 1} without timing, seeking to previous timed line at ${previousTimedLine.startTime}ms`)\n      audioService.seek(previousTimedLine.startTime)\n\n      // Select the line that follows the previous timed line (could be the original selection or the line after the timed line)\n      const nextLineIndex = previousTimedLineIndex + 1\n      if (nextLineIndex < project.value.lyrics.length && !isMetadataLine(project.value.lyrics[nextLineIndex])) {\n        currentLine.value = nextLineIndex\n        currentWordIndex.value = 0\n        console.log(`📍 Auto-selected next line ${nextLineIndex + 1} for timing continuation`)\n      } else {\n        // Fallback to original selection\n        currentLine.value = lineIndex\n        currentWordIndex.value = 0\n      }\n    } else {\n      // No previous timed line found, just select normally\n      currentLine.value = lineIndex\n      currentWordIndex.value = 0\n      console.log(`📍 Line ${lineIndex + 1} selected without timing, no previous timed line found`)\n    }\n  }\n}\n\nconst updateLyrics = (lyrics: LyricLine[]) => {\n  if (project.value) {\n    project.value.lyrics = lyrics\n  }\n}\n\nconst togglePlayPause = async () => {\n  try {\n    if (playbackState.value.isPlaying) {\n      audioService.pause()\n      console.log('Audio paused')\n    } else {\n      console.log('Attempting to play audio...')\n      await audioService.play()\n      console.log('Audio play initiated')\n    }\n  } catch (error) {\n    console.error('Failed to toggle play/pause:', error)\n    alert('Failed to play audio. The audio context may need to be restarted. Try clicking the play button again.')\n  }\n}\n\nconst seekAudio = (time: number) => {\n  audioService.seek(time)\n}\n\nconst skipBackward = () => {\n  const newTime = Math.max(0, playbackState.value.currentTime - 10000) // 10 seconds in ms\n  audioService.seek(newTime)\n}\n\nconst skipForward = () => {\n  const duration = project.value?.audioFile?.duration || 0\n  if (duration > 0) {\n    const newTime = Math.min(duration - 100, playbackState.value.currentTime + 10000) // 10 seconds in ms, stay 100ms from end\n    audioService.seek(newTime)\n  }\n}\n\nconst skipBackwardShort = () => {\n  const newTime = Math.max(0, playbackState.value.currentTime - 1000) // 1 second in ms\n  audioService.seek(newTime)\n}\n\nconst skipForwardShort = () => {\n  const duration = project.value?.audioFile?.duration || 0\n  if (duration > 0) {\n    const newTime = Math.min(duration - 100, playbackState.value.currentTime + 1000) // 1 second in ms, stay 100ms from end\n    audioService.seek(newTime)\n  }\n}\n\nconst seekToStart = () => {\n  audioService.seek(0)\n  // Reset to first lyric line when seeking to start\n  currentLine.value = findNextLyricLine(0)\n  currentWordIndex.value = 0\n}\n\nconst seekToEnd = () => {\n  const duration = project.value?.audioFile?.duration || 0\n  if (duration > 0) {\n    // Seek to actual end, minus just 10ms to avoid potential audio edge issues\n    const newTime = Math.max(0, duration - 10)\n    audioService.seek(newTime)\n  }\n}\n\nconst toggleTimingMode = () => {\n  isTimingMode.value = !isTimingMode.value\n}\n\n// Helper function to ensure audio context is ready\nconst ensureAudioReady = async () => {\n  try {\n    // This requires a user interaction to work properly\n    await audioService.play()\n    audioService.pause()\n    console.log('Audio context verified as ready')\n  } catch (error) {\n    console.warn('Audio context may need user interaction:', error)\n  }\n}\n\n// Clear timing for current line and all subsequent lines\nconst clearCurrentLineTiming = () => {\n  if (!project.value) return\n\n  const lineIndex = currentLine.value\n  const lineCount = project.value.lyrics.length - lineIndex\n  const message = lineCount === 1\n    ? 'Clear timing for the current line?'\n    : `Clear timing for the current line and ${lineCount - 1} lines after it?\\n\\nThis prevents timing inconsistencies by clearing all subsequent timing.`\n\n  if (confirm(message)) {\n    project.value.lyrics = clearTimingFromLine(project.value.lyrics, lineIndex)\n    console.log(`🗑️ Cleared timing from line ${lineIndex} onwards (${lineCount} lines affected)`)\n  }\n}\n\n// Smart duration calculation helper\nconst calculateSmartDuration = (currentLineIndex: number, currentWordIndex: number): number => {\n  if (!project.value) return 500\n\n  const lyrics = project.value.lyrics\n  const currentLine = lyrics[currentLineIndex]\n  if (!currentLine) return 500\n\n  let nextTiming: number | undefined\n\n  // Try to find next word timing\n  if (currentWordIndex < currentLine.words.length - 1) {\n    // Next word in same line\n    const nextWord = currentLine.words[currentWordIndex + 1]\n    nextTiming = nextWord.startTime\n  } else {\n    // Find the next lyric line (skip metadata)\n    let nextLineIndex = currentLineIndex + 1\n    while (nextLineIndex < lyrics.length) {\n      const nextLine = lyrics[nextLineIndex]\n      if (!isMetadataLine(nextLine) && nextLine.words.length > 0) {\n        nextTiming = nextLine.words[0].startTime\n        break\n      }\n      nextLineIndex++\n    }\n  }\n\n  if (nextTiming) {\n    const currentTime = playbackState.value.currentTime\n    const timeToNext = nextTiming / 1000 - currentTime // Convert to seconds\n\n    // Use centralized timing rules for auto-timing behavior\n    const isLongBreak = TimingUtils.isPhraseBreak(timeToNext)\n\n    if (isLongBreak) {\n      // Use centralized phrase break spacing rules\n      const duration = timeToNext * TIMING.autoTiming.phraseBreakSpacing * 1000\n      return Math.max(TIMING.word.minDuration, Math.min(TIMING.autoTiming.maxPhraseBreakDuration, duration))\n    } else {\n      // Use centralized normal word spacing rules\n      const duration = timeToNext * TIMING.autoTiming.normalWordSpacing * 1000\n      return Math.max(TIMING.word.minDuration, Math.min(TIMING.autoTiming.maxNormalDuration, duration))\n    }\n  }\n\n  // Fallback durations based on word length\n  const currentWord = currentLine.words[currentWordIndex]\n  if (currentWord) {\n    const wordLength = currentWord.word.length\n    return Math.max(200, wordLength * 80) // ~80ms per character, min 200ms\n  }\n\n  return 500 // Default fallback\n}\n\nconst assignTiming = () => {\n  console.log('🎯 assignTiming called', {\n    hasProject: !!project.value,\n    isTimingMode: isTimingMode.value,\n    isPlaying: playbackState.value.isPlaying,\n    currentLine: currentLine.value,\n    currentWord: currentWordIndex.value,\n    currentTime: playbackState.value.currentTime\n  })\n\n  if (!project.value || !isTimingMode.value) {\n    console.log('❌ assignTiming aborted: missing project or not in timing mode')\n    return\n  }\n\n  if (!playbackState.value.isPlaying) {\n    console.log('❌ assignTiming aborted: audio not playing')\n    return\n  }\n\n  const lineIndex = currentLine.value\n  const wordIndex = currentWordIndex.value\n  const currentTime = playbackState.value.currentTime\n\n  if (lineIndex >= project.value.lyrics.length) {\n    console.log('❌ assignTiming aborted: invalid line index')\n    return\n  }\n\n  const targetLine = project.value.lyrics[lineIndex]\n  if (!targetLine || !targetLine.words || wordIndex >= targetLine.words.length) {\n    console.log('❌ assignTiming aborted: invalid word index')\n    return\n  }\n\n  // Calculate smart duration\n  const smartDuration = calculateSmartDuration(lineIndex, wordIndex)\n\n  // Assign timing to current word using spacebar with smart duration\n  project.value.lyrics = assignWordTiming(project.value.lyrics, lineIndex, wordIndex, currentTime, smartDuration)\n\n  console.log('✅ Smart timing assigned:', {\n    word: project.value.lyrics[lineIndex].words[wordIndex].word,\n    startTime: currentTime,\n    duration: smartDuration,\n    calculation: smartDuration > 400 ? 'phrase-break' : 'normal-spacing',\n  })\n\n  // Move to next word/line\n  moveToNextWord()\n}\n\nconst moveToNextWord = () => {\n  if (!project.value) return\n\n  const currentLyricLine = project.value.lyrics[currentLine.value]\n  if (!currentLyricLine) return\n\n  // Store current position before moving\n  const prevLineIndex = currentLine.value\n  const prevWordIndex = currentWordIndex.value\n\n  if (currentWordIndex.value < currentLyricLine.words.length - 1) {\n    // Move to next word in same line\n    currentWordIndex.value++\n  } else {\n    // Find the next line that has words (skip metadata lines)\n    let nextLineIndex = currentLine.value + 1\n    while (nextLineIndex < project.value.lyrics.length) {\n      const nextLine = project.value.lyrics[nextLineIndex]\n      // Skip metadata lines (they have no words for timing)\n      if (nextLine.words && nextLine.words.length > 0) {\n        currentLine.value = nextLineIndex\n        currentWordIndex.value = 0\n        break\n      }\n      nextLineIndex++\n    }\n  }\n\n  // Now that we know the next word position, finalize syllable timing for the previous word\n  const actuallyMoved = (currentLine.value !== prevLineIndex || currentWordIndex.value !== prevWordIndex)\n  if (actuallyMoved && project.value) {\n    // We moved to a new position, so finalize the previous word's syllables\n    project.value.lyrics = finalizePendingSyllableTiming(project.value.lyrics, prevLineIndex, prevWordIndex)\n  } else if (!actuallyMoved && project.value) {\n    // We didn't move (reached the end), so finalize the current word's syllables\n    const currentWord = project.value.lyrics[prevLineIndex]?.words?.[prevWordIndex]\n    if (currentWord && currentWord.startTime !== undefined && currentWord.syllables && currentWord.syllables.length > 0) {\n      project.value.lyrics = finalizePendingSyllableTiming(project.value.lyrics, prevLineIndex, prevWordIndex)\n      console.log('🏁 Finalized syllables for final word:', currentWord.word)\n    }\n  }\n}\n\nconst updateLyricsPosition = (lineIndex: number, time: number) => {\n  if (!project.value) return\n\n  const lyric = project.value.lyrics[lineIndex]\n  if (lyric) {\n    lyric.startTime = time\n  }\n}\n\nconst saveProject = () => {\n  if (!project.value) return\n\n  project.value.updatedAt = new Date()\n  saveProjectsToStorage()\n\n  // Show save confirmation\n  // TODO: Could add a toast notification here\n  console.log('Project saved:', project.value.name)\n}\n\nconst loadProject = async (projectId: string) => {\n  // Load projects from storage\n  const stored = localStorage.getItem('karaokeProjects')\n  if (!stored) {\n    console.warn('No projects found in storage, redirecting to compose page')\n    alert('⚠️ No projects found. Redirecting to the compose page.')\n    router.push('/compose')\n    return\n  }\n\n  try {\n    const projects = JSON.parse(stored)\n    const foundProject = projects.find((p: any) => p.id === projectId)\n\n    if (!foundProject) {\n      console.warn(`Project ${projectId} not found, redirecting to compose page`)\n      alert('⚠️ Project not found. It may have been deleted. Redirecting to the compose page.')\n      router.push('/compose')\n      return\n    }\n\n    // Restore project structure\n    const restoredProject: KaraokeProject = {\n      ...foundProject,\n      createdAt: new Date(foundProject.createdAt),\n      updatedAt: new Date(foundProject.updatedAt),\n      audioFile: {\n        ...foundProject.audioFile,\n        file: null, // Will be restored from storage if needed\n      },\n    }\n\n    project.value = restoredProject\n\n    // Try to load project audio, redirect if it fails\n    const audioLoadSuccess = await loadProjectAudio(restoredProject)\n    if (!audioLoadSuccess) {\n      console.warn(`Failed to load audio for project ${projectId}, redirecting to compose page`)\n      alert(\n        '⚠️ Could not load the audio file for this project. Please check if the file still exists or try re-importing it. Redirecting to the compose page.'\n      )\n      router.push('/compose')\n      return\n    }\n\n    // Initialize currentLine to the first lyric line (skip metadata lines)\n    currentLine.value = findNextLyricLine(0)\n    currentWordIndex.value = 0\n\n    loading.value = false\n  } catch (error) {\n    console.error('Error loading project:', error)\n    alert(`⚠️ Error loading project: ${error}. Redirecting to the compose page.`)\n    router.push('/compose')\n  }\n}\n\nconst loadProjectAudio = async (proj: KaraokeProject): Promise<boolean> => {\n  if (!proj.audioFile) {\n    console.error('No audio file in project')\n    return false\n  }\n\n  console.log('🔄 Loading project audio:', {\n    projectName: proj.name,\n    audioFileName: proj.audioFile.name,\n    hasFile: !!proj.audioFile.file,\n    hasStoredData: !!proj.audioFile.storedData,\n    storageType: proj.audioFile.storedData?.storageType,\n    duration: proj.audioFile.duration,\n  })\n\n  try {\n    let audioFile = proj.audioFile\n\n    // If we have stored data but no file object, try to retrieve it\n    if (!audioFile.file && audioFile.storedData) {\n      console.log('Retrieving stored audio file...')\n      const retrievedFile = await audioStorageService.retrieveAudioFile(audioFile.storedData)\n\n      if (retrievedFile) {\n        audioFile = {\n          ...audioFile,\n          ...retrievedFile,\n        }\n        proj.audioFile = audioFile\n        console.log('✅ Audio file retrieved successfully')\n      } else {\n        console.error('Failed to retrieve audio file')\n        return false\n      }\n    }\n\n    let success = false\n    let retries = 3\n\n    // Retry logic for audio loading\n    while (!success && retries > 0) {\n      try {\n        console.log(`Attempting to load audio (${4 - retries}/3)...`)\n        success = await audioService.loadAudioFile(audioFile)\n\n        if (success) {\n          const state = audioService.getPlaybackState()\n          playbackState.value = { ...state }\n\n          // Store the detected duration in the project for future use\n          if (!proj.audioFile.duration || proj.audioFile.duration !== state.duration) {\n            console.log('💾 Storing detected audio duration:', state.duration / 1000, 'seconds')\n            proj.audioFile.duration = state.duration\n            proj.updatedAt = new Date()\n            saveProjectsToStorage()\n          }\n\n          // Generate waveform data if needed\n          if (!waveformData.value) {\n            const peaks = await audioService.generateWaveformData(1000)\n            if (peaks) {\n              waveformData.value = {\n                peaks,\n                sampleRate: 44100,\n                duration: state.duration,\n                channels: 1,\n              }\n            }\n          }\n          console.log('✅ Audio loaded successfully')\n          break\n        } else {\n          retries--\n          if (retries > 0) {\n            console.warn(`Audio loading failed, retrying... (${retries} attempts left)`)\n            await new Promise(resolve => setTimeout(resolve, 1000)) // Wait 1 second\n          }\n        }\n      } catch (loadError) {\n        console.error('Audio loading attempt failed:', loadError)\n        retries--\n        if (retries > 0) {\n          await new Promise(resolve => setTimeout(resolve, 1000))\n        }\n      }\n    }\n\n    if (!success) {\n      console.error('Failed to load audio after multiple attempts')\n      return false\n    }\n\n    return true\n  } catch (error) {\n    console.error('Error loading project audio:', error)\n    return false\n  }\n}\n\nconst saveProjectsToStorage = () => {\n  if (!project.value) return\n\n  try {\n    const stored = localStorage.getItem('karaokeProjects')\n    const projects = stored ? JSON.parse(stored) : []\n\n    // Find and update the project\n    const projectIndex = projects.findIndex((p: any) => p.id === project.value!.id)\n    if (projectIndex !== -1) {\n      // Create serializable version\n      const serializableProject = {\n        ...project.value,\n        audioFile: {\n          ...project.value.audioFile,\n          file: null, // Remove File object\n          url: undefined, // Remove blob URL\n        },\n      }\n\n      projects[projectIndex] = serializableProject\n      localStorage.setItem('karaokeProjects', JSON.stringify(projects))\n      console.log('💾 Project saved to storage')\n    }\n  } catch (error) {\n    console.error('Error saving project:', error)\n  }\n}\n\n// Setup audio service listeners\nconst setupAudioListeners = () => {\n  let lastTime = 0\n\n  audioService.onTimeUpdate(time => {\n    playbackState.value.currentTime = time\n\n    // Detect reset to beginning (time jumped from high to low)\n    if (lastTime > 5000 && time < 1000) {\n      // Audio was reset to beginning, reset lyrics position too\n      currentLine.value = findNextLyricLine(0)\n      currentWordIndex.value = 0\n      console.log('🔄 Audio reset detected, resetting to first lyric line')\n    }\n    lastTime = time\n\n    // Update current position based on timing - but NOT when in timing mode\n    // In timing mode, we want manual word-by-word control, not automatic syllable tracking\n    if (project.value && playbackState.value.isPlaying && !isTimingMode.value) {\n      const position = getCurrentPosition(project.value.lyrics, time)\n\n      // Only update if the position returned is actually a lyric line (not metadata)\n      const targetLine = project.value.lyrics[position.lineIndex]\n      if (targetLine && !isMetadataLine(targetLine)) {\n        currentLine.value = position.lineIndex\n        currentWordIndex.value = position.wordIndex\n      }\n\n      playbackState.value.currentWord = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n      }\n\n      playbackState.value.currentSyllable = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n        syllableIndex: position.syllableIndex,\n      }\n    } else if (project.value && playbackState.value.isPlaying && isTimingMode.value) {\n      // In timing mode, only update the playback state for preview purposes\n      // but don't interfere with manual currentLine/currentWord navigation\n      const position = getCurrentPosition(project.value.lyrics, time)\n\n      playbackState.value.currentWord = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n      }\n\n      playbackState.value.currentSyllable = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n        syllableIndex: position.syllableIndex,\n      }\n    }\n  })\n\n  audioService.onPlaybackStateChange(state => {\n    playbackState.value = { ...state }\n  })\n}\n\n// Global hotkey system\nconst setupGlobalHotkeys = () => {\n  const handleKeyDown = (event: KeyboardEvent) => {\n    // Ignore if user is typing in an input field\n    if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n      return\n    }\n\n    switch (event.code) {\n      case 'Space':\n        event.preventDefault()\n        if (isTimingMode.value) {\n          if (playbackState.value.isPlaying) {\n            // Only assign timing when audio is actually playing\n            assignTiming()\n          } else {\n            // Start playback if not playing\n            togglePlayPause()\n          }\n        } else {\n          togglePlayPause()\n        }\n        break\n\n      case 'NumpadEnter':\n      case 'Enter':\n        if (!event.ctrlKey && !event.metaKey) {\n          event.preventDefault()\n          togglePlayPause()\n        }\n        break\n\n      case 'Numpad0':\n      case 'NumpadDecimal':\n        event.preventDefault()\n        if (isTimingMode.value) {\n          assignTiming()\n        }\n        break\n\n      case 'NumpadAdd':\n        event.preventDefault()\n        skipForwardShort()\n        break\n\n      case 'NumpadSubtract':\n        event.preventDefault()\n        skipBackwardShort()\n        break\n\n      case 'KeyT':\n        event.preventDefault()\n        toggleTimingMode()\n        break\n\n      case 'Insert':\n        event.preventDefault()\n        toggleTimingMode()\n        break\n\n      case 'KeyP':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          togglePlayPause()\n        }\n        break\n\n      case 'KeyS':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          saveProject()\n        }\n        break\n\n      // Removed Ctrl+Q due to Firefox browser conflict - use Escape instead\n\n      case 'KeyL':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipBackward()\n        }\n        break\n\n      case 'KeyR':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipForward()\n        }\n        break\n\n      case 'Home':\n        event.preventDefault()\n        seekToStart()\n        break\n\n      case 'End':\n        event.preventDefault()\n        seekToEnd()\n        break\n\n      case 'ArrowLeft':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipBackward()\n        }\n        break\n\n      case 'ArrowRight':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipForward()\n        }\n        break\n\n      case 'KeyF':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          // Toggle fast refresh mode for smoother syllable boundary movement\n          audioService.toggleFastMode()\n          isFastMode.value = audioService.getFastMode()\n          console.log('🔄 Toggled fast refresh mode')\n        }\n        break\n\n      case 'Escape':\n        event.preventDefault()\n        if (showHotkeyModal.value) {\n          closeHotkeyModal()\n        } else if (isTimingMode.value) {\n          // Finalize any pending syllables before exiting timing mode\n          finalizeCurrentWordSyllables()\n          // Exit timing mode\n          isTimingMode.value = false\n        }\n        // Removed page exit on Escape - too easy to lose work accidentally\n        break\n    }\n  }\n\n  window.addEventListener('keydown', handleKeyDown)\n\n  return () => {\n    window.removeEventListener('keydown', handleKeyDown)\n  }\n}\n\n// Musical Timing Methods\nconst applyMusicalTiming = () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Musical timing: No project or lyrics available')\n    return\n  }\n\n  console.log('🎵 Applying musical timing to song...')\n\n  try {\n    // Apply musical timing to the entire song (modifies lyrics in-place)\n    const analysis = applyMusicalTimingToSong(project.value.lyrics)\n\n    // Update songAnalysis with the returned analysis\n    songAnalysis.value = analysis\n\n    console.log('✅ Musical timing applied successfully', analysis)\n\n  } catch (error) {\n    console.error('❌ Error applying musical timing:', error)\n  }\n}\n\nconst resetSyllableTiming = () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Reset timing: No project or lyrics available')\n    return\n  }\n\n  console.log('🔄 Resetting all syllable timing...')\n\n  try {\n    // Reset all syllable timing in the song\n    resetSongSyllableTiming(project.value.lyrics)\n\n    // Clear song analysis\n    songAnalysis.value = null\n\n    console.log('✅ Syllable timing reset successfully')\n\n  } catch (error) {\n    console.error('❌ Error resetting syllable timing:', error)\n  }\n}\n\n// Timing Analysis Methods\nconst analyzeCurrentTiming = () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Timing analysis: No project or lyrics available')\n    return\n  }\n\n  console.log('🔍 Analyzing timing overlaps...')\n\n  try {\n    const result = analyzeTimingOverlaps(project.value.lyrics)\n    timingAnalysis.value = result\n\n    console.log('✅ Timing analysis completed:', result.summary)\n\n    if (result.overlaps.length > 0) {\n      console.warn(`Found ${result.overlaps.length} timing overlaps:`)\n      result.overlaps.forEach((overlap, index) => {\n        console.warn(`  ${index + 1}. \"${overlap.word1.word}\" → \"${overlap.word2.word}\" (${overlap.overlapDuration}ms overlap)`)\n      })\n    }\n\n  } catch (error) {\n    console.error('❌ Error analyzing timing:', error)\n  }\n}\n\nconst fixCurrentOverlaps = async () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Fix overlaps: No project or lyrics available')\n    return\n  }\n\n  console.log('🔧 Fixing timing overlaps...')\n\n  try {\n    const result = fixTimingOverlaps(project.value.lyrics)\n\n    if (result.fixCount > 0) {\n      console.log(`✅ Fixed ${result.fixCount} timing overlaps:`)\n      result.details.forEach(detail => console.log(`  • ${detail}`))\n\n      // Save the project after fixing\n      await saveProject()\n\n      // Force visual refresh by incrementing the component key\n      visualRefreshKey.value++\n\n      // Wait for the component to re-render\n      await nextTick()\n\n      // Re-analyze to update the UI\n      analyzeCurrentTiming()\n\n      console.log('🔄 Visual refresh triggered after timing fix')\n    } else {\n      console.log('✅ No overlaps to fix!')\n    }\n\n  } catch (error) {\n    console.error('❌ Error fixing timing overlaps:', error)\n  }\n}\n\n// WordTimingEditor event handlers\nconst handleTimingEditorWordsUpdate = (updatedWords: any[]) => {\n  // console.log('🔄 WordTimingEditor words updated:', updatedWords.length)\n\n  if (!project.value?.lyrics) {\n    console.error('❌ No project lyrics to update')\n    return\n  }\n\n  // Map the updated words back to the lyrics data\n  // We need to handle the metadata offset here\n  const lyricsOnlyLines = project.value.lyrics.filter(line => !isMetadataLine(line))\n\n  updatedWords.forEach((updatedWord) => {\n    // Parse the word ID to get line and word indices\n    const match = updatedWord.id.match(/lyrics-(\\d+)-word-(\\d+)/)\n    if (match) {\n      const lyricsLineIndex = parseInt(match[1])\n      const wordIndex = parseInt(match[2])\n\n      if (lyricsLineIndex < lyricsOnlyLines.length) {\n        const lyricsLine = lyricsOnlyLines[lyricsLineIndex]\n        if (wordIndex < lyricsLine.words.length) {\n          const originalWord = lyricsLine.words[wordIndex]\n\n          // Store old values for smart syllable handling\n          const oldStartTime = originalWord.startTime || 0\n          const oldEndTime = originalWord.endTime || 0\n          const newStartTime = Math.round(updatedWord.startTime * 1000)\n          const newEndTime = Math.round(updatedWord.endTime * 1000)\n\n          // console.log(`🔧 Word update: \"${originalWord.word}\" from ${oldStartTime}ms-${oldEndTime}ms to ${newStartTime}ms-${newEndTime}ms`)\n\n          // Check if syllables have actually changed (s-break drag)\n          let syllablesChanged = false\n          if (updatedWord.syllables && originalWord.syllables &&\n            updatedWord.syllables.length === originalWord.syllables.length) {\n            // Compare syllable boundaries to detect s-break changes\n            syllablesChanged = updatedWord.syllables.some((syl: any, idx: number) => {\n              const origSyl = originalWord.syllables[idx]\n              const newSylStart = Math.round(syl.startTime * 1000)\n              const newSylEnd = Math.round(syl.endTime * 1000)\n              return Math.abs(newSylStart - (origSyl.startTime || 0)) > 1 ||\n                Math.abs(newSylEnd - (origSyl.endTime || 0)) > 1\n            })\n          }\n\n          // If syllables changed (s-break drag), use them directly\n          if (syllablesChanged && updatedWord.syllables) {\n            // Direct syllable update (s-break drag) - convert seconds to milliseconds\n            originalWord.syllables = updatedWord.syllables.map((syl: any) => ({\n              syllable: syl.text,\n              startTime: Math.round(syl.startTime * 1000),\n              endTime: Math.round(syl.endTime * 1000)\n            }))\n            originalWord.startTime = newStartTime\n            originalWord.endTime = newEndTime\n            originalWord.duration = newEndTime - newStartTime\n            // console.log(`  → Direct syllable update from s-break drag`)\n          } else if (originalWord.syllables && originalWord.syllables.length > 0) {\n            // Use RelativeSyllableTiming model for word-level timing changes (move/resize)\n            try {\n              // console.log(`🔍 Debug syllable data for \"${originalWord.word}\":`, originalWord.syllables)\n\n              // Create absolute syllables for conversion\n              const absoluteSyllables = originalWord.syllables.map(syl => ({\n                text: syl.syllable || '',\n                startTime: syl.startTime || 0,\n                endTime: syl.endTime || 0\n              }))\n\n              // Debug the absolute syllables data before conversion\n              // console.log(`🔍 Converting \"${originalWord.word}\" syllables:`, absoluteSyllables.map(s => `\"${s.text}\": ${s.startTime}-${s.endTime} (${s.endTime - s.startTime}ms)`))\n\n              // Create RelativeSyllableTiming instance from current word data\n              const timing = RelativeSyllableTiming.fromAbsoluteSyllables(\n                `word-${lyricsLineIndex}-${wordIndex}`,\n                originalWord.word,\n                oldStartTime,\n                oldEndTime,\n                absoluteSyllables\n              )\n\n              let updatedTiming: RelativeSyllableTiming\n\n              // Determine the type of change and apply appropriate operation\n              const startTimeChanged = Math.abs(newStartTime - oldStartTime) > 10\n              const endTimeChanged = Math.abs(newEndTime - oldEndTime) > 10\n\n              if (startTimeChanged && !endTimeChanged) {\n                // Moving word: use moveWord method to shift all syllables\n                updatedTiming = timing.moveWord(newStartTime)\n\n                // Apply the timing changes\n                const updatedWordData = updatedTiming.getWordData()\n                const updatedAbsoluteSyllables = updatedTiming.getAbsoluteSyllables()\n                originalWord.startTime = updatedWordData.startTime\n                originalWord.endTime = updatedWordData.endTime\n                originalWord.duration = originalWord.endTime - originalWord.startTime\n                originalWord.syllables = updatedAbsoluteSyllables.map(syl => ({\n                  syllable: syl.text,\n                  startTime: syl.startTime,\n                  endTime: syl.endTime,\n                  duration: syl.endTime - syl.startTime\n                }))\n                // console.log(`  → MOVE: \"${originalWord.word}\" moved to ${newStartTime}ms`)\n\n              } else if (endTimeChanged && !startTimeChanged) {\n                // Resizing word end: DON'T redistribute syllables, just update word boundary\n                // Keep syllables at their absolute positions (like test rig)\n                originalWord.endTime = newEndTime\n                originalWord.duration = newEndTime - (originalWord.startTime || 0)\n                // console.log(`  → RESIZE: \"${originalWord.word}\" end changed, syllables unchanged`)\n\n              } else if (startTimeChanged && endTimeChanged) {\n                // Both changed: move word (shifts syllables), then update end time\n                updatedTiming = timing.moveWord(newStartTime)\n\n                // Apply move, then adjust end time without redistributing syllables\n                const updatedAbsoluteSyllables = updatedTiming.getAbsoluteSyllables()\n                originalWord.startTime = newStartTime\n                originalWord.endTime = newEndTime\n                originalWord.duration = newEndTime - newStartTime\n                originalWord.syllables = updatedAbsoluteSyllables.map(syl => ({\n                  syllable: syl.text,\n                  startTime: syl.startTime,\n                  endTime: syl.endTime,\n                  duration: syl.endTime - syl.startTime\n                }))\n                // console.log(`  → MOVE & RESIZE: \"${originalWord.word}\" moved, syllables shifted, end changed`)\n\n              } else {\n                // No significant change - no updates needed\n              }\n\n              // console.log(`✅ Updated \"${originalWord.word}\" using RelativeSyllableTiming model`)\n\n            } catch (error) {\n              console.error(`❌ Error using RelativeSyllableTiming for \"${originalWord.word}\":`, error)\n\n              // Fallback: simple update without syllable model\n              originalWord.startTime = newStartTime\n              originalWord.endTime = newEndTime\n              originalWord.duration = originalWord.endTime - originalWord.startTime\n              // console.log(`  → Fallback: Basic timing update only`)\n            }\n          } else {\n            // No syllables: simple timing update\n            originalWord.startTime = newStartTime\n            originalWord.endTime = newEndTime\n            originalWord.duration = originalWord.endTime - originalWord.startTime\n            // console.log(`  → Simple timing update (no syllables)`)\n          }\n        }\n      }\n    }\n  })\n\n  // No auto-save: User controls when to save with Ctrl+S\n  // (Removed auto-save to prevent unwanted saves during experimentation)\n}\n\nconst handleWordSelect = (wordId: string | null) => {\n  console.log('🎯 Word selected:', wordId)\n  // Could be used for highlighting or focus management in the future\n}\n\n// Lifecycle\nonMounted(async () => {\n  const projectId = route.params.projectId as string\n  if (projectId) {\n    await loadProject(projectId)\n  } else {\n    loading.value = false\n  }\n\n  setupAudioListeners()\n\n  // Setup global hotkeys\n  const cleanupHotkeys = setupGlobalHotkeys()\n  cleanupGlobalHotkeys = cleanupHotkeys\n\n  // Focus the component so hotkeys work\n  setTimeout(() => {\n    if (timingViewRef.value) {\n      timingViewRef.value.focus()\n      console.log('TimingView focused for hotkey support')\n    }\n  }, 100)\n\n  // Setup viewport tracking\n  const updateViewportSize = () => {\n    viewportWidth.value = window.innerWidth\n    viewportHeight.value = window.innerHeight\n  }\n\n  window.addEventListener('resize', updateViewportSize)\n\n  // Store the cleanup function\n  const originalCleanup = cleanupGlobalHotkeys\n  cleanupGlobalHotkeys = () => {\n    if (originalCleanup) originalCleanup()\n    window.removeEventListener('resize', updateViewportSize)\n  }\n})\n\nonUnmounted(() => {\n  // Don't dispose the audio service - it should persist across routes\n  // Just pause any playing audio\n  audioService.pause()\n\n  // Cleanup global hotkeys\n  if (cleanupGlobalHotkeys) {\n    cleanupGlobalHotkeys()\n  }\n})\n</script>\n\n<style scoped>\n.timing-view {\n  outline: none !important;\n}\n\n.timing-view:focus,\n.timing-view:focus-visible {\n  outline: none !important;\n  box-shadow: none !important;\n}\n\n.modal.show {\n  display: block;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.timing-header {\n  border-radius: 0.5rem;\n  border: 1px solid #dee2e6;\n}\n\n.timing-editor {\n  min-height: 80vh;\n}\n\n.loading-screen,\n.error-screen {\n  min-height: 60vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.breadcrumb-item a {\n  color: #6c757d;\n}\n\n.breadcrumb-item a:hover {\n  color: #0d6efd;\n}\n\n.stat-item {\n  padding: 0.5rem;\n}\n\n.stat-number {\n  font-size: 1.25rem;\n  font-weight: bold;\n  color: #0d6efd;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n}\n\n/* Full-width layout without container constraints */\n.full-width-layout {\n  width: 100vw;\n  margin-left: calc(-50vw + 50%);\n  padding: 1rem 2rem;\n  min-height: 100vh;\n}\n\n/* Flexible layout that adapts to viewport */\n.flexible-layout {\n  display: flex;\n  gap: 1.5rem;\n  min-height: 80vh;\n  max-width: none;\n  /* Remove any max-width constraints */\n}\n\n.sidebar-column {\n  flex: 0 0 320px;\n  /* Fixed width sidebar that doesn't shrink */\n  min-width: 280px;\n  max-width: 400px;\n}\n\n.main-content-column {\n  flex: 1;\n  /* Takes all remaining space */\n  min-width: 0;\n  /* Allows content to shrink */\n}\n\n/* Responsive adjustments */\n@media (max-width: 1200px) {\n  .sidebar-column {\n    flex: 0 0 280px;\n    max-width: 320px;\n  }\n}\n\n@media (max-width: 768px) {\n  .flexible-layout {\n    flex-direction: column;\n  }\n\n  .sidebar-column {\n    flex: none;\n    width: 100%;\n    max-width: none;\n  }\n}\n\n/* Compact sidebar layout */\n.card-header h6 {\n  font-size: 0.9rem;\n  font-weight: 600;\n}\n\n.card-header small {\n  font-size: 0.75rem;\n}\n\n.btn-group-vertical .btn {\n  border-radius: 0.25rem !important;\n  margin-bottom: 0.25rem;\n}\n\n.btn-group-vertical .btn:last-child {\n  margin-bottom: 0;\n}\n\n/* Hotkey help formatting */\n</style>\n","import type { LyricLine, WordTiming } from '../types/karaoke'\n\nexport interface TimingOverlap {\n  word1: WordTiming & { lineIndex: number; wordIndex: number }\n  word2: WordTiming & { lineIndex: number; wordIndex: number }\n  overlapStart: number\n  overlapEnd: number\n  overlapDuration: number\n}\n\nexport interface TimingAnalysisResult {\n  overlaps: TimingOverlap[]\n  totalWords: number\n  timedWords: number\n  smallGaps: Array<{\n    word1: string\n    word2: string\n    gap: number\n  }>\n  sequenceViolations: Array<{\n    word1: string\n    word2: string\n    issue: string\n  }>\n  summary: string\n  hasIssues: boolean\n}\n\nexport function useTimingAnalysis() {\n\n  function analyzeTimingOverlaps(lyrics: LyricLine[]): TimingAnalysisResult {\n    const overlaps: TimingOverlap[] = []\n    const smallGaps: { word1: string; word2: string; gap: number }[] = []\n    const sequenceViolations: { word1: string; word2: string; issue: string }[] = []\n    let totalWords = 0\n    let timedWords = 0\n    const allWords: Array<WordTiming & { lineIndex: number; wordIndex: number }> = []\n\n    // Collect all words with their positions\n    lyrics.forEach((line, lineIndex) => {\n      line.words.forEach((word, wordIndex) => {\n        totalWords++\n        if (word.startTime !== undefined && word.endTime !== undefined) {\n          timedWords++\n          allWords.push({\n            ...word,\n            lineIndex,\n            wordIndex\n          })\n        }\n      })\n    })\n\n    if (timedWords === 0) {\n      return {\n        overlaps: [],\n        totalWords,\n        timedWords,\n        smallGaps: [],\n        sequenceViolations: [],\n        summary: 'No timed words found.',\n        hasIssues: false\n      }\n    }\n\n    // Check for sequence violations within each line BEFORE sorting\n    lyrics.forEach((line) => {\n      const lineWords = line.words.filter(w => w.startTime !== undefined && w.endTime !== undefined)\n      for (let i = 0; i < lineWords.length - 1; i++) {\n        const word1 = lineWords[i]\n        const word2 = lineWords[i + 1]\n\n        if (word1.startTime! > word2.startTime!) {\n          sequenceViolations.push({\n            word1: word1.word,\n            word2: word2.word,\n            issue: `\"${word1.word}\" starts at ${word1.startTime}ms but comes before \"${word2.word}\" at ${word2.startTime}ms`\n          })\n        }\n      }\n    })\n\n    // Sort words by start time for overlap analysis\n    allWords.sort((a, b) => (a.startTime || 0) - (b.startTime || 0))\n\n    // Check for overlaps\n    for (let i = 0; i < allWords.length - 1; i++) {\n      const word1 = allWords[i]\n      const word2 = allWords[i + 1]\n\n      if (word1.endTime! > word2.startTime!) {\n        const overlapStart = word2.startTime!\n        const overlapEnd = Math.min(word1.endTime!, word2.endTime!)\n        const overlapDuration = overlapEnd - overlapStart\n\n        overlaps.push({\n          word1,\n          word2,\n          overlapStart,\n          overlapEnd,\n          overlapDuration\n        })\n      }\n    }\n\n    // Check for small gaps\n    for (let i = 0; i < allWords.length - 1; i++) {\n      const word1 = allWords[i]\n      const word2 = allWords[i + 1]\n      const gap = word2.startTime! - word1.endTime!\n\n      if (gap >= 0 && gap < 50) {\n        smallGaps.push({\n          word1: word1.word,\n          word2: word2.word,\n          gap\n        })\n      }\n    }\n\n    const hasIssues = overlaps.length > 0 || smallGaps.length > 3 || sequenceViolations.length > 0\n    const totalIssues = overlaps.length + smallGaps.length + sequenceViolations.length\n\n    let summary = ''\n    if (sequenceViolations.length > 0) {\n      summary = `🚨 Critical: ${sequenceViolations.length} words out of sequence! This breaks timing order.`\n    } else if (overlaps.length === 0 && smallGaps.length <= 3) {\n      summary = `✅ Clean timing: ${timedWords} words, good spacing`\n    } else {\n      summary = `⚠️ Found ${totalIssues} spacing issues (${overlaps.length} overlaps, ${smallGaps.length} tight gaps) - may affect editing`\n    }\n\n    return {\n      overlaps,\n      totalWords,\n      timedWords,\n      smallGaps,\n      sequenceViolations,\n      summary,\n      hasIssues\n    }\n  }\n\n  function fixTimingOverlaps(lyrics: LyricLine[]): { fixCount: number; details: string[] } {\n    console.log('🔧 Starting timing overlap fix...')\n    const details: string[] = []\n    let fixCount = 0\n\n    // Process each line to collect and fix overlapping words\n    const allWords: Array<{ word: WordTiming; lineIndex: number; wordIndex: number }> = []\n\n    // Collect references to actual word objects (not copies)\n    lyrics.forEach((line, lineIndex) => {\n      line.words.forEach((word, wordIndex) => {\n        if (word.startTime !== undefined && word.endTime !== undefined) {\n          allWords.push({\n            word, // Reference to actual word object\n            lineIndex,\n            wordIndex\n          })\n        }\n      })\n    })\n\n    console.log(`🔍 Found ${allWords.length} timed words to check`)\n\n    // Sort by start time\n    allWords.sort((a, b) => (a.word.startTime || 0) - (b.word.startTime || 0))\n\n    // Fix overlaps AND words that are too close together\n    const minGap = 50 // Minimum 50ms gap for proper visual/interaction spacing\n\n    for (let i = 0; i < allWords.length - 1; i++) {\n      const wordRef1 = allWords[i]\n      const wordRef2 = allWords[i + 1]\n      const word1 = wordRef1.word\n      const word2 = wordRef2.word\n\n      const currentGap = word2.startTime! - word1.endTime!\n      const needsFix = currentGap < minGap\n\n      if (needsFix) {\n        const originalEnd = word1.endTime!\n        const newEnd = word2.startTime! - minGap\n\n        if (currentGap < 0) {\n          console.log(`🔧 Fixing overlap: \"${word1.word}\" (${originalEnd}ms) → \"${word2.word}\" (${word2.startTime}ms)`)\n        } else {\n          console.log(`🔧 Fixing tight spacing: \"${word1.word}\" → \"${word2.word}\" (${currentGap}ms gap → ${minGap}ms gap)`)\n        }\n        console.log(`   Adjusting \"${word1.word}\" end time: ${originalEnd}ms → ${newEnd}ms`)\n\n        word1.endTime = newEnd\n        word1.duration = word1.endTime - word1.startTime!\n\n        const actionType = currentGap < 0 ? 'overlap' : 'tight spacing'\n        details.push(`Fixed ${actionType} \"${word1.word}\": ${originalEnd}ms → ${word1.endTime}ms`)\n        fixCount++\n\n        // Fix syllable timing if present\n        if (word1.syllables && word1.syllables.length > 0) {\n          const wordDuration = word1.duration\n          let currentTime = word1.startTime!\n\n          word1.syllables.forEach((syllable) => {\n            const syllableDuration = wordDuration / word1.syllables.length\n            syllable.startTime = currentTime\n            syllable.endTime = currentTime + syllableDuration\n            syllable.duration = syllableDuration\n            currentTime = syllable.endTime\n          })\n          console.log(`   Updated ${word1.syllables.length} syllables for \"${word1.word}\"`)\n        }\n      }\n    } console.log(`✅ Fixed ${fixCount} overlaps`)\n    return {\n      fixCount,\n      details\n    }\n  }\n\n  return {\n    analyzeTimingOverlaps,\n    fixTimingOverlaps\n  }\n}\n"],"names":["audioService","audio","audioContext","source","analyser","gainNode","isInitialized","updateTimer","fastMode","playbackState","isPlaying","currentTime","duration","volume","playbackRate","isLoaded","timeUpdateCallback","playbackStateCallback","constructor","this","initializeAudioContext","state","AudioContext","createAnalyser","createGain","fftSize","connect","destination","console","log","resume","error","loadAudioFile","audioFile","pause","src","Audio","setupAudioEventListeners","file","url","URL","createObjectURL","Error","disconnect","createMediaElementSource","contextError","warn","Promise","resolve","reject","handleCanPlay","removeEventListener","handleError","addEventListener","load","detectAudioDuration","updatePlaybackState","play","startUpdateTimer","stopUpdateTimer","stop","seek","timeMs","setVolume","Math","max","min","gain","value","setPlaybackRate","rate","getPlaybackState","onTimeUpdate","callback","onPlaybackStateChange","setFastMode","enabled","hz","interval","toggleFastMode","getFastMode","clearInterval","TimingUtils","getPlaybackUpdateInterval","window","setInterval","currentTimeMs","getFrequencyData","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","getTimeDomainData","getByteTimeDomainData","generateWaveformData","samples","response","fetch","arrayBuffer","channelData","decodeAudioData","getChannelData","blockSize","floor","length","peaks","i","start","end","j","abs","push","isFinite","fileToArrayBuffer","audioBuffer","durationMs","dispose","close","detectRestPattern","currentWord","nextWordText","timeToNextWord","wordEndsWithComma","test","wordEndsWithPeriod","nextWordIsCapitalized","hasRest","restType","estimatedRestDuration","TIMING","musical","restDuration","period","comma","breath","distributeSyllablesMusically","word","wordStartTime","context","silent","preserveWordBoundaries","syllables","restPattern","availableTime","endTime","startTime","existingWordDuration","notePattern","syllableCount","estimatedBeatDuration","noteDurations","eighth","quarter","half","whole","type","closestNote","Array","fill","map","estimateNotePattern","forEach","syllable","index","note","applyMusicalTimingToSong","lyrics","options","preserveWordTiming","onlyProcessUntimedSyllables","analysis","totalWords","totalDuration","detectedRests","line","words","nextWord","gap","avgWordDuration","estimatedBPM","timingQuality","analyzeSongTiming","toFixed","bpm","timeSignature","some","s","wordDuration","conservativeTime","conservativeMultiplier","autoTiming","maxPhraseBreakDuration","props","__props","emit","__emit","editingLine","ref","lyricsContainer","editInput","completedTimings","computed","filter","lyric","isMetadataLyricLine","addLine","newLine","parseLyricsLine","Date","now","updatedLyrics","updateLineNumbers","nextTick","startEditing","isTimingMode","input","focus","select","finishEditing","parsedLine","text","lineNumber","id","cancelEditing","formatTime","seconds","toString","padStart","handleKeydown","event","code","preventDefault","currentLine","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_cache","class","_hoisted_4","onClick","title","_normalizeClass","_hoisted_5","_Fragment","_renderList","key","active","$event","selectLine","_hoisted_7","_toDisplayString","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","onBlur","onKeyup","placeholder","_vModelText","empty","trim","onDblclick","_hoisted_16","_createTextVNode","_hoisted_17","wordIndex","sylIndex","_hoisted_18","_hoisted_19","confirm","_","deleteLine","lineCount","clearTimingFromLine","clearTiming","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","isKaraokeMode","fontSize","lyricsDisplay","currentLyric","isCurrentLinePlaying","timedLines","completionPercentage","round","extractedMetadata","lyricsText","join","metadata","parseLyricsWithMetadata","songTitle","songAuthor","author","currentCaption","captionLines","activeCaption","captionLine","findIndex","caption","replace","slot1Content","slot2Content","slot3Content","futureLyricLines","slice","toggleKaraokeMode","setFontSize","size","isLinePlaying","getLineProgress","progress","getCleanText","isWordPast","isWordFuture","isSyllablePast","isSyllableFuture","watch","display","currentElement","querySelector","scrollIntoView","behavior","block","_hoisted_6","_hoisted_13","_hoisted_14","_hoisted_15","highlighted","currentSyllable","current","playing","_hoisted_20","_hoisted_21","style","_normalizeStyle","width","_hoisted_30","_hoisted_31","waveformContainer","waveformCanvas","isLoading","generatedWaveformData","zoomLevel","canvasWidth","canvasHeight","selectionStart","selectionEnd","isDragging","dragMarkerIndex","selectedMarkers","viewMode","windowDuration","windowStart","autoScroll","positionedLyrics","position","timeToPixel","timedLyricsCount","progressPercent","selectedDuration","pixelToTime","selectionStyle","left","timeMarks","marks","windowStartMs","windowDurationMs","windowEndMs","intervalMs","ceil","positionInWindow","time","label","pixel","seekToPosition","rect","getBoundingClientRect","x","clientX","startSelection","target","updateSelection","endSelection","setTimeout","zoomIn","drawWaveform","zoomOut","setViewMode","mode","updateWindowPosition","emitViewWindowChange","onWindowDurationChange","toggleAutoScroll","viewStart","viewEnd","halfWindow","seekToClick","currentTarget","seekTime","async","canvas","waveformData","ctx","getContext","clearRect","height","visiblePeaks","startIndex","startRatio","durationRatio","endIndex","fallbackEndIndex","barWidth","fillStyle","strokeStyle","stepSize","amplitude","scalingFactor","barHeight","y","actualBarWidth","fillRect","lineWidth","beginPath","moveTo","lineTo","stroke","timeX","endThreshold","updateCanvasSize","clientWidth","globalMax","sampleRate","channels","numberOfChannels","immediate","newTime","oldTime","isManualSeek","onMounted","role","disabled","onChange","cursor","_renderSlot","_ctx","$slots","onMousedown","onMousemove","onMouseup","currentLineIndex","includes","selectLyricMarker","stopPropagation","ctrlKey","metaKey","markerIndex","indexOf","splice","startDragMarker","handleMouseMove","handleMouseUp","document","mark","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","showAnalysis","showDiagnostics","hasTimedWords","timedWords","$emit","songAnalysis","timingAnalysis","hasIssues","summary","sequenceViolations","violation","word1","word2","issue","overlaps","overlap","lineIndex","overlapDuration","smallGaps","timingStats","totalLines","timedSyllables","totalSyllables","viewportWidth","currentBreakpoint","route","useRoute","router","useRouter","timingViewRef","project","loading","showHotkeyModal","currentWordIndex","visualRefreshKey","analyzeTimingOverlaps","fixTimingOverlaps","allWords","lineWords","w","sort","a","b","overlapStart","overlapEnd","totalIssues","details","fixCount","wordRef1","wordRef2","currentGap","originalEnd","newEnd","actionType","syllableDuration","viewWindowStart","viewWindowEnd","viewWindowMode","innerWidth","viewportHeight","innerHeight","cleanupGlobalHotkeys","isFastMode","getTimingStats","completionPercent","timingEditorWords","lyricsLineIndex","isMetadataLine","isArray","audioDuration","closeHotkeyModal","exitProject","history","back","handleViewWindowChange","findNextLyricLine","selectedLine","nextLyricIndex","findPrevLyricLine","firstWord","leadInTime","previousTimedLineIndex","previousTimedLine","nextLineIndex","updateLyrics","togglePlayPause","alert","seekAudio","skipBackward","skipForward","toggleTimingMode","ensureAudioReady","clearCurrentLineTiming","assignTiming","hasProject","targetLine","smartDuration","calculateSmartDuration","nextTiming","nextLine","timeToNext","isPhraseBreak","phraseBreakSpacing","minDuration","normalWordSpacing","maxNormalDuration","wordLength","assignWordTiming","calculation","moveToNextWord","currentLyricLine","prevLineIndex","prevWordIndex","actuallyMoved","finalizePendingSyllableTiming","updateLyricsPosition","saveProject","updatedAt","saveProjectsToStorage","name","loadProjectAudio","proj","projectName","audioFileName","hasFile","hasStoredData","storedData","storageType","retrievedFile","audioStorageService","retrieveAudioFile","success","retries","loadError","stored","localStorage","getItem","projects","JSON","parse","projectIndex","p","serializableProject","setItem","stringify","setupGlobalHotkeys","handleKeyDown","HTMLInputElement","HTMLTextAreaElement","skipForwardShort","skipBackwardShort","seekToEnd","finalizeCurrentWordSyllables","applyMusicalTiming","resetSyllableTiming","resetCount","resetSongSyllableTiming","analyzeCurrentTiming","result","fixCurrentOverlaps","detail","handleTimingEditorWordsUpdate","updatedWords","lyricsOnlyLines","updatedWord","match","parseInt","lyricsLine","originalWord","oldStartTime","oldEndTime","newStartTime","newEndTime","syllablesChanged","syl","idx","origSyl","newSylStart","newSylEnd","absoluteSyllables","timing","RelativeSyllableTiming","fromAbsoluteSyllables","updatedTiming","startTimeChanged","endTimeChanged","moveWord","updatedWordData","getWordData","updatedAbsoluteSyllables","getAbsoluteSyllables","handleWordSelect","wordId","projectId","params","foundProject","find","restoredProject","createdAt","loadProject","setupAudioListeners","lastTime","getCurrentPosition","syllableIndex","cleanupHotkeys","updateViewportSize","originalCleanup","onUnmounted","tabindex","artist","_createVNode","TimingControlsPanel","onToggleTimingMode","onClearTiming","onApplyMusicalTiming","onResetSyllableTiming","onAnalyzeTiming","onFixOverlaps","ProgressStats","ViewportIndicator","HotkeyHelp","LyricsEditor","onLineSelect","onLyricsUpdate","LyricsPreview","WaveformViewer","onSeek","onLyricsPosition","onPlayPause","onSkipBackward","onSkipForward","onViewWindowChange","_createBlock","WordTimingEditor","onSelectWord","_component_router_link","to","show"],"mappings":"28bAmba,MAAAA,EAAe,IA/arB,MACGC,MAAiC,KACjCC,aAAoC,KACpCC,OAA6C,KAC7CC,SAAgC,KAChCC,SAA4B,KAC5BC,eAAgB,EAGhBC,YAA6B,KAC7BC,UAAW,EAEXC,cAA+B,CACrCC,WAAW,EACXC,YAAa,EACbC,SAAU,EACVC,OAAQ,EACRC,aAAc,EACdC,UAAU,GAGJC,mBACAC,sBAERC,WAAAA,GACEC,KAAKC,wBACP,CAEA,4BAAcA,GACR,IAEED,KAAKjB,cAA4C,WAA5BiB,KAAKjB,aAAamB,QACzCF,KAAKjB,aAAe,KACpBiB,KAAKf,SAAW,KAChBe,KAAKd,SAAW,KAChBc,KAAKhB,OAAS,KACdgB,KAAKb,eAAgB,GAGlBa,KAAKjB,cAA4C,WAA5BiB,KAAKjB,aAAamB,QACrCF,KAAAjB,aAAe,IAAIoB,aACnBH,KAAAf,SAAWe,KAAKjB,aAAaqB,iBAC7BJ,KAAAd,SAAWc,KAAKjB,aAAasB,aAElCL,KAAKf,SAASqB,QAAU,KACxBN,KAAKf,SAASsB,QAAQP,KAAKjB,aAAayB,aACnCR,KAAAd,SAASqB,QAAQP,KAAKf,UAE3Be,KAAKb,eAAgB,EACrBsB,QAAQC,IAAI,2CAIkB,cAA5BV,KAAKjB,aAAamB,mBACTnB,aAAa4B,SACxBF,QAAQC,IAAI,gCAEPE,GACCH,QAAAG,MAAM,sCAAuCA,EACvD,CACF,CAEA,mBAAMC,CAAcC,GACd,IAgBF,cAdWb,yBAGPD,KAAKlB,QACPkB,KAAKlB,MAAMiC,QACXf,KAAKlB,MAAMkC,IAAM,IAGdhB,KAAAlB,MAAQ,IAAImC,MAGjBjB,KAAKkB,2BAGDJ,EAAUK,KAAM,CAClB,MAAMC,EAAMC,IAAIC,gBAAgBR,EAAUK,MAC1CnB,KAAKlB,MAAMkC,IAAMI,CAAA,KACnB,KAAWN,EAAUM,IAGb,MAAI,IAAAG,MAAM,iCAFXvB,KAAAlB,MAAMkC,IAAMF,EAAUM,GAG7B,CAGA,GAAIpB,KAAKb,eAAiBa,KAAKjB,cAAgBiB,KAAKd,SAC9C,IACEc,KAAKhB,QACPgB,KAAKhB,OAAOwC,aAEdxB,KAAKhB,OAASgB,KAAKjB,aAAa0C,yBAAyBzB,KAAKlB,OACzDkB,KAAAhB,OAAOuB,QAAQP,KAAKd,UACzBuB,QAAQC,IAAI,iDACLgB,GACCjB,QAAAkB,KAAK,gEAAiED,EAEhF,OAIQ,IAAAE,QAAc,CAACC,EAASC,KAChC,MAAMC,EAAgBA,KACf/B,KAAAlB,MAAOkD,oBAAoB,iBAAkBD,GAC7C/B,KAAAlB,MAAOkD,oBAAoB,QAASC,GACjCJ,KAGJI,EAAerB,IACdZ,KAAAlB,MAAOkD,oBAAoB,iBAAkBD,GAC7C/B,KAAAlB,MAAOkD,oBAAoB,QAASC,GACzCH,EAAOlB,IAGJZ,KAAAlB,MAAOoD,iBAAiB,iBAAkBH,GAC1C/B,KAAAlB,MAAOoD,iBAAiB,QAASD,GACtCjC,KAAKlB,MAAOqD,SAGdnC,KAAKV,cAAcM,UAAW,EAG9B,MAAMH,QAAiBO,KAAKoC,oBAAoBtB,GAIzC,OAHPd,KAAKV,cAAcG,SAAWA,EAC9BO,KAAKqC,+BAGEzB,GAIA,OAHCH,QAAAG,MAAM,6BAA8BA,GAC5CZ,KAAKV,cAAcM,UAAW,EAC9BI,KAAKqC,uBACE,CACT,CACF,CAEQnB,wBAAAA,GACDlB,KAAKlB,QAELkB,KAAAlB,MAAMoD,iBAAiB,aAAc,KACxClC,KAAKV,cAAcE,YAAwC,IAA1BQ,KAAKlB,MAAOU,YAC7CQ,KAAKqC,sBAEDrC,KAAKH,oBACFG,KAAAH,mBAAmBG,KAAKV,cAAcE,eAI1CQ,KAAAlB,MAAMoD,iBAAiB,OAAQ,KAClClC,KAAKV,cAAcC,WAAY,EAC/BS,KAAKqC,wBAGFrC,KAAAlB,MAAMoD,iBAAiB,QAAS,KACnClC,KAAKV,cAAcC,WAAY,EAC/BS,KAAKqC,wBAGFrC,KAAAlB,MAAMoD,iBAAiB,QAAS,KACnClC,KAAKV,cAAcC,WAAY,EAC/BS,KAAKV,cAAcE,YAAc,EACjCQ,KAAKqC,wBAGFrC,KAAAlB,MAAMoD,iBAAiB,iBAAkB,KAC5ClC,KAAKV,cAAcG,SAAkC,IAAvBO,KAAKlB,MAAOW,SAC1CO,KAAKqC,wBAET,CAEA,UAAMC,GACJ,GAAKtC,KAAKlB,OAAUkB,KAAKV,cAAcM,SAEnC,eAESK,yBAGPD,KAAKjB,cAA4C,cAA5BiB,KAAKjB,aAAamB,cACnCF,KAAKjB,aAAa4B,SACxBF,QAAQC,IAAI,6CAGRV,KAAKlB,MAAMwD,OACjBtC,KAAKV,cAAcC,WAAY,EAC/BS,KAAKuC,mBACLvC,KAAKqC,sBACL5B,QAAQC,IAAI,6CACLE,GAED,MADEH,QAAAG,MAAM,wBAAyBA,GACjCA,CACR,CACF,CAEAG,KAAAA,GACMf,KAAKlB,QACPkB,KAAKlB,MAAMiC,QACXf,KAAKwC,kBAET,CAEAC,IAAAA,GACMzC,KAAKlB,QACPkB,KAAKlB,MAAMiC,QACXf,KAAKlB,MAAMU,YAAc,EAE7B,CAEAkD,IAAAA,CAAKC,GACC3C,KAAKlB,OAASkB,KAAKV,cAAcM,WAC9BI,KAAAlB,MAAMU,YAAcmD,EAAS,IAGlC3C,KAAKV,cAAcE,YAAcmD,EACjC3C,KAAKqC,sBAGDrC,KAAKH,oBACPG,KAAKH,mBAAmB8C,GAG9B,CAEAC,SAAAA,CAAUlD,GACJM,KAAKlB,QACFkB,KAAAlB,MAAMY,OAASmD,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAGrD,IACvCM,KAAAV,cAAcI,OAASM,KAAKlB,MAAMY,QAGrCM,KAAKd,WACPc,KAAKd,SAAS8D,KAAKC,MAAQjD,KAAKV,cAAcI,QAGhDM,KAAKqC,qBACP,CAEAa,eAAAA,CAAgBC,GACVnD,KAAKlB,QACFkB,KAAAlB,MAAMa,aAAekD,KAAKC,IAAI,IAAMD,KAAKE,IAAI,EAAGI,IAChDnD,KAAAV,cAAcK,aAAeK,KAAKlB,MAAMa,cAG/CK,KAAKqC,qBACP,CAEAe,gBAAAA,GACS,MAAA,IAAKpD,KAAKV,cACnB,CAEA+D,YAAAA,CAAaC,GACXtD,KAAKH,mBAAqByD,CAC5B,CAEAC,qBAAAA,CAAsBD,GACpBtD,KAAKF,sBAAwBwD,CAC/B,CAGAE,WAAAA,CAAYC,GACVzD,KAAKX,SAAWoE,EACZzD,KAAKV,cAAcC,YACrBS,KAAKwC,kBACLxC,KAAKuC,oBAED,MAAAmB,EAAKD,EAAU,OAAS,MACxBE,EAAWF,EAAU,QAAU,SAC7BhD,QAAAC,IAAI,oBAAoBgD,MAAOC,kBAAyBF,EAAU,YAAc,gBAC1F,CAGAG,cAAAA,GACO5D,KAAAwD,aAAaxD,KAAKX,SACzB,CAGAwE,WAAAA,GACE,YAAYxE,QACd,CAEQkD,gBAAAA,GACFvC,KAAKZ,aACP0E,cAAc9D,KAAKZ,aAGrB,MAAMuE,EAAWI,EAAYC,0BAA0BhE,KAAKX,UACvDW,KAAAZ,YAAc6E,OAAOC,YAAY,KACpC,GAAIlE,KAAKlB,OAASkB,KAAKV,cAAcC,UAAW,CACxC,MAAA4E,EAAyC,IAAzBnE,KAAKlB,MAAMU,YACjCQ,KAAKV,cAAcE,YAAc2E,EAE7BnE,KAAKH,oBACPG,KAAKH,mBAAmBsE,EAE5B,GACCR,EACL,CAEQnB,eAAAA,GACFxC,KAAKZ,cACP0E,cAAc9D,KAAKZ,aACnBY,KAAKZ,YAAc,KAEvB,CAEQiD,mBAAAA,GACFrC,KAAKF,uBACPE,KAAKF,sBAAsB,IAAKE,KAAKV,eAEzC,CAGA8E,gBAAAA,GACE,IAAKpE,KAAKf,SAAiB,OAAA,KAE3B,MAAMoF,EAAY,IAAIC,WAAWtE,KAAKf,SAASsF,mBAExC,OADFvE,KAAAf,SAASuF,qBAAqBH,GAC5BA,CACT,CAGAI,iBAAAA,GACE,IAAKzE,KAAKf,SAAiB,OAAA,KAE3B,MAAMoF,EAAY,IAAIC,WAAWtE,KAAKf,SAASsF,mBAExC,OADFvE,KAAAf,SAASyF,sBAAsBL,GAC7BA,CACT,CAGA,0BAAMM,CAAqBC,EAAkB,KAC3C,IAAK5E,KAAKlB,QAAUkB,KAAKjB,aAAqB,OAAA,KAE1C,IAEF,MAAM8F,QAAiBC,MAAM9E,KAAKlB,MAAMkC,KAClC+D,QAAoBF,EAASE,cAG7BC,SAFyBhF,KAAAjB,aAAakG,gBAAgBF,IAE5BG,eAAe,GACzCC,EAAYtC,KAAKuC,MAAMJ,EAAYK,OAAST,GAC5CU,EAAkB,GAExB,IAAA,IAASC,EAAI,EAAGA,EAAIX,EAASW,IAAK,CAChC,MAAMC,EAAQD,EAAIJ,EACZM,EAAMD,EAAQL,EACpB,IAAIrC,EAAM,EAEV,IAAA,IAAS4C,EAAIF,EAAOE,EAAID,EAAKC,IACrB5C,EAAAD,KAAKC,IAAIA,EAAKD,KAAK8C,IAAIX,EAAYU,KAG3CJ,EAAMM,KAAK9C,EACb,CAEO,OAAAwC,QACA1E,GAEA,OADCH,QAAAG,MAAM,oCAAqCA,OAErD,CACF,CAEA,yBAAcwB,CAAoBtB,GAEhC,GAAIA,EAAUrB,UAAYqB,EAAUrB,SAAW,EAE7C,OADAgB,QAAQC,IAAI,2BAA4BI,EAAUrB,SAAW,IAAM,WAC5DqB,EAAUrB,SAIf,GAAAO,KAAKlB,OAAS+G,SAAS7F,KAAKlB,MAAMW,WAAaO,KAAKlB,MAAMW,SAAW,EAEhE,OADPgB,QAAQC,IAAI,gCAAiCV,KAAKlB,MAAMW,SAAU,WACrC,IAAtBO,KAAKlB,MAAMW,SAGpBgB,QAAQC,IAAI,uEAER,IAEF,MAAMqE,QAAyB/E,KAAA8F,kBAAkBhF,GAE7C,IAACd,KAAKjB,aACF,MAAI,IAAAwC,MAAM,gCAGlB,MAAMwE,aAAyBhH,aAAakG,gBAAgBF,GACtDiB,EAAoC,IAAvBD,EAAYtG,SAGxB,OADPgB,QAAQC,IAAI,0CAA2CqF,EAAYtG,SAAU,WACtEuG,QACApF,GAKA,OAJCH,QAAAG,MAAM,qCAAsCA,GAGpDH,QAAQkB,KAAK,uFACN,IACT,CACF,CAEA,uBAAcmE,CAAkBhF,GAC9B,GAAIA,EAAUK,KACL,aAAML,EAAUK,KAAK4D,cAC9B,GAAWjE,EAAUM,IAAK,CACxB,MAAMyD,QAAiBC,MAAMhE,EAAUM,KAChC,aAAMyD,EAASE,aAAY,CAE5B,MAAA,IAAIxD,MAAM,iCAEpB,CAEA0E,OAAAA,GACMjG,KAAKlB,QACPkB,KAAKlB,MAAMiC,QACXf,KAAKlB,MAAMkC,IAAM,IAGfhB,KAAKhB,QACPgB,KAAKhB,OAAOwC,aAGVxB,KAAKjB,cACPiB,KAAKjB,aAAamH,QAGpBlG,KAAKH,wBAAqB,EAC1BG,KAAKF,2BAAwB,CAC/B,GClZc,SAAAqG,EACdC,EACAC,EACAC,GAGM,MAAAC,EAAoB,QAAQC,KAAKJ,GACjCK,EAAqB,SAASD,KAAKJ,GACnCM,IAAwBL,GAAe,SAASG,KAAKH,GAE3D,OAAII,GAAsBC,EACjB,CACLC,SAAS,EACTC,SAAU,SACVC,sBAAuBC,EAAOC,QAAQC,aAAaC,QAInDV,EACK,CACLI,SAAS,EACTC,SAAU,QACVC,sBAAuBC,EAAOC,QAAQC,aAAaE,OAKnDZ,GAAkBA,EAAiB,IAC9B,CACLK,SAAS,EACTC,SAAU,SACVC,sBAAuBhE,KAAKE,IAAqB,GAAjBuD,EAAsBQ,EAAOC,QAAQC,aAAaG,SAI/E,CACLR,SAAS,EACTC,SAAU,SACVC,sBAAuB,EAE3B,CA2FgB,SAAAO,EACdC,EACAC,EACAhB,EACAD,EACAkB,EAAyB,CAAA,EACzBC,GAAS,EACTC,GAAyB,GAErB,GAA0B,IAA1BJ,EAAKK,UAAUrC,OAAc,OAGjC,MAAMsC,EAAcxB,EAAkBkB,EAAKA,KAAMhB,EAAcC,GAG3D,IAAAsB,EAAgBtB,EAAiBqB,EAAYd,sBAGjD,GAAIY,QAA2C,IAAjBJ,EAAKQ,cAA4C,IAAnBR,EAAKS,UAAyB,CAClF,MAAAC,EAAuBV,EAAKQ,QAAUR,EAAKS,UACjCF,EAAA/E,KAAKE,IAAI6E,EAAeG,GACxCtH,QAAQC,IAAI,oBAAoB2G,EAAKA,+BAA+BU,MACtE,CAGA,MAAMC,EA/GD,SACLC,EACAL,EACAL,EAAyB,CAAA,GAEnB,MAAAW,sBAAEA,EAAwB,KAAQX,EAGlCY,EAAgB,CACpBC,OAAQF,EAAwB,EAChCG,QAASH,EACTI,KAA8B,EAAxBJ,EACNK,MAA+B,EAAxBL,GAIT,GAAsB,IAAlBD,EAEE,OAAAL,EAAgBO,EAAcG,KACzB,CAAC,CACNE,KAAM,OAAQ/I,SAAU0I,EAAcG,OAE/BV,EAAgBO,EAAcE,QAChC,CAAC,CACNG,KAAM,UAAW/I,SAAU0I,EAAcE,UAGpC,CAAC,CACNG,KAAM,SAAU/I,SAAU0I,EAAcC,SAK9C,GAAsB,IAAlBH,EAGE,OADaL,EAAgB,EAClBO,EAAcE,QACpB,CACL,CACEG,KAAM,UAAW/I,SAAU0I,EAAcE,SAE3C,CACEG,KAAM,UAAW/I,SAAU0I,EAAcE,UAItC,CACL,CACEG,KAAM,SAAU/I,SAAU0I,EAAcC,QAE1C,CACEI,KAAM,UAAW/I,SAAU0I,EAAcE,UAMjD,GAAsB,IAAlBJ,EAEK,MAAA,CACL,CACEO,KAAM,SAAU/I,SAAU0I,EAAcC,QAE1C,CACEI,KAAM,SAAU/I,SAAU0I,EAAcC,QAE1C,CACEI,KAAM,UAAW/I,SAAU0I,EAAcE,UAM/C,MACMI,EADcb,EAAgBK,EACFE,EAAcE,QAAU,UAAY,SAEtE,OAAOK,MAAMT,GAAeU,KAAK,MAAMC,IAAI,KAAA,CACzCJ,KAAMC,EACNhJ,SAAU0I,EAAcM,KAE5B,CA+BsBI,CAAoBxB,EAAKK,UAAUrC,OAAQuC,EAAeL,GAG9E,IAAI/H,EAAc8H,EAClBD,EAAKK,UAAUoB,QAAQ,CAACC,EAAUC,KAChC,MAAMC,EAAOjB,EAAYgB,IAAUhB,EAAYA,EAAY3C,OAAS,GAEpE0D,EAASjB,UAAYtI,EACZuJ,EAAAlB,QAAUrI,EAAcyJ,EAAKxJ,SACtCsJ,EAAStJ,SAAWwJ,EAAKxJ,SAEzBD,EAAcuJ,EAASlB,UAIzBR,EAAKS,UAAYR,EACZG,EAKKhH,QAAAC,IAAI,sCAAsC2G,EAAKA,UAAUA,EAAKS,aAAaT,EAAKQ,YAJxFR,EAAKQ,QAAUrI,EACf6H,EAAK5H,SAAWD,EAAc8H,GAM3BE,GACH/G,QAAQC,IAAI,uBAAuB2G,EAAKA,cAAcA,EAAK5H,iBAAiB6G,iBACzEqB,EAAYhB,QAAU,KAAKgB,EAAYd,yCAA2C,IAEzF,CA8GO,SAASqC,EACdC,EACAC,EAII,IAEE,MAAAC,mBACJA,GAAqB,EAAAC,4BACrBA,GAA8B,GAC5BF,EAGEG,EA5DD,SAA2BJ,GAChC,IAAIK,EAAa,EACbC,EAAgB,EAChBC,EAAgB,EAEpB,IAAA,MAAWC,KAAQR,EACjB,IAAA,IAAS5D,EAAI,EAAGA,EAAIoE,EAAKC,MAAMvE,OAAQE,IAAK,CACpC,MAAA8B,EAAOsC,EAAKC,MAAMrE,GACxB,QAAuB,IAAnB8B,EAAKS,gBAA4C,IAAjBT,EAAKQ,QAAuB,CAC9D2B,IACiBC,GAAApC,EAAKQ,QAAUR,EAAKS,UAGrC,MAAM+B,EAAWF,EAAKC,MAAMrE,EAAI,GAC5B,QAAwB,IAAxBsE,GAAU/B,UAAyB,CAC/B,MAAAgC,EAAMD,EAAS/B,UAAYT,EAAKQ,QAClB1B,EAAkBkB,EAAKA,KAAMwC,EAASxC,KAAMyC,GAChDnD,SAAS+C,GAC3B,CACF,CACF,CAGF,MAAMK,EAAkBP,EAAa,EAAIC,EAAgBD,EAAa,IAChEQ,EAAeR,EAAa,EAAI,IAAQO,EAAkB,IAMhE,IAAIE,EAA+C,OAI5C,OAHHT,EAAa,IAAME,EAAgB,IAAmBO,EAAA,QACtDT,EAAa,IAAME,EAAgB,IAAmBO,EAAA,aAEnD,CACLT,aACAO,kBACAC,aAViBnH,KAAKC,IAAI,GAAID,KAAKE,IAAI,IAAKiH,IAW5CN,gBACAO,gBAEJ,CAmBmBC,CAAkBf,GACnC1I,QAAQC,IAAI,qBAAqB6I,EAASC,qBAAqBD,EAASS,aAAaG,QAAQ,WAAWZ,EAASG,wBAAwBH,EAASU,0BAElJ,MAAM1C,EAAyB,CAC7B6C,IAAKb,EAASS,aACdK,cAAe,CAAC,EAAG,GACnBnC,sBAAuB,IAAQqB,EAASS,cAI1C,IAAA,MAAWL,KAAQR,EACjB,IAAA,IAAS5D,EAAI,EAAGA,EAAIoE,EAAKC,MAAMvE,OAAQE,IAAK,CACpC,MAAA8B,EAAOsC,EAAKC,MAAMrE,GACpB,QAAmB,IAAnB8B,EAAKS,UAAyB,CAGhC,GAAIwB,GACgCjC,EAAKK,UAAU4C,KAAUC,QAAgB,IAAhBA,EAAEzC,WAC9B,CAC7BrH,QAAQC,IAAI,gBAAgB2G,EAAKA,uCACjC,QACF,CAGF,IAAIf,EAAiB,IACrB,MAAMuD,EAAWF,EAAKC,MAAMrE,EAAI,QACJ,IAAxBsE,GAAU/B,YACKxB,EAAAuD,EAAS/B,UAAYT,EAAKS,WAI7C,MAAMzB,EAAewD,GAAUxC,KAE3B,GAAAgC,QAAuC,IAAjBhC,EAAKQ,QAAuB,CAE9C,MAAA2C,EAAenD,EAAKQ,QAAUR,EAAKS,UACzCV,EAA6BC,EAAMA,EAAKS,UAAW0C,EAAcnE,EAAckB,GAAS,GAAO,EAAI,KAC9F,CAEC,MAAAkD,EAAmB5H,KAAKE,IAAIuD,EAAiBQ,EAAOC,QAAQ2D,uBAAwB5D,EAAO6D,WAAWC,wBAC5GxD,EAA6BC,EAAMA,EAAKS,UAAW2C,EAAkBpE,EAAckB,GAAS,GAAO,EACrG,CACF,CACF,CAGK,OAAAgC,CACT,4+BCxQA,MAAMsB,EAAQC,EAGRC,EAAOC,EAMPC,EAAcC,GAAM,GACpBC,EAAkBD,IAClBE,EAAYF,IAGZG,EAAmBC,EAAS,IACzBT,EAAM1B,OAAOoC,eAAoC,IAApBC,EAAM1D,WAAyBzC,QAI/DoG,EAAuBD,QACL,IAAfA,EAAMhD,MAAqC,WAAfgD,EAAMhD,KAQrCkD,EAAUA,KACR,MAAAC,EAAUC,EAAgB,GAAIf,EAAM1B,OAAO9D,OAAS,EAAG,QAAQwG,KAAKC,SAEpEC,EAAgB,IAAIlB,EAAM1B,OAAQwC,GACxCK,EAAkBD,GAClBhB,EAAK,gBAAiBgB,GAGtBE,EAAS,KACMC,EAAAH,EAAc1G,OAAS,MAYlC6G,EAAgBlD,IAChB6B,EAAMsB,eAEVlB,EAAYhI,MAAQ+F,EACpBiD,EAAS,KACD,MAAAG,EAAQhB,EAAUnI,QAAQ,GAC5BmJ,IACFA,EAAMC,QACND,EAAME,cAKNC,EAAgBA,KAEhB,GAAAtB,EAAYhI,OAAS,EAAG,CAC1B,MAAM8I,EAAgB,IAAIlB,EAAM1B,QAC1BQ,EAAOoC,EAAcd,EAAYhI,OACvC,GAAI0G,EAAM,CACR,MAAM6C,EAAaZ,EAAgBjC,EAAK8C,KAAM9C,EAAK+C,WAAY/C,EAAKgD,IAEpEH,EAAW1E,UAAY6B,EAAK7B,UAC5B0E,EAAW3E,QAAU8B,EAAK9B,QAC1B2E,EAAW/M,SAAWkK,EAAKlK,SACbsM,EAAAd,EAAYhI,OAASuJ,EACnCzB,EAAK,gBAAiBgB,EACxB,CACF,CACAd,EAAYhI,OAAQ,GAGhB2J,EAAgBA,KACpB3B,EAAYhI,OAAQ,GAmBhB+I,EAAqB7C,IAClBA,EAAAL,QAAQ,CAAC0C,EAAOxC,KACrBwC,EAAMkB,WAAa1D,EAAQ,KAIzB6D,EAAclK,IAClB,MAAMmK,EAAUjK,KAAKuC,MAAMzC,EAAS,KAG7B,MAAA,GAFSE,KAAKuC,MAAM0H,EAAU,QACZA,EAAU,IACGC,WAAWC,SAAS,EAAG,QAuBzDC,EAAiBC,IACjBrC,EAAMsB,eACW,UAAfe,EAAMC,KACRD,EAAME,iBAEkB,YAAfF,EAAMC,MACfD,EAAME,iBACFvC,EAAMwC,YAAc,GACjBtC,EAAA,cAAeF,EAAMwC,YAAc,IAElB,cAAfH,EAAMC,OACfD,EAAME,iBACFvC,EAAMwC,YAAcxC,EAAM1B,OAAO9D,OAAS,GACvC0F,EAAA,cAAeF,EAAMwC,YAAc,YAO1B,oBAAXpJ,QACFA,OAAA/B,iBAAiB,UAAW+K,WAjRnCK,IAAAC,EAuGM,MAvGNC,EAuGM,CAtGJC,EAqGM,MArGNC,EAqGM,CApGJD,EAWM,MAXNE,EAWM,CAVJC,EAAA,KAAAA,EAAA,GAAAH,EAAsC,KAAlC,CAAAI,MAAM,QAAO,oBAAgB,IACjCJ,EAQM,MARNK,EAQM,CAPJL,EAES,SAAA,CAFDI,MAAM,sCAAuCE,QAAOrC,EAASsC,MAAM,iCACzEP,EAA0B,IAAA,CAAvBI,MAAM,cAAY,MAAA,OAGvBJ,EAEO,OAAA,CAFDI,MAAKI,EAAA,CAAC,QAAgBnD,EAAYqB,aAAA,aAAA,oBACnCrB,EAAYqB,aAAA,cAAA,iBAAA,OAIrBsB,EA0EM,MA1ENS,EA0EM,CAzEJT,EAwEM,MAAA,CAxEDI,MAAM,2BAAuB,kBAAJ3C,IAAIC,KAChCmC,GAAA,GAAAC,EAiEMY,EAjEwB,KAAAC,EAAAtD,EAAA3B,OAAjB,CAAAqC,EAAOxC,SAApBuE,EAiEM,MAAA,CAjEiCc,IAAK7C,EAAMmB,GAAIkB,SAAM,aAAY,CAA+BS,OAAAtF,IAAU8B,EAAWuC,8BAAgD,IAApB7B,EAAM1D,wBAAoDgD,EAAYqB,aAA+B,gBAAAV,EAAoBD,MAK7QuC,QAAKQ,GA0HCvF,KAClB+B,EAAK,cAAe/B,IA3HDwF,CAAWxF,KAEpByE,EAEM,MAFNgB,GACKC,EAAAlD,EAAMkB,YAAU,GAIrBe,EAQM,MARNkB,GAQM,MAP6B,IAApBnD,EAAM1D,WAAnBwF,IAAAC,EAEQ,QAFRqB,GAEQF,EADH7B,EAAWrB,EAAM1D,YAAS,IAEb2D,EAAoBD,QAAtC+B,EAEQ,QAFRsB,GAAgE,gBAGhEtB,EAA8C,QAA9CuB,GAAiC,YAInCrB,EA6BM,MA7BNsB,GA6BM,CA5BS9D,EAAAhI,QAAgB+F,GAAUyC,EAAoBD,GAIzCP,EAAAhI,QAAgB+F,GAASyC,EAAoBD,UAA/D+B,EAGwD,QAAA,OAHe/E,KAAK,OAC1EqF,MAAM,+BAAwC,sBAAAU,GAAA/C,EAAMiB,KAAI8B,EAAGS,OAAMzC,EAChE0C,QAAK,GAAQ1C,EAAa,CAAA,YAAcK,EAAa,CAAA,4BAAM,YAAJ1B,IAAIE,EAC5D8D,YAAY,uDAFkC,CAAAC,EAAA3D,EAAMiB,aAGtDc,EAmBM,MAAA,OAnBMM,MAAKI,EAAA,CAAC,aAAY,CAAAmB,OACV5D,EAAMiB,KAAK4C,OAAI,gBAAqB5D,EAAoBD,MAD5C8D,WAAQf,GAAErC,EAAalD,KAG1CyC,EAAoBD,IAA/B8B,IAAAC,EAEM,MAFNgC,GAEM,aADJ9B,EAA8B,IAAA,CAA3BI,MAAM,kBAAgB,MAAA,IAAQ2B,EAAAd,EAAAlD,EAAMiB,MAAI,MAG7BjB,EAAM5B,MAAMvE,OAAM,GAAlCiI,IAAAC,EAUM,MAVNkC,GAUM,EATJnC,GAAA,GAAAC,EAQOY,SAR2B3C,EAAM5B,MAA1B,CAAAvC,EAAMqI,SAApBnC,EAQO,OAAA,CARyCc,IAAKqB,EAAW7B,SAAM,YAAW,CAA+C,eAAA7E,IAAU8B,EAAAuC,aAAeqC,IAAc5E,EAAW1E,8BAAuD,IAAnBiB,EAAKS,gBAIzNwF,GAAA,GAAAC,EAGOY,SAH8B9G,EAAKK,UAA5B,CAAAqB,EAAU4G,SAAxBpC,EAGO,OAAA,CAH+Cc,IAAKsB,EAAU9B,SAAM,gBAAe,CAAA,sBACrC,IAAvB9E,EAASjB,cAClC4G,EAAA3F,EAASA,UAAQ,+BAI1BwE,EAAsE,MAAtEqC,GAA+B,sDA1BjCrC,EAGsE,QAAA,OAHH/E,KAAK,OACtEqF,MAAM,+BAAwC,sBAAAU,GAAA/C,EAAMiB,KAAI8B,EAAGS,OAAMzC,EAChE0C,QAAK,GAAQ1C,EAAa,CAAA,YAAcK,EAAa,CAAA,4BAAM,YAAJ1B,IAAIE,EAC5D8D,YAAY,qEAFkC,CAAAC,EAAA3D,EAAMiB,UA8BxDgB,EASM,MATNoC,GASM,CARW/E,EAAYqB,2BAA3BoB,EAGS,SAAA,OAHoBM,MAAM,gCAAiCE,QAAKQ,GAwFnEvF,KACd,GAAA8G,QAAQ,8CAA+C,CACnD,MAAA/D,EAAgBlB,EAAM1B,OAAOoC,OAAO,CAACwE,EAAGxK,IAAMA,IAAMyD,GAC1DgD,EAAkBD,GAClBhB,EAAK,gBAAiBgB,EACxB,GA7FuFiE,CAAWhH,GACpFgF,MAAM,gCACNP,EAA4B,IAAA,CAAzBI,MAAM,gBAAc,MAAA,aAEX/C,EAAYqB,mBAAwB,IAApBX,EAAM1D,YAA4B2D,EAAoBD,QAApF+B,EAGS,SAAA,OAFPM,MAAM,iCAAkCE,QAAKQ,GA+HxCvF,KAEb,MAAAiH,EAAYpF,EAAM1B,OAAO9D,OAAS2D,EAKpC,GAAA8G,QAJ0B,IAAdG,EACZ,8BACA,kCAAkCA,EAAY,gGAE5B,CACpB,MAAMlE,EAAgBmE,EAAoBrF,EAAM1B,OAAQH,GACxD+B,EAAK,gBAAiBgB,EACxB,GAzI6DoE,CAAYnH,GAAQgF,MAAM,iCACzEP,EAAmC,IAAA,CAAhCI,MAAM,uBAAqB,MAAA,wCAMZ,IAAb/C,EAAA3B,OAAO9D,QAAlBiI,IAAAC,EAEM,MAFN6C,GAEM,IAAAxC,EAAA,KAAAA,EAAA,GAAA,CADJH,EAA0E,IAAvE,CAAAI,MAAM,cAAa,oDAAgD,yBAI5EJ,EAYM,MAZN4C,GAYM,CAXJ5C,EAUM,MAVN6C,GAUM,CATJ7C,EAGM,MAHN8C,GAGM,CAFJ9C,EACQ,QADR+C,GACQ9B,EADsB5D,EAAM3B,OAAC9D,QAAS,YAAYqJ,EAAArD,EAAApI,OAAmB,IAACyL,EAAG5D,SAAOzF,QAAS,UACjG,KAEFoI,EAIM,MAJNgD,GAIM,CAH4B3F,EAAYqB,cAA5CmB,IAAAC,EACQ,QADRmD,GACQ,IAAA9C,EAAA,KAAAA,EAAA,GAAA,GADsC,WAAO,GAAAH,EAAgB,WAAX,SAAK,KAAM,sCACrE,aACAF,EAAsE,QAAtEoD,GAAiC,+pCCwC7C,MAAM9F,EAAQC,EAGR8F,EAAgB1F,GAAI,GACpB2F,EAAW3F,EAAkC,UAC7C4F,EAAgB5F,IAGhB6F,EAAezF,EAAS,IACrBT,EAAM1B,OAAO0B,EAAMwC,cAAgB,MAKtC2D,EAAuB1F,EAAS,KACpC,IAAKyF,EAAa9N,YAA0C,IAAjC8N,EAAa9N,MAAM6E,UACrC,OAAA,EAGH,MAAAA,EAAYiJ,EAAa9N,MAAM6E,UAC/BD,EAAUkJ,EAAa9N,MAAM4E,SAAWC,GAAaiJ,EAAa9N,MAAMxD,UAAY,KAE1F,OAAOoL,EAAMrL,aAAesI,GAAa+C,EAAMrL,aAAeqI,IAG1DoJ,EAAa3F,EAAS,IACnBT,EAAM1B,OAAOoC,eAAoC,IAApBC,EAAM1D,WAAyBzC,QAG/D6L,EAAuB5F,EAAS,IACR,IAAxBT,EAAM1B,OAAO9D,OAAqB,EAC/BxC,KAAKsO,MAAOF,EAAWhO,MAAQ4H,EAAM1B,OAAO9D,OAAU,MAIzD+L,EAAoB9F,EAAS,KAE3B,MAAA+F,EAAaxG,EAAM1B,OAAOP,OAAYe,EAAK8C,MAAM6E,KAAK,OACtDC,SAAEA,GAAaC,EAAwBH,GACtC,OAAAE,IAGHE,EAAYnG,EAAS,IAClB8F,EAAkBnO,MAAM+K,OAAS,MAGpC0D,EAAapG,EAAS,IACnB8F,EAAkBnO,MAAM0O,QAAU,MAIrCC,EAAiBtG,EAAS,KAE9B,MAAMuG,EAAehH,EAAM1B,OAAOoC,OAAe5B,GAAc,YAAdA,EAAKnB,MAEtD,GAA4B,IAAxBqJ,EAAaxM,OAAqB,YAGtC,IAAIyM,EAAgB,KACpB,IAAA,IAASvM,EAAI,EAAGA,EAAIsM,EAAaxM,OAAQE,IAAK,CACtC,MAAAwM,EAAcF,EAAatM,GAI7B,KAHqBsF,EAAM1B,OAAO6I,aAAkBrI,EAAKgD,KAAOoF,EAAYpF,KAGxD9B,EAAMwC,aAG5B,MAFgByE,EAAAC,EAAYR,UAAUU,SAAWF,EAAYtF,KAAKyF,QAAQ,kBAAmB,IAAIA,QAAQ,MAAO,GAIpH,CAEO,OAAAJ,IAIHK,EAAe7G,EAAS,IAExBmG,EAAUxO,MACL,CACLuF,KAAM,QACNiE,KAAMgF,EAAUxO,OAGhB2O,EAAe3O,MACV,CACLuF,KAAM,UACNiE,KAAMmF,EAAe3O,OAGlB,CACLuF,KAAM,QACNiE,KAAM,KAIJ2F,EAAe9G,EAAS,IAExBoG,EAAWzO,MACN,CACLuF,KAAM,SACNiE,KAAMiF,EAAWzO,OAGjB2O,EAAe3O,OAAqC,UAA5BkP,EAAalP,MAAMuF,KACtC,CACLA,KAAM,UACNiE,KAAMmF,EAAe3O,OAGlB,CACLuF,KAAM,QACNiE,KAAM,KAIJ4F,EAAe/G,EAAS,IAExBsG,EAAe3O,OAAqC,UAA5BkP,EAAalP,MAAMuF,MAAgD,WAA5B4J,EAAanP,MAAMuF,KAC7E,CACLA,KAAM,UACNiE,KAAMmF,EAAe3O,OAGlB,CACLuF,KAAM,QACNiE,KAAM,KAKJ6F,EAAmBhH,EAAS,IACZT,EAAM1B,OAAOoJ,MAAM1H,EAAMwC,YAAc,GAE5B9B,OAAO5B,IAASA,EAAKnB,MAAsB,WAAdmB,EAAKnB,MAC/C+J,MAAM,EAAG,IAIvBC,EAAoBA,KACV5B,EAAA3N,OAAS2N,EAAc3N,OAGjCwP,EAAeC,IACnB7B,EAAS5N,MAAQyP,GAGbC,EAAiBnH,IACrB,QAAwB,IAApBA,EAAM1D,UAAgC,OAAA,EAE1C,MAAMA,EAAY0D,EAAM1D,UAClBD,EAAU2D,EAAM3D,SAAWC,GAAa0D,EAAM/L,UAAY,KAEhE,OAAOoL,EAAMrL,aAAesI,GAAa+C,EAAMrL,aAAeqI,GAG1D+K,EAAmBpH,IACvB,IAAKA,EAAM1D,YAAc0D,EAAM/L,SAAiB,OAAA,EAE1C,MACAoT,GADUhI,EAAMrL,YAAcgM,EAAM1D,WACd0D,EAAM/L,SAAY,IAE9C,OAAOoD,KAAKC,IAAI,EAAGD,KAAKE,IAAI,IAAK8P,KAG7BhG,EAAclK,IAClB,MAAMmK,EAAUjK,KAAKuC,MAAMzC,EAAS,KAG7B,MAAA,GAFSE,KAAKuC,MAAM0H,EAAU,QACZA,EAAU,IACGC,WAAWC,SAAS,EAAG,QAGzD8F,EAAgBtH,GAEhBA,EAAMhD,MAAuB,WAAfgD,EAAMhD,KACfgD,EAAMiB,KAIXjB,EAAM5B,OAAS4B,EAAM5B,MAAMvE,OAAS,EAC/BmG,EAAM5B,MAAMhB,IAAIvB,GAAQA,EAAKA,MAAMiK,KAAK,KAI1C9F,EAAMiB,MAAQ,GAGjBsG,EAAaA,CAACpJ,EAAiB+F,KAC7B,MAAArI,EAAOsC,EAAKC,MAAM8F,GACxB,QAAKrI,GAAMQ,SACJgD,EAAMrL,YAAc6H,EAAKQ,SAG5BmL,EAAeA,CAACrJ,EAAiB+F,KAC/B,MAAArI,EAAOsC,EAAKC,MAAM8F,GACxB,QAAKrI,GAAMS,WACJ+C,EAAMrL,YAAc6H,EAAKS,WAG5BmL,EAAkBlK,KACjBA,GAAUlB,SACRgD,EAAMrL,YAAcuJ,EAASlB,QAGhCqL,EAAoBnK,KACnBA,GAAUjB,WACR+C,EAAMrL,YAAcuJ,EAASjB,iBAItCqL,EACE,IAAMtI,EAAMwC,YACZ,KACOuD,EAAc3N,OACjBgJ,EAAS,KACP,MAAMmH,EAAUtC,EAAc7N,MAC9B,GAAImQ,EAAS,CACL,MAAAC,EAAiBD,EAAQE,cAAc,yBACzCD,GACFA,EAAeE,eAAe,CAC5BC,SAAU,SACVC,MAAO,UAGb,cAzWNnG,IAAAC,EAyHM,MAzHNC,GAyHM,CAxHJC,EAuHM,MAvHNC,GAuHM,CAtHJD,EAsBM,MAtBNE,GAsBM,CArBJC,EAAA,KAAAA,EAAA,GAAAH,EAAwC,KAApC,CAAAI,MAAM,QAAO,sBAAkB,IACnCJ,EAmBM,MAnBNK,GAmBM,CAlBJL,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,wCAAuC,CAAAK,OACjCsC,EAAa3N,SADsB8K,QAAOyE,EACzBxE,MAAM,wCACzCP,EAA6B,IAAA,CAA1BI,MAAM,iBAAe,MAAA,SAE1BJ,EAaM,MAbNS,GAaM,CAZJT,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,iCAAgC,CAAAK,OAA2B,UAARuC,EAAQ5N,SACtE8K,uBAAO0E,EAAW,WAAW,MAEhC,GACAhF,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,iCAAgC,CAAAK,OAA2B,WAARuC,EAAQ5N,SACtE8K,uBAAO0E,EAAW,YAAY,MAEjC,GACAhF,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,iCAAgC,CAAAK,OAA2B,UAARuC,EAAQ5N,SACtE8K,uBAAO0E,EAAW,WAAW,MAEhC,SAMNhF,EA4EM,MAAA,CA5EDI,MAAMI,EAAA,CAAA,8BAA+C,CAAA,QAAA4C,EAAA5N,wBAA8B2N,EAAa3N,YAC3E,IAAb6H,EAAA3B,OAAO9D,QAAlBiI,IAAAC,EAEM,MAFNmG,GAEM,IAAA9F,EAAA,KAAAA,EAAA,GAAA,CADJH,EAA8C,IAA3C,CAAAI,MAAM,cAAa,wBAAoB,aAE5CN,EAuEM,MAAA,OAvEMM,MAAM,yBAAqB,gBAAJ3C,IAAI4F,IAE1BF,EAAa3N,OAAxBqK,IAAAC,EA4CM,MA5CNkB,GA4CM,CA1CJhB,EAGM,MAHNkB,GAGM,CAFwB,UAAjBwD,EAAAlP,MAAauF,MAAxB8E,IAAAC,EAA6F,MAA7FqB,GAAmEF,EAAAyD,EAAAlP,MAAawJ,MAAI,IACnD,YAAjB0F,EAAAlP,MAAauF,MAA7B8E,IAAAC,EAAsG,MAAtGsB,GAA4EH,EAAAyD,EAAAlP,MAAawJ,MAAI,eAG/FgB,EAGM,MAHNqB,GAGM,CAFwB,WAAjBsD,EAAAnP,MAAauF,MAAxB8E,IAAAC,EAA+F,MAA/FwB,GAAqEL,EAAA0D,EAAAnP,MAAawJ,MAAI,IACrD,YAAjB2F,EAAAnP,MAAauF,MAA7B8E,IAAAC,EAAsG,MAAtGoG,GAA4EjF,EAAA0D,EAAAnP,MAAawJ,MAAI,eAG/FgB,EAEM,MAFNmG,GAEM,CADwB,YAAjBvB,EAAApP,MAAauF,MAAxB8E,IAAAC,EAAiG,MAAjGsG,GAAuEnF,EAAA2D,EAAApP,MAAawJ,MAAI,gBAI/EsE,EAAA9N,OAAkB8N,EAAY9N,MAACuF,MAAyB,WAAjBuI,EAAA9N,MAAauF,mBAA/D+E,EAmBM,MAAA,OAlBJM,MAAKI,EAAA,CAAC,uBAAsB,CAAA6F,YAAwB9C,EAAoB/N,WACxEwK,EAgBM,MAhBN8B,GAgBM,EAdJjC,GAAA,GAAAC,EAaOY,SAb2B4C,EAAY9N,MAAC2G,MAAjC,CAAAvC,EAAMqI,SAApBnC,EAaO,OAAA,CAbgDc,IAAKqB,EAAW7B,SAAM,eAAc,CAA6C,eAAA6B,IAAc5E,EAAW1E,wBAAiC2M,EAAWhC,EAAY9N,MAAEyM,iBAA6CsD,EAAajC,EAAY9N,MAAEyM,SAKjSpC,GAAA,GAAAC,EAMOY,SAN8B9G,EAAKK,UAA5B,CAAAqB,EAAU4G,SAAxBpC,EAMO,OAAA,CAN+Cc,IAAKsB,EAAU9B,SAAM,mBAAkB,CAAmD,mBAAA6B,IAAc5E,EAAA1E,aAAeuJ,IAAa7E,EAAeiJ,gBAAuC,gBAAAd,EAAelK,GAAkD,kBAAAmK,EAAiBnK,OAK7T2F,EAAA3F,EAASA,UAAQ,WACf6E,EAAA,KAAAA,EAAA,GAAA4B,EAAA,MACJ,MAAG,uBAMZ/B,EAIM,MAJNgC,GAIM,QAHJlC,EAEMY,EAAA,KAAAC,EAFekE,EAAgBrP,MAAzBuI,QAAZ+B,EAEM,MAAA,CAFkCc,IAAG,UAAY7C,EAAMmB,KAAMkB,MAAM,eACpEa,EAAAoE,EAAatH,IAAK,iBAM3B8B,IAAAC,EAqBM,MArBNqC,GAqBM,EApBJtC,GAAA,GAAAC,EAmBMY,EAnBwB,KAAAC,EAAAtD,EAAA3B,OAAjB,CAAAqC,EAAOxC,SAApBuE,EAmBM,MAAA,CAnBiCc,IAAK7C,EAAMmB,GAAIkB,SAAM,eAAc,CAAkCmG,QAAAhL,IAAU8B,EAAWuC,8BAAkD,IAApB7B,EAAM1D,oBAAiE,IAApB0D,EAAM1D,WAA2B0D,EAAM1D,UAAYgD,EAAWtL,wBAA4C,IAApBgM,EAAM1D,WAA2B0D,EAAM1D,UAAYgD,EAAWtL,YAAyByU,QAAAtB,EAAcnH,QAO3YiC,EAMM,MANNoC,GAMM,CALJpC,EAAuD,OAAvDyG,GAA6BxF,EAAAlD,EAAMkB,YAAU,GAC7Ce,EAAwD,OAAxD0G,GAA2BzF,EAAAoE,EAAatH,IAAK,QACb,IAApBA,EAAM1D,WAAlBwF,IAAAC,EAEO,OAFP6C,GAEO1B,EADF7B,EAAWrB,EAAM1D,YAAS,eAKtB6K,EAAcnH,IAAUA,EAAM/L,UAAzC6N,IAAAC,EAEM,MAFN8C,GAEM,CADJ5C,EAAiF,MAAA,CAA5EI,MAAM,eAAgBuG,MAAKC,EAAA,CAAAC,MAAW1B,EAAgBpH,GAAK,qDAM1EiC,EAeM,MAfN6C,GAeM,CAdJ7C,EAaM,MAbN8C,GAaM,CAZJ9C,EAKM,MALN+C,GAKM,CAJJ/C,EAGQ,QAHRgD,GAGQ,GAHkB,SACnB/B,EAAG5D,cAAkB,GAAA,SAAOA,EAAM3B,OAAC9D,QAAS,IACjD,GAAYyF,EAAWtL,YAAA,GAAvB8N,IAAAC,EAAoE,OAAvCmD,GAAA,MAAMhC,EAAA7B,EAAW/B,EAAWtL,cAAA,iBAG7DiO,EAKM,MALNkD,GAKM,CAJJlD,EAGQ,QAHR8G,GAGQ,CAFH/E,EAAAd,EAAAuC,EAAAhO,OAAa,IAACyL,EAAG5D,SAAOzF,QAAS,gBACpC,GAAY6L,EAAoBjO,MAAA,GAAhCqK,IAAAC,EAA0E,OAApCiH,GAAA,IAAI9F,EAAAwC,EAAAjO,OAAuB,KAAE,4yDCwEjF,MAAM4H,EAAQC,EAMRC,EAAOC,EAWPyJ,EAAoBvJ,IACpBwJ,EAAiBxJ,IACjByJ,EAAYzJ,GAAI,GAChB0J,EAAwB1J,EAAyB,MACjD2J,EAAY3J,EAAI,GAChB4J,EAAc5J,EAAI,KAClB6J,EAAe7J,EAAI,KACnB8J,EAAiB9J,EAAmB,MACpC+J,EAAe/J,EAAmB,MAClCgK,EAAahK,GAAI,GACjBiK,EAAkBjK,GAAM,GACxBkK,EAAkBlK,EAAc,IAGhCmK,EAAWnK,EAAuB,UAClCoK,EAAiBpK,EAAI,MACrBqK,EAAcrK,EAAI,GAClBsK,EAAatK,GAAI,GAGjBuK,EAAmBnK,EAAS,IACzBT,EAAM1B,OACVoC,OAAgBC,QAAoB,IAApBA,EAAM1D,WACtBc,IAAK4C,IAAW,IACZA,EACHkK,SAAUC,EAAYnK,EAAM1D,eAM5B8N,EAAmBtK,EAAS,IACzBT,EAAM1B,OAAOoC,OAAQ5B,QAAuC,IAAnBA,EAAK7B,WAAyBzC,QAI1EwQ,EAAkBvK,EAAS,IAC1BT,EAAMvL,eAAkBuL,EAAM/J,WAAWrB,SACvCoD,KAAKE,IAAK8H,EAAMrL,YAAcqL,EAAM/J,UAAUrB,SAAY,IAAK,KADP,GAI3DqW,EAAmBxK,EAAS,KAChC,GAA6B,OAAzB0J,EAAe/R,OAAyC,OAAvBgS,EAAahS,MAAgB,CAC1D,MAAA6E,EAAYiO,EAAYlT,KAAKE,IAAIiS,EAAe/R,MAAOgS,EAAahS,QAE1E,OADgB8S,EAAYlT,KAAKC,IAAIkS,EAAe/R,MAAOgS,EAAahS,QACvD6E,CACnB,CACO,OAAA,IAGHkO,EAAiB1K,EAAS,IACD,OAAzB0J,EAAe/R,OAAyC,OAAvBgS,EAAahS,MAGzC,CACLgT,KAHWpT,KAAKE,IAAIiS,EAAe/R,MAAOgS,EAAahS,OAG1C,KACbqR,MAHYzR,KAAK8C,IAAIsP,EAAahS,MAAQ+R,EAAe/R,OAG1C,MAGZ,IAGHiT,EAAY5K,EAAS,KACrB,IAACT,EAAM/J,WAAWrB,SAAU,MAAO,GAEvC,MAAM0W,EAAQ,GAEV,GAAmB,WAAnBd,EAASpS,MAAoB,CAE/B,MAAMmT,EAAgBvT,KAAKuC,MAAMmQ,EAAYtS,OACvCoT,EAAmBf,EAAerS,MAClCqT,EAAcF,EAAgBC,EAC9BE,EAAaF,EAAmB,IAAQ,IAAO,IAKrD,IAAA,IAAS1T,EAFWE,KAAK2T,KAAKJ,EAAgBG,GAAcA,EAE7B5T,GAAU2T,EAAa3T,GAAU4T,EAC9D,GAAI5T,GAAUyT,EAAe,CACrB,MAAAK,GAAoB9T,EAASyT,GAAiBC,EAGhDI,GAAoB,GAAKA,GAAoB,GAC/CN,EAAMvQ,KAAK,CACT8Q,KAAM/T,EACN+S,SAAUe,EAAmB3B,EAAY7R,MACzC0T,MAAO9J,GAAWlK,IAGxB,CACF,KACK,CAEC,MAAAlD,EAAWoL,EAAM/J,UAAUrB,SAC3BkE,EAAWlE,EAAW,IAAQ,IAAQ,IAE5C,IAAA,IAASiX,EAAO,EAAGA,GAAQjX,EAAUiX,GAAQ/S,EAC3CwS,EAAMvQ,KAAK,CACT8Q,OACAhB,SAAUC,EAAYe,GACtBC,MAAO9J,GAAW6J,IAGxB,CAEO,OAAAP,IAIHR,EAAehT,GACdkI,EAAM/J,WAAWrB,SACRkD,EAASkI,EAAM/J,UAAUrB,SACxBqV,EAAY7R,MAAQ4R,EAAU5R,QAGzC8S,EAAea,GACd/L,EAAM/J,WAAWrB,SACRmX,GAAS9B,EAAY7R,MAAQ4R,EAAU5R,OACtC4H,EAAM/J,UAAUrB,SAFQ,EAKnCoX,EAAkB3J,IACtB,GAAIgI,EAAWjS,MAAO,OAEhB,MAAA6T,EAAOpC,EAAezR,MAAO8T,wBAC7BC,EAAI9J,EAAM+J,QAAUH,EAAKb,KACzBS,EAAOX,EAAYiB,GACzBjM,EAAK,OAAQ2L,IAkDTQ,EAAkBhK,IAClB,GAAAA,EAAMiK,SAAWzC,EAAezR,MAAO,OAErC,MAAA6T,EAAOpC,EAAezR,MAAO8T,wBAC7BC,EAAI9J,EAAM+J,QAAUH,EAAKb,KAC/BjB,EAAe/R,MAAQ+T,EACvB/B,EAAahS,MAAQ+T,GAGjBI,EAAmBlK,IACvB,GAA6B,OAAzB8H,EAAe/R,MAAgB,OAE7B,MAAA6T,EAAOpC,EAAezR,MAAO8T,wBAC7BC,EAAI9J,EAAM+J,QAAUH,EAAKb,KAC/BhB,EAAahS,MAAQ+T,GAGjBK,EAAeA,KACnB,GAA6B,OAAzBrC,EAAe/R,OAAyC,OAAvBgS,EAAahS,MAAgB,CAC1D,MAAA6E,EAAYiO,EAAYlT,KAAKE,IAAIiS,EAAe/R,MAAOgS,EAAahS,QACpE4E,EAAUkO,EAAYlT,KAAKC,IAAIkS,EAAe/R,MAAOgS,EAAahS,QAEpEJ,KAAK8C,IAAIsP,EAAahS,MAAQ+R,EAAe/R,OAAS,GACnD8H,EAAA,YAAajD,EAAWD,EAEjC,CAGAyP,WAAW,KACTtC,EAAe/R,MAAQ,KACvBgS,EAAahS,MAAQ,MACpB,MAGCsU,EAASA,KACT1C,EAAU5R,MAAQ,IACpB4R,EAAU5R,OAAS,GACNuU,OAIXC,EAAUA,KACV5C,EAAU5R,MAAQ,IACpB4R,EAAU5R,OAAS,GACNuU,OAKXE,EAAeC,IACnBtC,EAASpS,MAAQ0U,EACJ,WAATA,IAEF9C,EAAU5R,MAAQ,EACG2U,MAEVJ,KACQK,MAGjBC,EAAyBA,KACRF,KACRJ,KACQK,MAGjBE,GAAmBA,KACZvC,EAAAvS,OAASuS,EAAWvS,OAI3B4U,GAAuBA,KACvB,GAAmB,WAAnBxC,EAASpS,MAAoB,CACzB,MAAA+U,EAAYzC,EAAYtS,MAAQ,IAChCgV,GAAW1C,EAAYtS,MAAQqS,EAAerS,OAAS,IACxD8H,EAAA,qBAAsBiN,EAAWC,EAAS,SAAQ,KAClD,CAEC,MAAAxY,EAAWoL,EAAM/J,WAAWrB,UAAY,IAC9CsL,EAAK,qBAAsB,EAAGtL,EAAW,IAAM,OACjD,GAGImY,GAAuBA,KACvB,GAAmB,WAAnBvC,EAASpS,MAAoB,CACzB,MAAAiV,EAAa5C,EAAerS,MAAQ,EAEtCuS,EAAWvS,OAAS4H,EAAMrL,YAAc,EACtCqL,EAAMrL,aAAe0Y,EAEvB3C,EAAYtS,MAAQ,EAGpBsS,EAAYtS,MAAQJ,KAAKC,IAAI,EAAG+H,EAAMrL,YAAc0Y,GAItD3C,EAAYtS,MAAQ,CAWxB,CAGqB4U,MAIjBM,GAAejL,IACf,IAACrC,EAAM/J,WAAWrB,SAAU,OAEhC,MACMqX,EADc5J,EAAMkL,cACDrB,wBAGnBsB,GAFSnL,EAAM+J,QAAUH,EAAKb,MACRa,EAAKxC,MACHzJ,EAAM/J,UAAUrB,SAE9CsL,EAAK,OAAQsN,IAGTb,GAAec,UACnB,MAAMC,EAAS7D,EAAezR,MACxBuV,EAAe3N,EAAM2N,cAAgB5D,EAAsB3R,MAC7D,IAACsV,IAAWC,EAAc,OAExB,MAAAC,EAAMF,EAAOG,WAAW,MAC9B,IAAKD,EAAK,OAGVA,EAAIE,UAAU,EAAG,EAAGJ,EAAOjE,MAAOiE,EAAOK,QAGnC,MAAAtT,MAAEA,GAAUkT,EACZlE,EAAQiE,EAAOjE,MACfsE,EAASL,EAAOK,OAGtB,IAAIC,EAAevT,EACfwT,EAAa,EAEb,GAAmB,WAAnBzD,EAASpS,MAAoB,CAE/B,MAAMwG,EAAgB+O,EAAa/Y,UAAYoL,EAAM/J,WAAWrB,UAAY,EACtEsZ,EAAaxD,EAAYtS,MAAQwG,EACjCuP,EAAgB1D,EAAerS,MAAQwG,EAE7CqP,EAAajW,KAAKuC,MAAM2T,EAAazT,EAAMD,QACrC,MAAA4T,EAAWpW,KAAKE,IAAIF,KAAKuC,OAAO2T,EAAaC,GAAiB1T,EAAMD,QAASC,EAAMD,QAmBrF,GAlBWwT,EAAAvT,EAAMiN,MAAMuG,EAAYG,GAkBX,IAAxBJ,EAAaxT,OAAc,CACvB,MAAA6T,EAAmBrW,KAAKE,IAAIF,KAAKuC,MAAqB,GAAfE,EAAMD,QAAeC,EAAMD,QACzDwT,EAAAvT,EAAMiN,MAAM,EAAG2G,EAGhC,CACF,CAEM,MAAAC,EAAW7E,EAAQuE,EAAaxT,OAGtCoT,EAAIW,UAAY,UAChBX,EAAIY,YAAc,UAGZ,MAAAC,EACe,WAAnBjE,EAASpS,MACLJ,KAAKC,IAAI,EAAGD,KAAK2T,KAAKqC,EAAaxT,QAAkB,EAARiP,KAC7CzR,KAAKC,IAAI,EAAGD,KAAK2T,KAAKqC,EAAaxT,QAAUiP,EAAQO,EAAU5R,MAAQ,KAE7E,IAAA,IAASsC,EAAI,EAAGA,EAAIsT,EAAaxT,OAAQE,GAAK+T,EAAU,CAEtD,MAAMC,EAAY1W,KAAK8C,IAAIkT,EAAatT,IAGlCiU,EAAgB,EAChBC,EAAY5W,KAAKE,IAAIwW,EAAYX,EAASY,EAAwB,IAATZ,GAEzD5B,EACe,WAAnB3B,EAASpS,MAAsBsC,EAAIsT,EAAaxT,OAAUiP,EAAS/O,EAAIsT,EAAaxT,OAAUiP,EAAQO,EAAU5R,MAC5GyW,EAAId,EAASa,EAGbE,EACe,WAAnBtE,EAASpS,MACLJ,KAAKC,IAAI,EAAIwR,EAAQuE,EAAaxT,OAAUiU,GAC5CzW,KAAKC,IAAI,EAAGqW,EAAWtE,EAAU5R,OAGnCwW,EAAY,GACdhB,EAAImB,SAAS5C,EAAG0C,EAAGC,EAAgBF,EAEvC,CAWI,GARJhB,EAAIY,YAAc,UAClBZ,EAAIoB,UAAY,EAChBpB,EAAIqB,YACArB,EAAAsB,OAAO,EAAGnB,EAAS,GACnBH,EAAAuB,OAAO1F,EAAOsE,EAAS,GAC3BH,EAAIwB,cAGsB,IAAtBpP,EAAMrL,YAA2B,CACnC,MAAMiK,EAAgB+O,EAAa/Y,UAAYoL,EAAM/J,WAAWrB,SAChE,GAAIgK,EAAe,CACb,IAAAyQ,EACA,GAAmB,WAAnB7E,EAASpS,MAAoB,CAEzB,MAAAiV,EAAa5C,EAAerS,MAAQ,EACpCkX,EAAe1Q,EAAgByO,EAI1BgC,EAFPrP,EAAMrL,aAAe0Y,EAEdrN,EAAMrL,YAAc8V,EAAerS,MAASqR,EAC5CzJ,EAAMrL,aAAe2a,EAItB7F,GAFc7K,EAAgBoB,EAAMrL,aACpB8V,EAAerS,MACaqR,EAG5CA,EAAQ,CAClB,MAEA4F,EAASrP,EAAMrL,YAAciK,EAAiB6K,EAAQO,EAAU5R,MAG9DiX,GAAS,GAAKA,GAAS5F,IACzBmE,EAAIY,YAAc,UAClBZ,EAAIoB,UAAY,EAChBpB,EAAIqB,YACArB,EAAAsB,OAAOG,EAAO,GACdzB,EAAAuB,OAAOE,EAAOtB,GAClBH,EAAIwB,SAER,CACF,GA4DIpN,GAAclK,IAClB,MAAMmK,EAAUjK,KAAKuC,MAAMzC,EAAS,KAG7B,MAAA,GAFSE,KAAKuC,MAAM0H,EAAU,QACZA,EAAU,IACGC,WAAWC,SAAS,EAAG,QAGzDoN,GAAmBA,KACnB3F,EAAkBxR,QACR6R,EAAA7R,MAAQwR,EAAkBxR,MAAMoX,YAAc,YAK9DlH,EACE,IAAMtI,EAAM/J,UACZ,KACM+J,EAAM/J,WAAWK,MA1EImX,WACvB,GAACzN,EAAM/J,WAAWK,KAAlB,CAEJwT,EAAU1R,OAAQ,EAEd,IACI,MAAAlE,EAAe,IAAIoB,aACnB4E,QAAoB8F,EAAM/J,UAAUK,KAAK4D,cACzCgB,QAAoBhH,EAAakG,gBAAgBF,GAEjDC,EAAce,EAAYb,eAAe,GACzCN,EAAU,IACVO,EAAYtC,KAAKuC,MAAMJ,EAAYK,OAAST,GAC5CU,EAAQ,GAGd,IAAIgV,EAAY,EAChB,IAAA,IAAS/U,EAAI,EAAGA,EAAIP,EAAYK,OAAQE,IAC1B+U,EAAAzX,KAAKC,IAAIwX,EAAWzX,KAAK8C,IAAIX,EAAYO,KAGvD,IAAA,IAASA,EAAI,EAAGA,EAAIX,EAASW,IAAK,CAChC,MAAMC,EAAQD,EAAIJ,EACZM,EAAMD,EAAQL,EACpB,IAAIrC,EAAM,EAEV,IAAA,IAAS4C,EAAIF,EAAOE,EAAID,EAAKC,IACrB5C,EAAAD,KAAKC,IAAIA,EAAKD,KAAK8C,IAAIX,EAAYU,KAI3CJ,EAAMM,KAAK0U,EAAY,EAAIxX,EAAMwX,EAAY,EAC/C,CAGA1F,EAAsB3R,MAAQ,CAC5BqC,QACAiV,WAAYxU,EAAYwU,WACxB9a,SAAUsG,EAAYtG,SACtB+a,SAAUzU,EAAY0U,kBAID,WAAnBpF,EAASpS,OACU2U,KAGvB3L,EAAS,KACMuL,aAER5W,GACCH,QAAAG,MAAM,6BAA8BA,EAAK,CACjD,QACA+T,EAAU1R,OAAQ,CACpB,CArD4B,GA0EH0B,IAGzB,CAAE+V,WAAW,IAGfvH,EACE,IAAMtI,EAAM2N,aACZ,KACM3N,EAAM2N,cACRvM,EAAS,KACMuL,SAMrBrE,EACE,IAAMyB,EAAsB3R,MAC5B,KACM2R,EAAsB3R,OACxBgJ,EAAS,KACMuL,SAMrBrE,EACE,IAAMtI,EAAMrL,YACZ,CAACmb,EAASC,KAER,GAAuB,WAAnBvF,EAASpS,YAAkC,IAAZ0X,GAAyB9P,EAAM/J,WAAWrB,SAAU,CAC/E,MAAAyY,EAAa5C,EAAerS,MAAQ,EAGpC4X,OAA2B,IAAZD,GAAyB/X,KAAK8C,IAAIgV,EAAUC,GAAW,IAGxE,GAAApF,EAAWvS,OAAS4X,EAAc,CAC9B,MAAAV,EAAetP,EAAM/J,UAAUrB,SAAWyY,EAI9C3C,EAAYtS,MAFV0X,GAAWzC,EAEO,EACXyC,GAAWR,EAEAtX,KAAKC,IAAI,EAAG+H,EAAM/J,UAAUrB,SAAW6V,EAAerS,OAGtDJ,KAAKC,IAAI,EAAGD,KAAKE,IAAI4X,EAAUzC,EAAYrN,EAAM/J,UAAUrB,SAAW6V,EAAerS,QAgBtF4U,IACvB,CACF,CAEA5L,EAAS,KACMuL,SAMnBsD,EAAU,KACSV,KACVnW,OAAA/B,iBAAiB,SAAUkY,IAIbvC,eAlyBrBvK,IAAAC,EAyKM,MAzKNC,GAyKM,CAxKJC,EAuKM,MAvKNC,GAuKM,CAtKJD,EAsFM,MAtFNE,GAsFM,CApFJF,EAcM,MAdNK,GAcM,CAbJF,EAAA,KAAAA,EAAA,GAAAH,EAAkD,KAA9C,CAAAI,MAAM,QAAO,gCAA4B,IAC7CJ,EAWM,MAXNS,GAWM,MAVoD,IAAjBpD,EAAAqB,cAAvCmB,IAAAC,EAIM,MAJNmG,GAIM,CAHJjG,EAEO,OAAA,CAFDI,MAAKI,EAAA,CAAC,QAAgBnD,EAAYqB,aAAA,aAAA,oBACnCrB,EAAYqB,aAAA,cAAA,iBAAA,eAGqBwI,EAAS1R,OAAjDqK,IAAAC,EAIM,MAJNkB,GAIM,IAAAb,EAAA,KAAAA,EAAA,GAAA,CAHJH,EAEM,MAAA,CAFDI,MAAM,mCAAmCkN,KAAK,WACjDtN,EAA+C,OAAzC,CAAAI,MAAM,mBAAkB,qCAOtCJ,EAuDM,MAvDNkB,GAuDM,CArDJlB,EAUM,MAVNmB,GAUM,CATJnB,EAES,SAAA,CAFDI,MAAM,mCAAoCE,uBAAOhD,EAAI,kBAAmBiD,MAAM,sCACpFP,EAAmC,IAAA,CAAhCI,MAAM,uBAAqB,MAAA,OAEhCJ,EAES,SAAA,CAFDI,MAAM,yBAA0BE,uBAAOhD,EAAI,eAAiBiQ,UAAWlQ,EAAShK,WAAEK,OACxFsM,EAAiF,IAAA,CAA7EI,MAAKI,EAAEnD,EAAaxL,cAACC,UAAS,mBAAA,mCAEpCkO,EAES,SAAA,CAFDI,MAAM,mCAAoCE,uBAAOhD,EAAI,iBAAkBiD,MAAM,qCACnFP,EAAkC,IAAA,CAA/BI,MAAM,sBAAoB,MAAA,SAKjCJ,EAuCM,MAvCNqB,GAuCM,CArCJrB,EASM,MATNsB,GASM,CARJtB,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,aAA6B,WAARoH,EAAQpS,MAAA,cAAA,wBACxC8K,uBAAO2J,EAAW,WAAY1J,MAAM,0CACrCP,EAA4B,IAAA,CAAzBI,MAAM,gBAAc,MAAA,KAAK,YAC9B,SACAJ,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,aAA6B,SAARoH,EAAQpS,MAAA,cAAA,wBACxC8K,uBAAO2J,EAAW,SAAU1J,MAAM,qCACnCP,EAAuC,IAAA,CAApCI,MAAM,2BAAyB,MAAA,KAAK,UACzC,WAIiB,SAARwH,EAAQpS,OAAnBqK,IAAAC,EAUM,MAVNoG,GAUM,CATJlG,EAGS,SAAA,CAHDI,MAAM,mCAAoCE,QAAO0J,EAAUuD,SAAUnG,EAAS5R,OAAA,EACpF+K,MAAM,+BACNP,EAA8B,IAAA,CAA3BI,MAAM,kBAAgB,MAAA,YAE3BJ,EAAuE,OAAvEoG,GAAiCnF,EAAA7L,KAAKsO,MAAe,IAAT0D,EAAS5R,QAAU,IAAC,GAChEwK,EAGS,SAAA,CAHDI,MAAM,mCAAoCE,QAAOwJ,EAASyD,SAAUnG,EAAS5R,OAAA,EACnF+K,MAAM,8BACNP,EAA6B,IAAA,CAA1BI,MAAM,iBAAe,MAAA,wBAKT,WAARwH,EAAQpS,OAAnBqK,IAAAC,EAWM,MAXNkC,GAWM,GAVJhC,EAKS,SAAA,CALDI,MAAM,kEAAsCyH,EAAcrS,MAAAsL,GAAG0M,SAAQnD,sBAC3ErK,EAAiC,SAAxB,CAAAxK,MAAO,KAAM,MAAE,GACxBwK,EAAmC,SAA1B,CAAAxK,MAAO,KAAO,OAAG,GAC1BwK,EAAmC,SAA1B,CAAAxK,MAAO,MAAO,OAAG,GAC1BwK,EAAmC,SAA1B,CAAAxK,MAAO,MAAO,OAAG,eAJwBqS,EAAcrS,SAMlEwK,EAGS,SAAA,CAHDI,MAAKI,EAAA,CAAC,aAAqBuH,EAAUvS,MAAA,cAAA,wBAC1C8K,QAAOgK,GAAkB/J,MAAM,gDAChCP,EAA8B,IAAA,CAA3BI,MAAM,kBAAgB,MAAA,yBAOU/C,EAAaxL,eAAxDgO,IAAAC,EAQM,MARNqC,GAQM,CAPJnC,EAEM,MAAA,CAFDI,MAAM,WAAWuG,MAAA,CAAoCwE,OAAA,MAAAsC,OAAA,WAAEnN,QAAOoK,KACjE1K,EAA6F,MAAA,CAAxFI,MAAM,eAAgBuG,eAAgByB,EAAe5S,MAAA,MAAU8X,KAAK,yBAE3EtN,EAGM,MAHNoC,GAGM,CAFJpC,EAA+D,QAA/DyG,GAA6BxF,EAAA7B,GAAW/B,EAAWtL,cAAA,GACnDiO,EAA4E,QAA5E0G,GAA4EzF,EAA/C7B,GAAW/B,EAAAhK,WAAWrB,UAAQ,IAAA,mBAMjEgO,EAuDM,MAvDN2C,GAuDM,CAtDJ3C,EAqDM,MAAA,CArDDI,MAAM,6BAAyB,oBAAJ3C,IAAIuJ,IAEvBE,EAAS1R,OAApBqK,IAAAC,EAGM,MAHN8C,GAGM,IAAAzC,EAAA,MAAAA,EAAA,IAAA,CAFJH,EAAkE,MAAA,CAA7DI,MAAM,mCAAmCkN,KAAK,mBACnDtN,EAA+B,YAAzB,sBAAkB,QAIT3C,EAAAhK,WAAWK,UAQ5BoM,EAoCM,MAAAgD,GAAA,CAlCJ4K,EAAmCC,EAAAC,OAAA,iBAAA,CAAA,OAAA,GAAA,GAGnC5N,EA8BM,MAAA,CA9BDI,MAAM,4BAA6ByN,YAAWpE,EAAiBqE,YAAWnE,EAC5EoE,UAASnE,IACV5J,EACmC,SAAA,SADvB,iBAAJvC,IAAIwJ,EAAiB7G,MAAM,kBAAmByG,MAAOQ,EAAW7R,MAAG2V,OAAQ7D,EAAY9R,MAC5F8K,QAAO8I,eAKVvJ,GAAA,GAAAC,EAOMY,EAPwB,KAAAC,EAAAqH,EAAAxS,MAAjB,CAAAuI,EAAOxC,SAApBuE,EAOM,MAAA,CAP2Cc,IAAK7C,EAAMmB,GAAIkB,SAAM,eAAc,CAAmCS,OAAAtF,IAAU8B,EAAgB2Q,0BAA4BrG,EAAenS,MAACyY,SAAS1S,MAGlMoL,MAAKC,EAAA,CAAA4B,KAAUzK,EAAMkK,SAAQ,OAAY3H,QAAOQ,GAkNxCoN,EAAC3S,EAAekE,KAGpC,GAFJA,EAAM0O,kBAEF1O,EAAM2O,SAAW3O,EAAM4O,QAAS,CAElC,MAAMC,EAAc3G,EAAgBnS,MAAM+Y,QAAQhT,GAC9C+S,GAAe,EACD3G,EAAAnS,MAAMgZ,OAAOF,EAAa,GAE1B3G,EAAAnS,MAAM2C,KAAKoD,EAC7B,MAGgBoM,EAAAnS,MAAQ,CAAC+F,IA/NqC2S,CAAkB3S,EAAOuF,GAC1E+M,YAAW/M,GAkOJ2N,EAAClT,EAAekE,KACtCA,EAAM0O,kBACN1G,EAAWjS,OAAQ,EACnBkS,EAAgBlS,MAAQ+F,EAExB,MAAMmT,EAAkBA,KACjBjH,EAAWjS,OAKZmZ,EAAgBA,KACpB,GAAIlH,EAAWjS,MAAO,CACd,MAAA6T,EAAOpC,EAAezR,MAAO8T,wBAC7BC,EAAI9J,EAAM+J,QAAUH,EAAKb,KACzBS,EAAOX,EAAYiB,GAEzBjM,EAAK,kBAAmBoK,EAAgBlS,MAAOJ,KAAKC,IAAI,EAAG4T,GAC7D,CAEAxB,EAAWjS,OAAQ,EACnBkS,EAAgBlS,OAAQ,EACfoZ,SAAAra,oBAAoB,YAAama,GACjCE,SAAAra,oBAAoB,UAAWoa,IAGjCC,SAAAna,iBAAiB,YAAaia,GAC9BE,SAAAna,iBAAiB,UAAWka,IA7PXF,CAAgBlT,EAAOuF,GAAUP,cAAexC,EAAMkB,eAAelB,EAAMiB,uBACvFgB,EAA+B,MAAA,CAA1BI,MAAM,eAAa,MAAA,IACxBJ,EAAsD,MAAtDiD,GAA6BhC,EAAAlD,EAAMkB,YAAU,0BAIpCsI,EAAA/R,OAAuC,OAAZgS,EAAYhS,WAAlDsK,EAEM,MAAA,OAFuDM,MAAM,iBAChEuG,QAAO4B,EAAc/S,0BAIxBwK,EAMM,MANNkD,GAMM,QALJpD,EAIMY,EAAA,KAAAC,EAJc8H,EAASjT,MAAjBqZ,QAAZ/O,EAIM,MAAA,CAJ0Bc,IAAKiO,EAAK5F,KAAM7I,MAAM,YACnDuG,MAAKC,EAAA,CAAA4B,KAAUqG,EAAK5G,SAAQ,uBAC7BjI,EAAkC,MAAA,CAA7BI,MAAM,kBAAgB,MAAA,IAC3BJ,EAAmD,MAAnD8G,GAAgC7F,EAAA4N,EAAK3F,OAAK,0BAxClDrJ,IAAAC,EAKM,MALN+C,GAKM,IAAA1C,EAAA,MAAAA,EAAA,IAAA,CAJJH,EAGM,MAAA,CAHDI,MAAM,0BAAwB,CACjCJ,EAAiD,IAAA,CAA9CI,MAAM,sCACTJ,EAAwC,IAArC,CAAAI,MAAM,QAAO,0CA4CxBJ,EAoBM,MApBN+G,GAoBM,CAnBJ/G,EAkBM,MAlBN8O,GAkBM,CAjBJ9O,EAKM,MALN+O,GAKM,CAJJ/O,EAGQ,QAHRgP,GAGQ,CAFM3R,EAAAhK,WAAWrB,UAAvB6N,IAAAC,EAAsF,UAArD,aAAUmB,EAAG7B,GAAW/B,EAAAhK,UAAUrB,WAAQ,aAC/DqW,EAAgB7S,OAA5BqK,IAAAC,EAAqF,OAAvDmP,GAAA,iBAAiBhO,EAAA7B,GAAWiJ,EAAgB7S,QAAA,iBAG9EwK,EAIM,MAJNkP,GAIM,CAHJlP,EAEQ,QAFRmP,GAEQlO,EADH5D,EAAM3B,OAAC9D,QAAS,aAAUqJ,EAAGkH,EAAgB3S,OAAG,eACrD,KAEFwK,EAKM,MALNoP,GAKM,CAJJpP,EAGQ,QAHRqP,GAGQ,CAFc,WAARzH,EAAQpS,OAApBqK,IAAAC,EAAkF,OAA/CwP,GAAA,WAAWrO,EAAA7B,GAAWyI,EAAcrS,QAAA,aACnD,SAARoS,EAAQpS,WAApBsK,EAAgF,OAAAyP,GAA/C,SAAStO,EAAA7L,KAAKsO,MAAe,IAAT0D,EAAS5R,QAAU,IAAC,i+BCfvF,MAAM4H,EAAQC,EAGRmS,EAAe/R,GAAI,GACnBgS,EAAkBhS,GAAI,GAGtBiS,EAAgB7R,EAAS,KACrBT,EAAMuS,YAAc,GAAK,+BA5JjC3P,EAiBM,MAjBND,GAiBM,aAhBJC,EAAoD,KAAA,KAAA,CAAhDA,EAA+B,IAAA,CAA5BI,MAAM,sBAAsB,sBACnCJ,EAcM,MAdNC,GAcM,CAbJD,EAIS,SAAA,CAJDI,MAAKI,EAAA,CAAC,aAAqBnD,EAAYqB,aAAA,cAAA,wBAC5C4B,uBAAOsP,EAAKA,MAAA,qCACb5P,EAA+B,IAAA,CAA5BI,MAAM,mBAAiB,MAAA,IAAK2B,EAAA,MAC5B1E,EAAYqB,aAAA,cAAA,gBAAA,OAEjBsB,EAOM,MAPNE,GAOM,CANY7C,EAAYqB,kBAA5BoB,EAEWY,EAAA,CAAAE,IAAA,GAAA,GAFmB,mEAG9Bd,EAEWY,EAAA,CAAAE,IAAA,GAAA,GAFM,mDAQvBZ,EAyCM,MAzCNK,GAyCM,eAxCJL,EAAwD,KAAA,KAAA,CAApDA,EAAgC,IAAA,CAA7BI,MAAM,uBAAuB,yBACpCJ,EAkBM,MAlBNS,GAkBM,CAjBJT,EAGS,SAAA,CAHDI,MAAM,iCAAkCE,uBAAOsP,EAAKA,MAAA,yBAA2BrC,UAAWmC,EAAala,0BAC7GwK,EAA2B,IAAA,CAAxBI,MAAM,eAAa,MAAA,KAAK,gCAE7B,YACAJ,EAIS,SAAA,CAJDI,MAAM,mCAAoCE,uBAAOsP,EAAKA,MAAA,0BAC3DrC,UAAWmC,EAAala,0BACzBwK,EAAqC,IAAA,CAAlCI,MAAM,yBAAuB,MAAA,KAAK,2BAEvC,YACAJ,EAGS,SAAA,CAHDI,MAAM,gCAAiCE,uBAAOsP,EAAKA,MAAA,iBAAmBrC,UAAWmC,EAAala,0BACpGwK,EAA2B,IAAA,CAAxBI,MAAM,eAAa,MAAA,KAAK,6BAE7B,YACAJ,EAGS,SAAA,CAHDI,MAAM,8BAA+BE,QAAKH,EAAA,KAAAA,EAAA,GAAAW,GAAE0O,EAAYha,OAAIga,EAAYha,OAAG+X,UAAWmC,EAAala,sBACzGwK,EAA8B,IAAA,CAA3BI,MAAM,kBAAgB,MAAA,MAAK,IAC9Ba,EAAGuO,EAAYha,MAAA,OAAA,QAAqB,aACtC,YAISga,EAAAha,OAAgB6H,EAAYwS,cAAvChQ,IAAAC,EAWM,MAXNsB,GAWM,CAVJpB,EASM,MATNqB,GASM,CARJrB,EAGM,MAHNsB,GAGM,CAFJnB,EAAA,MAAAA,EAAA,IAAAH,EAAqB,cAAb,QAAI,IAAS+B,EAAA,IAAId,EAAA5D,EAAAwS,aAAatT,aAAaG,QAAO,IAAA,iBAAMsD,EAAI,KAAA,KAAA,MAAA,IACpEG,EAAA,MAAAA,EAAA,IAAAH,EAAuB,cAAf,UAAM,MAAS,IAACiB,EAAG5D,EAAYwS,aAAC9T,YAAU,KAEpDiE,EAGM,MAHNkG,GAGM,CAFJ/F,EAAA,MAAAA,EAAA,IAAAH,EAAuB,cAAf,UAAM,MAAS,IAACiB,EAAG5D,EAAYwS,aAAC5T,eAAa,iBAAG+D,EAAI,KAAA,KAAA,MAAA,IAC5DG,EAAA,MAAAA,EAAA,IAAAH,EAAyB,cAAjB,YAAQ,MAAS,IAACiB,EAAG5D,EAAYwS,aAACrT,eAAa,mBAK7D2D,EAAA,MAAAA,EAAA,IAAAH,EAIM,MAJD,CAAAI,MAAM,uCAAsC,4JAIjD,MAIFJ,EAgEM,MAhENmG,GAgEM,eA/DJnG,EAAwD,KAAA,KAAA,CAApDA,EAA4B,IAAA,CAAzBI,MAAM,mBAAmB,6BAChCJ,EAcM,MAdNoG,GAcM,CAbJpG,EAGS,SAAA,CAHDI,MAAM,8BAA+BE,uBAAOsP,EAAKA,MAAA,mBAAqBrC,UAAWmC,EAAala,0BACpGwK,EAAyB,IAAA,CAAtBI,MAAM,aAAW,MAAA,KAAK,wBAE3B,YACAJ,EAGS,SAAA,CAHDI,MAAM,iCAAkCE,uBAAOsP,EAAKA,MAAA,iBAAmBrC,UAAWmC,EAAala,0BACrGwK,EAA4B,IAAA,CAAzBI,MAAM,gBAAc,MAAA,KAAK,kBAE9B,YACAJ,EAIS,SAAA,CAJDI,MAAM,mCAAoCE,QAAKH,EAAA,KAAAA,EAAA,GAAAW,GAAE2O,EAAeja,OAAIia,EAAeja,OACxF+X,UAAWmC,EAAala,sBACzBwK,EAAiC,IAAA,CAA9BI,MAAM,qBAAmB,MAAA,MAAK,IACjCa,EAAGwO,EAAeja,MAAA,OAAA,QAAqB,YACzC,YAISia,EAAAja,OAAmB6H,EAAcyS,oBAA5ChQ,EAwCM,MAAA,OAxCwCM,MAAMI,EAAA,CAAA,yBAC1CnD,EAAAyS,eAAeC,UAAS,iDAAA,qDAChC/P,EAEM,MAFNoC,GAEM,CADJjC,EAAA,MAAAA,EAAA,IAAAH,EAAwB,cAAhB,WAAO,MAAS,IAACiB,EAAG5D,EAAcyS,eAACE,SAAO,KAGzC3S,EAAAyS,eAAeG,oBAAsB5S,iBAAe4S,mBAAmBrY,OAAM,GAAxFiI,IAAAC,EAWM,MAXN2G,GAWM,CAVJtG,EAAA,MAAAA,EAAA,IAAAH,EAA4D,SAApD,CAAAI,MAAM,eAAc,2BAAuB,IACnDJ,EAQK,KARL0G,GAQK,EAPH7G,GAAA,GAAAC,EAGKY,SAHmBrD,EAAcyS,eAACG,mBAAmBnL,WAA/CoL,QAAXpQ,EAGK,KAAA,CAFFc,OAAQsP,EAAUC,SAASD,EAAUE,QAAShQ,MAAM,qBAClDa,EAAAiP,EAAUG,OAAK,WAEVhT,EAAcyS,eAACG,mBAAmBrY,OAAM,OAAlDkI,EAEK,KAFL6C,GAAiF,WACxE1B,EAAG5D,EAAcyS,eAACG,mBAAmBrY,OAAM,GAAO,SAC3D,2BAIOyF,EAAcyS,eAACQ,SAAS1Y,OAAM,GAAzCiI,IAAAC,EAWM,MAXN8C,GAWM,CAVJzC,EAAA,MAAAA,EAAA,IAAAH,EAAqD,SAA7C,CAAAI,MAAM,gBAAe,mBAAe,IAC5CJ,EAQK,KARL6C,GAQK,EAPHhD,GAAA,GAAAC,EAGKY,SAHiBrD,EAAcyS,eAACQ,SAASxL,WAAnCyL,QAAXzQ,EAGK,KAAA,CAFFc,IAAG,GAAK2P,EAAQJ,MAAMK,aAAaD,EAAQJ,MAAMlO,YAAa7B,MAAM,SAAQ,KAC5Ea,EAAGsP,EAAQJ,MAAMvW,MAAO,QAAQqH,EAAAsP,EAAQH,MAAMxW,MAAO,QAAM2W,EAAQE,iBAAkB,eACxF,WACUpT,EAAcyS,eAACQ,SAAS1Y,OAAM,OAAxCkI,EAEK,KAFLgD,GAAuE,WAC9D7B,EAAG5D,EAAcyS,eAACQ,SAAS1Y,OAAM,GAAO,SACjD,2BAIOyF,EAAcyS,eAACY,UAAU9Y,OAAM,GAA1CiI,IAAAC,EAGM,MAHNiD,GAGM,CAFJ5C,EAAA,MAAAA,EAAA,IAAAH,EAA8C,SAAtC,CAAAI,MAAM,aAAY,eAAW,IACrCJ,EAA+E,OAA/EgD,GAAuB/B,EAAA5D,EAAAyS,eAAeY,UAAU9Y,QAAS,eAAe,eAG1EoI,EAEM,MAFNiD,GACKhC,EAAA5D,EAAAyS,eAAeH,YAAa,OAAO1O,EAAA5D,EAAAyS,eAAe/T,YAAa,2BACpE,iBAGFoE,EAAA,MAAAA,EAAA,IAAAH,EAEM,MAFD,CAAAI,MAAM,uCAAsC,2GAEjD,6PC/HFP,IAAAC,EAgBM,MAhBNC,GAgBM,CAfJI,EAAA,KAAAA,EAAA,GAAAH,EAAiB,UAAb,YAAQ,IACZA,EAaM,MAbNC,GAaM,CAZJD,EAGM,MAHNE,GAGM,CAFJC,EAAA,KAAAA,EAAA,GAAAH,EAAmB,YAAb,UAAM,IACZA,EAAsE,OAAA,KAAAiB,EAA7D5D,cAAYmG,YAAa,IAACvC,EAAG5D,EAAWsT,YAACC,YAAU,KAE9D5Q,EAGM,MAHNK,GAGM,CAFJF,EAAA,KAAAA,EAAA,GAAAH,EAAmB,YAAb,UAAM,IACZA,EAAsE,OAAA,KAAAiB,EAA7D5D,cAAYsS,YAAa,IAAC1O,EAAG5D,EAAWsT,YAAC5U,YAAU,KAE9DiE,EAGM,MAHNS,GAGM,CAFJN,EAAA,KAAAA,EAAA,GAAAH,EAAuB,YAAjB,cAAU,IAChBA,EAA8E,OAAA,KAAAiB,EAArE5D,cAAYwT,gBAAiB,IAAC5P,EAAG5D,EAAWsT,YAACG,gBAAc,0CC6BpE3Q,2qEC1CNN,IAAAC,EAYM,MAZNC,GAYM,aAXJC,EAA+C,KAAA,KAAA,CAA3CA,EAA6B,IAAA,CAA1BI,MAAM,oBAAoB,mBACjCJ,EASM,MATNC,GASM,CARJD,EAGM,MAHNE,GAGM,CAFJC,EAAA,KAAAA,EAAA,GAAAH,EAAmB,YAAb,UAAM,IACZA,EAAsE,OAAtEK,GAA6CY,EAAA5D,EAAA0T,eAAgB,KAAE,KAEjE/Q,EAGM,MAHNS,GAGM,CAFJN,EAAA,KAAAA,EAAA,GAAAH,EAAwB,YAAlB,eAAW,IACjBA,EAAwE,OAAxEiG,GAAwEhF,EAA3B5D,EAAiB2T,mBAAA,4uBC+MtE,MAAMC,EAAQC,IACRC,EAASC,IAGTC,EAAgB5T,IAChB6T,EAAU7T,EAA2B,MACrC8T,EAAU9T,GAAI,GACd+T,EAAkB/T,GAAI,GACtBmC,EAAcnC,EAAI,GAClBgU,EAAmBhU,EAAI,GACvBiB,EAAejB,GAAI,GAGnBiU,EAAmBjU,EAAI,GACvBsN,EAAetN,EAAyB,MAGxCoS,EAAepS,EAAyB,OAGxCkU,sBAAEA,EAAAC,kBAAuBA,GChBtB,CACLD,sBAhMF,SAA+BjW,GAC7B,MAAM4U,EAA4B,GAC5BI,EAA6D,GAC7DT,EAAwE,GAC9E,IAAIlU,EAAa,EACb4T,EAAa,EACjB,MAAMkC,EAAyE,GAiB/E,GAdOnW,EAAAL,QAAQ,CAACa,EAAMsU,KACpBtU,EAAKC,MAAMd,QAAQ,CAACzB,EAAMqI,KACxBlG,SACuB,IAAnBnC,EAAKS,gBAA4C,IAAjBT,EAAKQ,UACvCuV,IACAkC,EAAS1Z,KAAK,IACTyB,EACH4W,YACAvO,mBAMW,IAAf0N,EACK,MAAA,CACLW,SAAU,GACVvU,aACA4T,aACAe,UAAW,GACXT,mBAAoB,GACpBD,QAAS,wBACTD,WAAW,GAKRrU,EAAAL,QAASa,IACR,MAAA4V,EAAY5V,EAAKC,MAAM2B,OAAOiU,QAAqB,IAAhBA,EAAE1X,gBAAyC,IAAd0X,EAAE3X,SACxE,IAAA,IAAStC,EAAI,EAAGA,EAAIga,EAAUla,OAAS,EAAGE,IAAK,CACvC,MAAAqY,EAAQ2B,EAAUha,GAClBsY,EAAQ0B,EAAUha,EAAI,GAExBqY,EAAM9V,UAAa+V,EAAM/V,WAC3B4V,EAAmB9X,KAAK,CACtBgY,MAAOA,EAAMvW,KACbwW,MAAOA,EAAMxW,KACbyW,MAAO,IAAIF,EAAMvW,mBAAmBuW,EAAM9V,iCAAiC+V,EAAMxW,YAAYwW,EAAM/V,eAGzG,IAIOwX,EAAAG,KAAK,CAACC,EAAGC,KAAOD,EAAE5X,WAAa,IAAM6X,EAAE7X,WAAa,IAG7D,IAAA,IAASvC,EAAI,EAAGA,EAAI+Z,EAASja,OAAS,EAAGE,IAAK,CACtC,MAAAqY,EAAQ0B,EAAS/Z,GACjBsY,EAAQyB,EAAS/Z,EAAI,GAEvB,GAAAqY,EAAM/V,QAAWgW,EAAM/V,UAAY,CACrC,MAAM8X,EAAe/B,EAAM/V,UACrB+X,EAAahd,KAAKE,IAAI6a,EAAM/V,QAAUgW,EAAMhW,SAC5CqW,EAAkB2B,EAAaD,EAErC7B,EAASnY,KAAK,CACZgY,QACAC,QACA+B,eACAC,aACA3B,mBAEJ,CACF,CAGA,IAAA,IAAS3Y,EAAI,EAAGA,EAAI+Z,EAASja,OAAS,EAAGE,IAAK,CACtC,MAAAqY,EAAQ0B,EAAS/Z,GACjBsY,EAAQyB,EAAS/Z,EAAI,GACrBuE,EAAM+T,EAAM/V,UAAa8V,EAAM/V,QAEjCiC,GAAO,GAAKA,EAAM,IACpBqU,EAAUvY,KAAK,CACbgY,MAAOA,EAAMvW,KACbwW,MAAOA,EAAMxW,KACbyC,OAGN,CAEM,MAAA0T,EAAYO,EAAS1Y,OAAS,GAAK8Y,EAAU9Y,OAAS,GAAKqY,EAAmBrY,OAAS,EACvFya,EAAc/B,EAAS1Y,OAAS8Y,EAAU9Y,OAASqY,EAAmBrY,OAE5E,IAAIoY,EAAU,GASP,OAPKA,EADRC,EAAmBrY,OAAS,EACpB,gBAAgBqY,EAAmBrY,0DAChB,IAApB0Y,EAAS1Y,QAAgB8Y,EAAU9Y,QAAU,EAC5C,mBAAmB+X,wBAEnB,YAAY0C,qBAA+B/B,EAAS1Y,oBAAoB8Y,EAAU9Y,0CAGvF,CACL0Y,WACAvU,aACA4T,aACAe,YACAT,qBACAD,UACAD,YAEJ,EAkFE6B,kBAhFF,SAA2BlW,GACzB1I,QAAQC,IAAI,qCACZ,MAAMqf,EAAoB,GAC1B,IAAIC,EAAW,EAGf,MAAMV,EAA8E,GAG7EnW,EAAAL,QAAQ,CAACa,EAAMsU,KACpBtU,EAAKC,MAAMd,QAAQ,CAACzB,EAAMqI,UACD,IAAnBrI,EAAKS,gBAA4C,IAAjBT,EAAKQ,SACvCyX,EAAS1Z,KAAK,CACZyB,OACA4W,YACAvO,kBAMRjP,QAAQC,IAAI,YAAY4e,EAASja,+BAGxBia,EAAAG,KAAK,CAACC,EAAGC,KAAOD,EAAErY,KAAKS,WAAa,IAAM6X,EAAEtY,KAAKS,WAAa,IAKvE,IAAA,IAASvC,EAAI,EAAGA,EAAI+Z,EAASja,OAAS,EAAGE,IAAK,CACtC,MAAA0a,EAAWX,EAAS/Z,GACpB2a,EAAWZ,EAAS/Z,EAAI,GACxBqY,EAAQqC,EAAS5Y,KACjBwW,EAAQqC,EAAS7Y,KAEjB8Y,EAAatC,EAAM/V,UAAa8V,EAAM/V,QAG5C,GAFiBsY,EATJ,GAWC,CACZ,MAAMC,EAAcxC,EAAM/V,QACpBwY,EAASxC,EAAM/V,UAbV,GAePqY,EAAa,EACf1f,QAAQC,IAAI,uBAAuBkd,EAAMvW,UAAU+Y,WAAqBvC,EAAMxW,UAAUwW,EAAM/V,gBAEtFrH,QAAAC,IAAI,6BAA6Bkd,EAAMvW,YAAYwW,EAAMxW,UAAU8Y,uBAErE1f,QAAAC,IAAI,iBAAiBkd,EAAMvW,mBAAmB+Y,SAAmBC,OAEzEzC,EAAM/V,QAAUwY,EACVzC,EAAAne,SAAWme,EAAM/V,QAAU+V,EAAM9V,UAEjC,MAAAwY,EAAaH,EAAa,EAAI,UAAY,gBAKhD,GAJQJ,EAAAna,KAAK,SAAS0a,MAAe1C,EAAMvW,UAAU+Y,SAAmBxC,EAAM/V,aAC9EmY,IAGIpC,EAAMlW,WAAakW,EAAMlW,UAAUrC,OAAS,EAAG,CACjD,MAAMmF,EAAeoT,EAAMne,SAC3B,IAAID,EAAcoe,EAAM9V,UAElB8V,EAAAlW,UAAUoB,QAASC,IACjB,MAAAwX,EAAmB/V,EAAeoT,EAAMlW,UAAUrC,OACxD0D,EAASjB,UAAYtI,EACrBuJ,EAASlB,QAAUrI,EAAc+gB,EACjCxX,EAAStJ,SAAW8gB,EACpB/gB,EAAcuJ,EAASlB,UAEjBpH,QAAAC,IAAI,cAAckd,EAAMlW,UAAUrC,yBAAyBuY,EAAMvW,QAC3E,CACF,CACF,CACO,OADG5G,QAAAC,IAAI,WAAWsf,cAClB,CACLA,WACAD,UAEJ,GDmBIxC,EAAiBrS,EAAiC,MAGlDsV,EAAkBtV,EAAI,GACtBuV,EAAgBvV,EAAI,IACpBwV,EAAiBxV,EAAuB,UAGxCsT,EAAgBtT,EAAsB,oBAAXjH,OAAyBA,OAAO0c,WAAa,MACxEC,EAAiB1V,EAAsB,oBAAXjH,OAAyBA,OAAO4c,YAAc,KAGhF,IAAIC,EAA4C,KAGhD,MAAMxhB,GAAgB4L,EAAmB,CACvC3L,WAAW,EACXC,YAAa,EACbC,SAAU,EACVC,OAAQ,EACRC,aAAc,EACdC,UAAU,IAINmhB,GAAa7V,GAAI,GAGjBkT,GAAc9S,EAAS,IACtByT,EAAQ9b,MAWN+d,EAAejC,EAAQ9b,MAAMkG,QAV3B,CACLkV,WAAY,EACZpN,WAAY,EACZzH,WAAY,EACZ4T,WAAY,EACZmB,eAAgB,EAChBD,eAAgB,EAChB2C,kBAAmB,IAMnBxC,GAAoBnT,EAAS,KACjC,MAAMgJ,EAAQkK,EAAcvb,MAC5B,OAAIqR,GAAS,KAAa,MACtBA,GAAS,KAAa,KACtBA,GAAS,IAAY,KACrBA,GAAS,IAAY,KACrBA,GAAS,IAAY,KAClB,OAIH4M,GAAoB5V,EAAS,KAC7B,IAACyT,EAAQ9b,OAAOkG,OAElB,OADA1I,QAAQC,IAAI,8CACL,GAGT,MAAMkJ,EAA+F,GACrG,IAAIuX,EAAkB,EAgDf,OA9CPpC,EAAQ9b,MAAMkG,OAAOL,QAASa,IAWxByX,GAAezX,IAKdA,EAAKC,OAAUlB,MAAM2Y,QAAQ1X,EAAKC,SAIvCD,EAAKC,MAAMd,QAAQ,CAACzB,EAAMqI,KACxB9F,EAAMhE,KAAK,CACT+G,GAAI,UAAUwU,UAAwBzR,IACtCjD,KAAMpF,EAAKA,KACXS,WAAYT,EAAKS,WAAa,GAAK,IACnCD,SAAUR,EAAKQ,SAAWR,EAAKS,WAAa,GAAK,IACjDJ,UAAWL,EAAKK,WAAWkB,IAAKG,IAAc,CAC5C0D,KAAM1D,EAASA,SACfjB,WAAYiB,EAASjB,WAAa,GAAK,IACvCD,SAAUkB,EAASlB,SAAWkB,EAASjB,WAAa,GAAK,WAK/DqZ,OAYKvX,IAGH0X,GAAgBhW,EAAS,IACtBhM,GAAc2D,MAAMxD,UAAY,IAInC8hB,GAAmBA,KACvBtC,EAAgBhc,OAAQ,GAGpBue,GAAcA,KAGdvd,OAAOwd,QAAQpc,OAAS,EAC1BuZ,EAAO8C,OAEP9C,EAAOhZ,KAAK,aAKV+b,GAAyBA,CAAC3J,EAAmBC,EAAiBN,KAClE6I,EAAgBvd,MAAQ+U,EACxByI,EAAcxd,MAAQgV,EACtByI,EAAezd,MAAQ0U,GAOnByJ,GAAkBzX,QACD,IAAdA,EAAKnB,MAAoC,WAAdmB,EAAKnB,KAInCoZ,GAAqB9I,IACzB,IAAKiG,EAAQ9b,MAAc,OAAA6V,EAE3B,IAAA,IAASvT,EAAIuT,EAAYvT,EAAIwZ,EAAQ9b,MAAMkG,OAAO9D,OAAQE,IAAK,CAC7D,MAAMoE,EAAOoV,EAAQ9b,MAAMkG,OAAO5D,GAC9B,IAAC6b,GAAezX,IAASA,EAAKC,OAASD,EAAKC,MAAMvE,OAAS,EACtD,OAAAE,CAEX,CACO,OAAAuT,GAwCHtK,GAAcyP,IAClB,IAAKc,EAAQ9b,OAASgb,GAAac,EAAQ9b,MAAMkG,OAAO9D,OAEtD,YADAgI,EAAYpK,MAAQgb,GAItB,MAAM4D,EAAe9C,EAAQ9b,MAAMkG,OAAO8U,GAGtC,GAAAmD,GAAeS,GAAe,CAE5B,IAAAC,EAAiBF,GAAkB3D,EAAY,GAKnD,OAJI6D,IAAmB7D,EAAY,GAAK6D,GAAkB/C,EAAQ9b,MAAMkG,OAAO9D,SAC5Dyc,EAjDIhJ,KACzB,IAAKiG,EAAQ9b,MAAc,OAAA6V,EAE3B,IAAA,IAASvT,EAAIuT,EAAYvT,GAAK,EAAGA,IAAK,CACpC,MAAMoE,EAAOoV,EAAQ9b,MAAMkG,OAAO5D,GAC9B,IAAC6b,GAAezX,IAASA,EAAKC,OAASD,EAAKC,MAAMvE,OAAS,EACtD,OAAAE,CAEX,CACO,OAAAuT,GAwCciJ,CAAkB9D,EAAY,SAEjD5Q,EAAYpK,MAAQ6e,EAEtB,CAGI,QAA2B,IAA3BD,EAAa/Z,WAA2B+Z,EAAajY,OAASiY,EAAajY,MAAMvE,OAAS,EAAG,CAE/FgI,EAAYpK,MAAQgb,EACpBiB,EAAiBjc,MAAQ,EAGnB,MAAA+e,EAAYH,EAAajY,MAAM,GAC/BY,EAAewX,EAAUna,SAAWma,EAAUla,UAChDka,EAAUna,QAAUma,EAAUla,UAC9B,IAEEma,EAAapf,KAAKC,IAAI,EAAG+e,EAAa/Z,UAAY0C,GAEhD/J,QAAAC,IAAI,iCAAiCud,EAAY,oBAAoB4D,EAAa/Z,sCAAsCma,OAChIpjB,EAAa6D,KAAKuf,EAAU,KAEvB,CAEL,IAAIC,EAAyBjE,EAAY,EACrCkE,EAAoB,KAGxB,KAAOD,GAA0B,GAAG,CAClC,MAAMvY,EAAOoV,EAAQ9b,MAAMkG,OAAO+Y,GAClC,IAAKd,GAAezX,SAA4B,IAAnBA,EAAK7B,UAAyB,CACrCqa,EAAAxY,EACpB,KACF,CACAuY,GACF,CAEI,GAAAC,QAAqD,IAAhCA,EAAkBra,UAAyB,CAElErH,QAAQC,IAAI,iCAAiCud,EAAY,uDAAuDkE,EAAkBra,eACrHjJ,EAAA6D,KAAKyf,EAAkBra,WAGpC,MAAMsa,EAAgBF,EAAyB,EAC3CE,EAAgBrD,EAAQ9b,MAAMkG,OAAO9D,SAAW+b,GAAerC,EAAQ9b,MAAMkG,OAAOiZ,KACtF/U,EAAYpK,MAAQmf,EACpBlD,EAAiBjc,MAAQ,EACzBxC,QAAQC,IAAI,8BAA8B0hB,EAAgB,+BAG1D/U,EAAYpK,MAAQgb,EACpBiB,EAAiBjc,MAAQ,EAC3B,MAGAoK,EAAYpK,MAAQgb,EACpBiB,EAAiBjc,MAAQ,EACzBxC,QAAQC,IAAI,WAAWud,EAAY,0DAEvC,GAGIoE,GAAgBlZ,IAChB4V,EAAQ9b,QACV8b,EAAQ9b,MAAMkG,OAASA,IAIrBmZ,GAAkBhK,UAClB,IACEhZ,GAAc2D,MAAM1D,WACtBV,EAAakC,QACbN,QAAQC,IAAI,kBAEZD,QAAQC,IAAI,qCACN7B,EAAayD,OACnB7B,QAAQC,IAAI,+BAEPE,GACCH,QAAAG,MAAM,+BAAgCA,GAC9C2hB,MAAM,wGACR,GAGIC,GAAa9L,IACjB7X,EAAa6D,KAAKgU,IAGd+L,GAAeA,KACnB,MAAM9H,EAAU9X,KAAKC,IAAI,EAAGxD,GAAc2D,MAAMzD,YAAc,KAC9DX,EAAa6D,KAAKiY,IAGd+H,GAAcA,KAClB,MAAMjjB,EAAWsf,EAAQ9b,OAAOnC,WAAWrB,UAAY,EACvD,GAAIA,EAAW,EAAG,CACV,MAAAkb,EAAU9X,KAAKE,IAAItD,EAAW,IAAKH,GAAc2D,MAAMzD,YAAc,KAC3EX,EAAa6D,KAAKiY,EACpB,GAgCIgI,GAAmBA,KACVxW,EAAAlJ,OAASkJ,EAAalJ,OAI/B2f,GAAmBtK,UACnB,UAEIzZ,EAAayD,OACnBzD,EAAakC,QACbN,QAAQC,IAAI,yCACLE,GACCH,QAAAkB,KAAK,2CAA4Cf,EAC3D,GAIIiiB,GAAyBA,KAC7B,IAAK9D,EAAQ9b,MAAO,OAEpB,MAAMgb,EAAY5Q,EAAYpK,MACxBgN,EAAY8O,EAAQ9b,MAAMkG,OAAO9D,OAAS4Y,EAK5CnO,QAJ0B,IAAdG,EACZ,qCACA,yCAAyCA,EAAY,kGAGvD8O,EAAQ9b,MAAMkG,OAAS+G,EAAoB6O,EAAQ9b,MAAMkG,OAAQ8U,GACjExd,QAAQC,IAAI,gCAAgCud,cAAsBhO,uBA4DhE6S,GAAeA,KAUnB,GATAriB,QAAQC,IAAI,yBAA0B,CACpCqiB,aAAchE,EAAQ9b,MACtBkJ,aAAcA,EAAalJ,MAC3B1D,UAAWD,GAAc2D,MAAM1D,UAC/B8N,YAAaA,EAAYpK,MACzBmD,YAAa8Y,EAAiBjc,MAC9BzD,YAAaF,GAAc2D,MAAMzD,eAG9Buf,EAAQ9b,QAAUkJ,EAAalJ,MAElC,YADAxC,QAAQC,IAAI,iEAIV,IAACpB,GAAc2D,MAAM1D,UAEvB,YADAkB,QAAQC,IAAI,6CAId,MAAMud,EAAY5Q,EAAYpK,MACxByM,EAAYwP,EAAiBjc,MAC7BzD,EAAcF,GAAc2D,MAAMzD,YAExC,GAAIye,GAAac,EAAQ9b,MAAMkG,OAAO9D,OAEpC,YADA5E,QAAQC,IAAI,8CAId,MAAMsiB,EAAajE,EAAQ9b,MAAMkG,OAAO8U,GACpC,IAAC+E,IAAeA,EAAWpZ,OAAS8F,GAAasT,EAAWpZ,MAAMvE,OAEpE,YADA5E,QAAQC,IAAI,8CAKR,MAAAuiB,EA3FuBC,EAACzH,EAA0ByD,KACxD,IAAKH,EAAQ9b,MAAc,WAErB,MAAAkG,EAAS4V,EAAQ9b,MAAMkG,OACvBkE,EAAclE,EAAOsS,GAC3B,IAAKpO,EAAoB,WAErB,IAAA8V,EAGJ,GAAIjE,EAAmB7R,EAAYzD,MAAMvE,OAAS,EAGhD8d,EADiB9V,EAAYzD,MAAMsV,EAAmB,GAChCpX,cACjB,CAEL,IAAIsa,EAAgB3G,EAAmB,EAChC,KAAA2G,EAAgBjZ,EAAO9D,QAAQ,CAC9B,MAAA+d,EAAWja,EAAOiZ,GACxB,IAAKhB,GAAegC,IAAaA,EAASxZ,MAAMvE,OAAS,EAAG,CAC7C8d,EAAAC,EAASxZ,MAAM,GAAG9B,UAC/B,KACF,CACAsa,GACF,CACF,CAEA,GAAIe,EAAY,CACR,MACAE,EAAaF,EAAa,IADZ7jB,GAAc2D,MAAMzD,YAMxC,GAFoBuE,EAAYuf,cAAcD,GAE7B,CAEf,MAAM5jB,EAAW4jB,EAAavc,EAAO6D,WAAW4Y,mBAAqB,IAC9D,OAAA1gB,KAAKC,IAAIgE,EAAOO,KAAKmc,YAAa3gB,KAAKE,IAAI+D,EAAO6D,WAAWC,uBAAwBnL,GAAS,CAChG,CAEL,MAAMA,EAAW4jB,EAAavc,EAAO6D,WAAW8Y,kBAAoB,IAC7D,OAAA5gB,KAAKC,IAAIgE,EAAOO,KAAKmc,YAAa3gB,KAAKE,IAAI+D,EAAO6D,WAAW+Y,kBAAmBjkB,GACzF,CACF,CAGM,MAAA2G,EAAciH,EAAYzD,MAAMsV,GACtC,GAAI9Y,EAAa,CACT,MAAAud,EAAavd,EAAYiB,KAAKhC,OACpC,OAAOxC,KAAKC,IAAI,IAAkB,GAAb6gB,EACvB,CAEO,OAAA,KAuCeT,CAAuBjF,EAAWvO,GAGhDqP,EAAA9b,MAAMkG,OAASya,EAAiB7E,EAAQ9b,MAAMkG,OAAQ8U,EAAWvO,EAAWlQ,EAAayjB,GAEjGxiB,QAAQC,IAAI,2BAA4B,CACtC2G,KAAM0X,EAAQ9b,MAAMkG,OAAO8U,GAAWrU,MAAM8F,GAAWrI,KACvDS,UAAWtI,EACXC,SAAUwjB,EACVY,YAAaZ,EAAgB,IAAM,eAAiB,mBAIvCa,MAGXA,GAAiBA,KACrB,IAAK/E,EAAQ9b,MAAO,OAEpB,MAAM8gB,EAAmBhF,EAAQ9b,MAAMkG,OAAOkE,EAAYpK,OAC1D,IAAK8gB,EAAkB,OAGvB,MAAMC,EAAgB3W,EAAYpK,MAC5BghB,EAAgB/E,EAAiBjc,MAEvC,GAAIic,EAAiBjc,MAAQ8gB,EAAiBna,MAAMvE,OAAS,EAE1C6Z,EAAAjc,YACZ,CAED,IAAAmf,EAAgB/U,EAAYpK,MAAQ,EACxC,KAAOmf,EAAgBrD,EAAQ9b,MAAMkG,OAAO9D,QAAQ,CAClD,MAAM+d,EAAWrE,EAAQ9b,MAAMkG,OAAOiZ,GAEtC,GAAIgB,EAASxZ,OAASwZ,EAASxZ,MAAMvE,OAAS,EAAG,CAC/CgI,EAAYpK,MAAQmf,EACpBlD,EAAiBjc,MAAQ,EACzB,KACF,CACAmf,GACF,CACF,CAGA,MAAM8B,EAAiB7W,EAAYpK,QAAU+gB,GAAiB9E,EAAiBjc,QAAUghB,EACrF,GAAAC,GAAiBnF,EAAQ9b,MAE3B8b,EAAQ9b,MAAMkG,OAASgb,EAA8BpF,EAAQ9b,MAAMkG,OAAQ6a,EAAeC,QACjF,IAACC,GAAiBnF,EAAQ9b,MAAO,CAE1C,MAAMmD,EAAc2Y,EAAQ9b,MAAMkG,OAAO6a,IAAgBpa,QAAQqa,GAC7D7d,QAAyC,IAA1BA,EAAY0B,WAA2B1B,EAAYsB,WAAatB,EAAYsB,UAAUrC,OAAS,IAChH0Z,EAAQ9b,MAAMkG,OAASgb,EAA8BpF,EAAQ9b,MAAMkG,OAAQ6a,EAAeC,GAClFxjB,QAAAC,IAAI,yCAA0C0F,EAAYiB,MAEtE,GAGI+c,GAAuBA,CAACnG,EAAmBvH,KAC/C,IAAKqI,EAAQ9b,MAAO,OAEpB,MAAMuI,EAAQuT,EAAQ9b,MAAMkG,OAAO8U,GAC/BzS,IACFA,EAAM1D,UAAY4O,IAIhB2N,GAAcA,KACbtF,EAAQ9b,QAEL8b,EAAA9b,MAAMqhB,UAAY,IAAIzY,KACR0Y,KAItB9jB,QAAQC,IAAI,iBAAkBqe,EAAQ9b,MAAMuhB,QA4DxCC,GAAmBnM,UACnB,IAACoM,EAAK5jB,UAED,OADPL,QAAQG,MAAM,6BACP,EAGTH,QAAQC,IAAI,4BAA6B,CACvCikB,YAAaD,EAAKF,KAClBI,cAAeF,EAAK5jB,UAAU0jB,KAC9BK,UAAWH,EAAK5jB,UAAUK,KAC1B2jB,gBAAiBJ,EAAK5jB,UAAUikB,WAChCC,YAAaN,EAAK5jB,UAAUikB,YAAYC,YACxCvlB,SAAUilB,EAAK5jB,UAAUrB,WAGvB,IACF,IAAIqB,EAAY4jB,EAAK5jB,UAGrB,IAAKA,EAAUK,MAAQL,EAAUikB,WAAY,CAC3CtkB,QAAQC,IAAI,mCACZ,MAAMukB,QAAsBC,EAAoBC,kBAAkBrkB,EAAUikB,YAE5E,IAAIE,EASK,OADPxkB,QAAQG,MAAM,kCACP,EARKE,EAAA,IACPA,KACAmkB,GAELP,EAAK5jB,UAAYA,EACjBL,QAAQC,IAAI,sCAKhB,CAEA,IAAI0kB,GAAU,EACVC,EAAU,EAGP,MAACD,GAAWC,EAAU,GACvB,IAIF,GAHA5kB,QAAQC,IAAI,6BAA6B,EAAI2kB,WACnCD,QAAMvmB,EAAagC,cAAcC,GAEvCskB,EAAS,CACL,MAAAllB,EAAQrB,EAAauE,mBAYvB,GAXU9D,GAAA2D,MAAQ,IAAK/C,GAGtBwkB,EAAK5jB,UAAUrB,UAAYilB,EAAK5jB,UAAUrB,WAAaS,EAAMT,WAChEgB,QAAQC,IAAI,sCAAuCR,EAAMT,SAAW,IAAM,WACrEilB,EAAA5jB,UAAUrB,SAAWS,EAAMT,SAC3BilB,EAAAJ,cAAgBzY,KACC0Y,OAInB/L,EAAavV,MAAO,CACvB,MAAMqC,QAAczG,EAAa8F,qBAAqB,KAClDW,IACFkT,EAAavV,MAAQ,CACnBqC,QACAiV,WAAY,MACZ9a,SAAUS,EAAMT,SAChB+a,SAAU,GAGhB,CACA/Z,QAAQC,IAAI,+BACZ,KAAA,CAEA2kB,IACIA,EAAU,IACJ5kB,QAAAkB,KAAK,sCAAsC0jB,0BACzC,IAAAzjB,QAAQC,GAAWyV,WAAWzV,EAAS,aAG9CyjB,GACC7kB,QAAAG,MAAM,gCAAiC0kB,GAC/CD,IACIA,EAAU,SACN,IAAIzjB,QAAQC,GAAWyV,WAAWzV,EAAS,KAErD,CAGF,QAAKujB,IACH3kB,QAAQG,MAAM,iDACP,SAIFA,GAEA,OADCH,QAAAG,MAAM,+BAAgCA,IACvC,CACT,GAGI2jB,GAAwBA,KAC5B,GAAKxF,EAAQ9b,MAET,IACI,MAAAsiB,EAASC,aAAaC,QAAQ,mBAC9BC,EAAWH,EAASI,KAAKC,MAAML,GAAU,GAGzCM,EAAeH,EAAS1T,UAAW8T,GAAWA,EAAEnZ,KAAOoS,EAAQ9b,MAAO0J,IAC5E,IAAyB,IAArBkZ,EAAqB,CAEvB,MAAME,EAAsB,IACvBhH,EAAQ9b,MACXnC,UAAW,IACNie,EAAQ9b,MAAMnC,UACjBK,KAAM,KACNC,SAAK,IAITskB,EAASG,GAAgBE,EACzBP,aAAaQ,QAAQ,kBAAmBL,KAAKM,UAAUP,IACvDjlB,QAAQC,IAAI,8BACd,QACOE,GACCH,QAAAG,MAAM,wBAAyBA,EACzC,GAiEIslB,GAAqBA,KACnB,MAAAC,EAAiBjZ,IAErB,KAAIA,EAAMiK,kBAAkBiP,kBAAoBlZ,EAAMiK,kBAAkBkP,qBAIxE,OAAQnZ,EAAMC,MACZ,IAAK,QACHD,EAAME,iBACFjB,EAAalJ,OACX3D,GAAc2D,MAAM1D,UAETujB,KAMCR,KAElB,MAEF,IAAK,cACL,IAAK,QACEpV,EAAM2O,SAAY3O,EAAM4O,UAC3B5O,EAAME,iBACUkV,MAElB,MAEF,IAAK,UACL,IAAK,gBACHpV,EAAME,iBACFjB,EAAalJ,OACF6f,KAEf,MAEF,IAAK,YACH5V,EAAME,iBAlgBWkZ,MACvB,MAAM7mB,EAAWsf,EAAQ9b,OAAOnC,WAAWrB,UAAY,EACvD,GAAIA,EAAW,EAAG,CACV,MAAAkb,EAAU9X,KAAKE,IAAItD,EAAW,IAAKH,GAAc2D,MAAMzD,YAAc,KAC3EX,EAAa6D,KAAKiY,EACpB,GA8fuB2L,GACjB,MAEF,IAAK,iBACHpZ,EAAME,iBA5gBYmZ,MACxB,MAAM5L,EAAU9X,KAAKC,IAAI,EAAGxD,GAAc2D,MAAMzD,YAAc,KAC9DX,EAAa6D,KAAKiY,IA2gBM4L,GAClB,MAEF,IAAK,OAKL,IAAK,SACHrZ,EAAME,iBACWuV,KACjB,MAEF,IAAK,QACCzV,EAAM2O,SAAW3O,EAAM4O,WACzB5O,EAAME,iBACUkV,MAElB,MAEF,IAAK,QACCpV,EAAM2O,SAAW3O,EAAM4O,WACzB5O,EAAME,iBACMiX,MAEd,MAIF,IAAK,OAwBL,IAAK,aACCnX,EAAM2O,SAAW3O,EAAM4O,WACzB5O,EAAME,iBACOqV,MAEf,MAtBF,IAAK,OAwBL,IAAK,cACCvV,EAAM2O,SAAW3O,EAAM4O,WACzB5O,EAAME,iBACMsV,MAEd,MAtBF,IAAK,OACHxV,EAAME,iBA3iBZvO,EAAa6D,KAAK,GAEN2K,EAAApK,MAAQ2e,GAAkB,GACtC1C,EAAiBjc,MAAQ,EA0iBnB,MAEF,IAAK,MACHiK,EAAME,iBA1iBIoZ,MAChB,MAAM/mB,EAAWsf,EAAQ9b,OAAOnC,WAAWrB,UAAY,EACvD,GAAIA,EAAW,EAAG,CAEhB,MAAMkb,EAAU9X,KAAKC,IAAI,EAAGrD,EAAW,IACvCZ,EAAa6D,KAAKiY,EACpB,GAqiBgB6L,GACV,MAgBF,IAAK,QACCtZ,EAAM2O,SAAW3O,EAAM4O,WACzB5O,EAAME,iBAENvO,EAAa+E,iBACFmd,GAAA9d,MAAQpE,EAAagF,cAChCpD,QAAQC,IAAI,iCAEd,MAEF,IAAK,SACHwM,EAAME,iBACF6R,EAAgBhc,MACDse,KACRpV,EAAalJ,QAxuBKwjB,MACnC,IAAK1H,EAAQ9b,MAAO,OAEpB,MAAMgb,EAAY5Q,EAAYpK,MACxByM,EAAYwP,EAAiBjc,MAEnC,GAAIgb,GAAa,GAAKA,EAAYc,EAAQ9b,MAAMkG,OAAO9D,OAAQ,CAC7D,MAAMsE,EAAOoV,EAAQ9b,MAAMkG,OAAO8U,GAC9B,GAAAtU,GAAQA,EAAKC,OAAS8F,GAAa,GAAKA,EAAY/F,EAAKC,MAAMvE,OAAQ,CACnE,MAAAgC,EAAOsC,EAAKC,MAAM8F,QAED,IAAnBrI,EAAKS,WAA2BT,EAAKK,WAAaL,EAAKK,UAAUrC,OAAS,GAExDgC,EAAKK,UAAU4C,KAAKC,QAAqB,IAAhBA,EAAEzC,gBAAyC,IAAdyC,EAAE1C,WAE1EkX,EAAQ9b,MAAMkG,OAASgb,EAA8BpF,EAAQ9b,MAAMkG,OAAQ8U,EAAWvO,GAC9EjP,QAAAC,IAAI,2CAA4C2G,EAAKA,MAGnE,CACF,GAstBqCof,GAE7Bta,EAAalJ,OAAQ,KAS7B,OAFOgB,OAAA/B,iBAAiB,UAAWikB,GAE5B,KACEliB,OAAAjC,oBAAoB,UAAWmkB,KAKpCO,GAAqBA,KACrB,GAAC3H,EAAQ9b,OAAOkG,OAAhB,CAKJ1I,QAAQC,IAAI,yCAER,IAEF,MAAM6I,EAAWL,EAAyB6V,EAAQ9b,MAAMkG,QAGxDmU,EAAara,MAAQsG,EAEb9I,QAAAC,IAAI,wCAAyC6I,SAE9C3I,GACCH,QAAAG,MAAM,mCAAoCA,EACpD,CAfA,MAFEH,QAAQC,IAAI,qDAoBVimB,GAAsBA,KACtB,GAAC5H,EAAQ9b,OAAOkG,OAAhB,CAKJ1I,QAAQC,IAAI,uCAER,KR/yBC,SAAiCyI,GACtC,IAAIyd,EAAa,EAEjB,IAAA,MAAWjd,KAAQR,EACN,IAAA,MAAA9B,KAAQsC,EAAKC,MACjBvC,EAAAK,UAAUoB,QAAoBC,SACN,IAAvBA,EAASjB,WAAyB8e,IACtC7d,EAASjB,eAAY,EACrBiB,EAASlB,aAAU,EACnBkB,EAAStJ,cAAW,IAKlBgB,QAAAC,IAAI,gCAAgCkmB,cAC9C,CQkyB4BC,CAAA9H,EAAQ9b,MAAMkG,QAGtCmU,EAAara,MAAQ,KAErBxC,QAAQC,IAAI,8CAELE,GACCH,QAAAG,MAAM,qCAAsCA,EACtD,CAfA,MAFEH,QAAQC,IAAI,mDAqBVomB,GAAuBA,KACvB,GAAC/H,EAAQ9b,OAAOkG,OAAhB,CAKJ1I,QAAQC,IAAI,mCAER,IACF,MAAMqmB,EAAS3H,EAAsBL,EAAQ9b,MAAMkG,QACnDoU,EAAeta,MAAQ8jB,EAEftmB,QAAAC,IAAI,+BAAgCqmB,EAAOtJ,SAE/CsJ,EAAOhJ,SAAS1Y,OAAS,IAC3B5E,QAAQkB,KAAK,SAASolB,EAAOhJ,SAAS1Y,2BACtC0hB,EAAOhJ,SAASjV,QAAQ,CAACkV,EAAShV,KAChCvI,QAAQkB,KAAK,KAAKqH,EAAQ,OAAOgV,EAAQJ,MAAMvW,YAAY2W,EAAQH,MAAMxW,UAAU2W,EAAQE,uCAIxFtd,GACCH,QAAAG,MAAM,4BAA6BA,EAC7C,CAnBA,MAFEH,QAAQC,IAAI,sDAwBVsmB,GAAqB1O,UACrB,GAACyG,EAAQ9b,OAAOkG,OAAhB,CAKJ1I,QAAQC,IAAI,gCAER,IACF,MAAMqmB,EAAS1H,EAAkBN,EAAQ9b,MAAMkG,QAE3C4d,EAAO/G,SAAW,GACpBvf,QAAQC,IAAI,WAAWqmB,EAAO/G,6BACvB+G,EAAAhH,QAAQjX,QAAkBme,GAAAxmB,QAAQC,IAAI,OAAOumB,YAG9C5C,KAGWlF,EAAAlc,cAGXgJ,IAGe6a,KAErBrmB,QAAQC,IAAI,iDAEZD,QAAQC,IAAI,+BAGPE,GACCH,QAAAG,MAAM,kCAAmCA,EACnD,CA9BA,MAFEH,QAAQC,IAAI,mDAoCVwmB,GAAiCC,IAGjC,IAACpI,EAAQ9b,OAAOkG,OAElB,YADA1I,QAAQG,MAAM,iCAMV,MAAAwmB,EAAkBrI,EAAQ9b,MAAMkG,OAAOoC,OAAe5B,IAACyX,GAAezX,IAE/Dwd,EAAAre,QAASue,IAEpB,MAAMC,EAAQD,EAAY1a,GAAG2a,MAAM,2BACnC,GAAIA,EAAO,CACT,MAAMnG,EAAkBoG,SAASD,EAAM,IACjC5X,EAAY6X,SAASD,EAAM,IAE7B,GAAAnG,EAAkBiG,EAAgB/hB,OAAQ,CACtC,MAAAmiB,EAAaJ,EAAgBjG,GAC/B,GAAAzR,EAAY8X,EAAW5d,MAAMvE,OAAQ,CACjC,MAAAoiB,EAAeD,EAAW5d,MAAM8F,GAGhCgY,EAAeD,EAAa3f,WAAa,EACzC6f,EAAaF,EAAa5f,SAAW,EACrC+f,EAAe/kB,KAAKsO,MAA8B,IAAxBkW,EAAYvf,WACtC+f,EAAahlB,KAAKsO,MAA4B,IAAtBkW,EAAYxf,SAK1C,IAAIigB,GAAmB,EAcnB,GAbAT,EAAY3f,WAAa+f,EAAa/f,WACxC2f,EAAY3f,UAAUrC,SAAWoiB,EAAa/f,UAAUrC,SAExDyiB,EAAmBT,EAAY3f,UAAU4C,KAAK,CAACyd,EAAUC,KACjD,MAAAC,EAAUR,EAAa/f,UAAUsgB,GACjCE,EAAcrlB,KAAKsO,MAAsB,IAAhB4W,EAAIjgB,WAC7BqgB,EAAYtlB,KAAKsO,MAAoB,IAAd4W,EAAIlgB,SACjC,OAAOhF,KAAK8C,IAAIuiB,GAAeD,EAAQngB,WAAa,IAAM,GACxDjF,KAAK8C,IAAIwiB,GAAaF,EAAQpgB,SAAW,IAAM,KAKjDigB,GAAoBT,EAAY3f,UAElC+f,EAAa/f,UAAY2f,EAAY3f,UAAUkB,IAAKmf,IAAc,CAChEhf,SAAUgf,EAAItb,KACd3E,UAAWjF,KAAKsO,MAAsB,IAAhB4W,EAAIjgB,WAC1BD,QAAShF,KAAKsO,MAAoB,IAAd4W,EAAIlgB,YAE1B4f,EAAa3f,UAAY8f,EACzBH,EAAa5f,QAAUggB,EACvBJ,EAAahoB,SAAWooB,EAAaD,OAE5BH,GAAAA,EAAa/f,WAAa+f,EAAa/f,UAAUrC,OAAS,EAE/D,IAIF,MAAM+iB,EAAoBX,EAAa/f,UAAUkB,IAAYmf,IAAA,CAC3Dtb,KAAMsb,EAAIhf,UAAY,GACtBjB,UAAWigB,EAAIjgB,WAAa,EAC5BD,QAASkgB,EAAIlgB,SAAW,KAOpBwgB,EAASC,EAAuBC,sBACpC,QAAQpH,KAAmBzR,IAC3B+X,EAAapgB,KACbqgB,EACAC,EACAS,GAGE,IAAAI,EAGJ,MAAMC,EAAmB5lB,KAAK8C,IAAIiiB,EAAeF,GAAgB,GAC3DgB,EAAiB7lB,KAAK8C,IAAIkiB,EAAaF,GAAc,GAEvD,GAAAc,IAAqBC,EAAgB,CAEvBF,EAAAH,EAAOM,SAASf,GAG1B,MAAAgB,EAAkBJ,EAAcK,cAChCC,EAA2BN,EAAcO,uBAC/CtB,EAAa3f,UAAY8gB,EAAgB9gB,UACzC2f,EAAa5f,QAAU+gB,EAAgB/gB,QAC1B4f,EAAAhoB,SAAWgoB,EAAa5f,QAAU4f,EAAa3f,UAC/C2f,EAAA/f,UAAYohB,EAAyBlgB,IAAYmf,IAAA,CAC5Dhf,SAAUgf,EAAItb,KACd3E,UAAWigB,EAAIjgB,UACfD,QAASkgB,EAAIlgB,QACbpI,SAAUsoB,EAAIlgB,QAAUkgB,EAAIjgB,YAC5B,SAGO4gB,IAAmBD,EAG5BhB,EAAa5f,QAAUggB,EACVJ,EAAAhoB,SAAWooB,GAAcJ,EAAa3f,WAAa,WAGvD2gB,GAAoBC,EAAgB,CAE7BF,EAAAH,EAAOM,SAASf,GAG1B,MAAAkB,EAA2BN,EAAcO,uBAC/CtB,EAAa3f,UAAY8f,EACzBH,EAAa5f,QAAUggB,EACvBJ,EAAahoB,SAAWooB,EAAaD,EACxBH,EAAA/f,UAAYohB,EAAyBlgB,IAAYmf,IAAA,CAC5Dhf,SAAUgf,EAAItb,KACd3E,UAAWigB,EAAIjgB,UACfD,QAASkgB,EAAIlgB,QACbpI,SAAUsoB,EAAIlgB,QAAUkgB,EAAIjgB,YAC5B,QASGlH,GACPH,QAAQG,MAAM,6CAA6C6mB,EAAapgB,SAAUzG,GAGlF6mB,EAAa3f,UAAY8f,EACzBH,EAAa5f,QAAUggB,EACVJ,EAAAhoB,SAAWgoB,EAAa5f,QAAU4f,EAAa3f,SAE9D,MAGA2f,EAAa3f,UAAY8f,EACzBH,EAAa5f,QAAUggB,EACVJ,EAAAhoB,SAAWgoB,EAAa5f,QAAU4f,EAAa3f,SAGhE,CACF,CACF,KAOEkhB,GAAoBC,IAChBxoB,QAAAC,IAAI,oBAAqBuoB,WAKnCnO,EAAUxC,UACF,MAAA4Q,EAAYxK,EAAMyK,OAAOD,UAC3BA,OA/pBc5Q,WAEZ,MAAAiN,EAASC,aAAaC,QAAQ,mBACpC,IAAKF,EAIH,OAHA9kB,QAAQkB,KAAK,6DACb4gB,MAAM,+DACN3D,EAAOhZ,KAAK,YAIV,IACI,MACAwjB,EADWzD,KAAKC,MAAML,GACE8D,KAAMvD,GAAWA,EAAEnZ,KAAOuc,GAExD,IAAKE,EAIH,OAHQ3oB,QAAAkB,KAAK,WAAWunB,4CACxB3G,MAAM,yFACN3D,EAAOhZ,KAAK,YAKd,MAAM0jB,EAAkC,IACnCF,EACHG,UAAW,IAAI1d,KAAKud,EAAaG,WACjCjF,UAAW,IAAIzY,KAAKud,EAAa9E,WACjCxjB,UAAW,IACNsoB,EAAatoB,UAChBK,KAAM,OAQV,GAJA4d,EAAQ9b,MAAQqmB,UAGe7E,GAAiB6E,IAO9C,OALQ7oB,QAAAkB,KAAK,oCAAoCunB,kCACjD3G,MACE,0JAEF3D,EAAOhZ,KAAK,YAKFyH,EAAApK,MAAQ2e,GAAkB,GACtC1C,EAAiBjc,MAAQ,EAEzB+b,EAAQ/b,OAAQ,QACTrC,GACCH,QAAAG,MAAM,yBAA0BA,GAClC2hB,MAAA,6BAA6B3hB,uCACnCge,EAAOhZ,KAAK,WACd,GA0mBQ4jB,CAAYN,GAElBlK,EAAQ/b,OAAQ,EAxeQwmB,MAC1B,IAAIC,EAAW,EAEf7qB,EAAawE,aAAqBqT,IAchC,GAbApX,GAAc2D,MAAMzD,YAAckX,EAG9BgT,EAAW,KAAQhT,EAAO,MAEhBrJ,EAAApK,MAAQ2e,GAAkB,GACtC1C,EAAiBjc,MAAQ,EACzBxC,QAAQC,IAAI,2DAEHgpB,EAAAhT,EAIPqI,EAAQ9b,OAAS3D,GAAc2D,MAAM1D,YAAc4M,EAAalJ,MAAO,CACzE,MAAMyS,EAAWiU,EAAmB5K,EAAQ9b,MAAMkG,OAAQuN,GAGpDsM,EAAajE,EAAQ9b,MAAMkG,OAAOuM,EAASuI,WAC7C+E,IAAe5B,GAAe4B,KAChC3V,EAAYpK,MAAQyS,EAASuI,UAC7BiB,EAAiBjc,MAAQyS,EAAShG,WAGpCpQ,GAAc2D,MAAMmD,YAAc,CAChC6X,UAAWvI,EAASuI,UACpBvO,UAAWgG,EAAShG,WAGtBpQ,GAAc2D,MAAM8Q,gBAAkB,CACpCkK,UAAWvI,EAASuI,UACpBvO,UAAWgG,EAAShG,UACpBka,cAAelU,EAASkU,cAC1B,SACS7K,EAAQ9b,OAAS3D,GAAc2D,MAAM1D,WAAa4M,EAAalJ,MAAO,CAG/E,MAAMyS,EAAWiU,EAAmB5K,EAAQ9b,MAAMkG,OAAQuN,GAE1DpX,GAAc2D,MAAMmD,YAAc,CAChC6X,UAAWvI,EAASuI,UACpBvO,UAAWgG,EAAShG,WAGtBpQ,GAAc2D,MAAM8Q,gBAAkB,CACpCkK,UAAWvI,EAASuI,UACpBvO,UAAWgG,EAAShG,UACpBka,cAAelU,EAASkU,cAE5B,IAGF/qB,EAAa0E,sBAA+BrD,IAC5BZ,GAAA2D,MAAQ,IAAK/C,MAmbTupB,GAGpB,MAAMI,EAAiB3D,KACApF,EAAA+I,EAGvBvS,WAAW,KACLwH,EAAc7b,QAChB6b,EAAc7b,MAAMoJ,QACpB5L,QAAQC,IAAI,2CAEb,KAGH,MAAMopB,EAAqBA,KACzBtL,EAAcvb,MAAQgB,OAAO0c,WAC7BC,EAAe3d,MAAQgB,OAAO4c,aAGzB5c,OAAA/B,iBAAiB,SAAU4nB,GAGlC,MAAMC,EAAkBjJ,EACxBA,EAAuBA,KACjBiJ,GAAiCA,IAC9B9lB,OAAAjC,oBAAoB,SAAU8nB,MAIzCE,EAAY,KAGVnrB,EAAakC,QAGT+f,GACmBA,kDAt9CvBvT,EAgMM,MAAA,CAhMDM,MAAM,cAAcoc,SAAS,YAAQ,gBAAJ/e,IAAI4T,EAAiB/Q,QAAO6U,KAE3B7D,EAAO9b,OAA5CqK,IAAAC,EAmGM,MAnGNC,GAmGM,CAlGJC,EAiGM,MAjGNC,GAiGM,CA/FJD,EAyCM,MAzCNE,GAyCM,CAxCJF,EAuCM,MAvCNK,GAuCM,CArCJL,EAiBM,MAjBNS,GAiBM,CAhBJT,EAeM,MAfNiG,GAeM,CAdJjG,EAGM,MAAA,KAAA,CAFJA,EAAyC,KAAzCgB,GAAoBC,EAAAqQ,EAAA9b,OAASuhB,MAAI,GACjC/W,EAAuD,QAAvDkB,GAA6BD,EAAAqQ,EAAA9b,OAASinB,QAAM,KAE9Czc,EASM,MAAA,CATDI,MAAM,mCAAiC,CAC1CJ,EAGS,SAAA,CAHDI,MAAM,yBAA0BE,QAAOsW,GAAarW,MAAM,wBAChE,iBAAe,4BACfP,EAA0B,IAAA,CAAvBI,MAAM,cAAY,MAAA,OAEvBJ,EAGS,SAAA,CAHDI,MAAM,mCAAoCE,QAAOyT,GAAaxT,MAAM,wBAC1E,iBAAe,4BACfP,EAA8B,IAAA,CAA3BI,MAAM,kBAAgB,MAAA,aAOjCJ,EAgBM,MAhBNmB,GAgBM,CAdJub,EAI8EC,GAAA,CAJxD,iBAAgBje,EAAYlJ,MAAG,cAAamb,GAAWnb,MAACma,WAC3E,cAAagB,GAAWnb,MAACuG,WAAa,gBAAe8T,EAAYra,MAAG,kBAAiBsa,EAActa,MACnGonB,mBAAoB1H,GAAmB2H,cAAczH,GACrD0H,qBAAsB7D,GAAqB8D,sBAAuB7D,GAClE8D,gBAAgB3D,GAAuB4D,cAAc1D,6FAGxDmD,EAA6CQ,GAAA,CAA7B,eAAcvM,GAAWnb,OAAA,KAAA,EAAA,CAAA,iBAGzCknB,EAA6FS,GAAA,CAAzE,iBAAgBpM,EAAavb,MAAG,qBAAoBwb,GAAiBxb,uDAGzFknB,EAAcU,UAMpBpd,EAkDM,MAlDNoB,GAkDM,CAhDJpB,EAYM,MAZNqB,GAYM,CAVJrB,EAGM,MAHNsB,GAGM,CAFJob,EACyFW,GAAA,CAD1E3hB,OAAQ4V,EAAO9b,MAACkG,OAASkE,YAAaA,EAAWpK,MAAGmD,YAAa8Y,EAAgBjc,MAC7FkJ,aAAcA,EAAYlJ,MAAG8nB,aAAavc,GAAawc,eAAe3I,oEAG3E5U,EAIM,MAJNkG,GAIM,CAHJwW,EAEuFc,GAAA,CAFvE9hB,OAAQ4V,EAAO9b,MAACkG,OAAS3J,YAAaF,GAAa2D,MAACzD,YACjE6N,YAAaA,EAAWpK,MAAGmD,YAAa8Y,EAAgBjc,MACxD8Q,gBAAiB5H,EAAYlJ,MAAA,EAAO3D,SAAcyU,iBAAiB6V,kGAK1Enc,EAgBM,MAhBNmG,GAgBM,CAfJnG,EAcM,MAdNoG,GAcM,CAbJsW,EAYiBe,GAAA,CAZApqB,UAAWie,EAAO9b,MAACnC,UAAYqI,OAAQ4V,EAAO9b,MAACkG,OAC7D3J,YAAaF,GAAa2D,MAACzD,YAAcgZ,aAAcA,EAAYvV,MAAG3D,cAAeA,GAAa2D,MAClGkJ,aAAcA,EAAYlJ,MAAGkoB,OAAM3I,GAAY4I,iBAAiBhH,GAChEiH,YAAY/I,GAAkBgJ,eAAe7I,GAAe8I,cAAc7I,GAC1E8I,mBAAoB7J,KAGV,mBACT,IAEsG,MAFtG8J,EAEsGC,EAAA,CAFnFrd,qBAAsB8Q,EAAgBlc,QAAK2G,MAAOsX,GAAiBje,MACnFxD,SAAU6hB,GAAare,MAAG,aAAYud,EAAevd,MAAG,WAAUwd,EAAaxd,MAC/E,cAAY,EAAQ,iBAAcikB,GAAgCyE,aAAa3C,2JAO1Fvb,EAaM,MAbN8B,GAaM,CAZJ9B,EAWM,MAXNgC,GAWM,CAVJhC,EASQ,QATRmC,GASQ,GATmB,OACtBlB,EAAGvC,EAAYlJ,MAAA,SAAA,YAA2B,eAAYyL,EAAGrB,EAAWpK,OAAG,WACnEyL,EAAGwQ,EAAgBjc,MAAA,GAAO,IACjC,GAAY8b,EAAA9b,MAAQkG,OAAOkE,UAAczD,MAAMsV,EAAgBjc,QAA/DqK,IAAAC,EAEO,OAF2DsC,GAAA,KAC5DnB,EAAAqQ,EAAA9b,MAAQkG,OAAOkE,EAAWpK,OAAE2G,MAAMsV,EAAAjc,OAAkBoE,MAAO,KACjE,aACAoG,EAEO,OAAA,CAFDI,MAAKI,EAAA,CAAC,OAAe8S,GAAU9d,MAAA,uBAAA,gBAA0C,SACvE8d,GAAU9d,MAAA,YAAA,cAAA,gBAUd+b,EAAO/b,OAAvBqK,IAAAC,EAOM,MAPN2G,GAOM,IAAAtG,EAAA,KAAAA,EAAA,GAAA,CANJH,EAKM,MAAA,CALDI,MAAM,oBAAkB,CAC3BJ,EAEM,MAAA,CAFDI,MAAM,8BAA8BkN,KAAK,WAC5CtN,EAA+C,OAAzC,CAAAI,MAAM,mBAAkB,gBAEhCJ,EAAsC,IAAnC,CAAAI,MAAM,QAAO,iCAKpBP,IAAAC,EAYM,MAZN4G,GAYM,CAXJ1G,EAUM,MAVN2C,GAUM,CATJ3C,EAQM,MARN4C,GAQM,CAPJ5C,EAMM,MANN6C,GAMM,CALJ1C,EAAA,KAAAA,EAAA,GAAAH,EAA0B,UAAtB,qBAAiB,IACrBG,EAAA,KAAAA,EAAA,GAAAH,EAA6D,IAA1D,CAAAI,MAAM,QAAO,6CAAyC,IACzDsc,EAEcyB,EAAA,CAFDC,GAAG,WAAWhe,MAAM,8BAC/B,IAAgC,IAAAD,EAAA,KAAAA,EAAA,GAAA,CAAhCH,EAAgC,IAAA,CAA7BI,MAAM,oBAAkB,MAAA,KAAK,sBAClC,sBAOoDoR,EAAehc,WAA3EsK,EA8DM,MAAA,OA9DDM,MAAKI,EAAA,CAAC,QAAO,CAAA6d,KAAiB7M,EAAehc,SAA4B8K,QAAOwT,KACnF9T,EA4DM,MAAA,CA5DDI,MAAM,wBAAyBE,sBAAD,OAAW,CAAA,YAC5CN,EA0DM,MAAA,CA1DDI,MAAM,iBAAe,CACxBJ,EAGM,MAAA,CAHDI,MAAM,gBAAc,CACvBD,EAAA,KAAAA,EAAA,GAAAH,EAAsD,KAAlD,CAAAI,MAAM,eAAc,6BAAyB,IACjDJ,EAA2E,SAAA,CAAnEjF,KAAK,SAASqF,MAAM,YAAaE,QAAOwT,s6FAoDlD9T,EAEM,MAAA,CAFDI,MAAM,gBAAc,CACvBJ,EAAwF,SAAA,CAAhFjF,KAAK,SAASqF,MAAM,kBAAmBE,QAAOwT,IAAkB"}