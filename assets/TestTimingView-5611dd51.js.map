{"version":3,"file":"TestTimingView-5611dd51.js","sources":["../../src/utils/novemberLyrics.ts","../../src/views/TestTimingView.vue"],"sourcesContent":["// Utility to parse November lyrics and create timed word data for testing\n\nimport { parseLyricsWithMetadata } from './lyricsParser'\n\nimport { TIMING, TimingUtils } from '../models/TimingConstants'\n\ninterface Syllable {\n  text: string\n  startTime: number\n  endTime: number\n}\n\ninterface TimedWord {\n  id: string\n  text: string\n  startTime: number\n  endTime: number\n  syllables: Syllable[]\n}\n\n\n\nconst NOVEMBER_LYRICS = `[@TITLE:Meet Me In November]\n[@AUTHOR:Ancient Wizard]\n\n[@CAPTION:You GO Marry Poppins!]\nSu/per/cal/i/frag/i/lis/tic/ex/pi/al/i/do/cious!\n\n[@CAPTION:Verse 1]\nMeet me in No/vem/ber, like a song of sto/ries told.\nSo per/fect it can't be real, yet hope will make it so.\nSpeak my name with love, and I will know your soul.\nWhere love can find a voice, two hearts will live as one.\n\n[@CAPTION:Verse 2]\nWe meet in No/vem/ber, like a song of sto/ries told.\nSo per/fect it be/came real, where hope has made it so.\nYou spoke my name with love; you'd al/ways felt it so.\nI al/rea/dy fall/ing, my heart knew it was home.\n\n[@CAPTION:Pre Chorus]\nCome meet me this No/vem/ber, to live our life fore/told.\nOur Mo/ments yet to hap/pen, al/rea/dy feel like old.\n\n[@CAPTION:Chorus]\nI Choose You! Wal/king hand in hand.\nI Choose You! Danc/ing through the night.\nI Choose You.\n\n[@CAPTION:Verse 3]\nOur time a con/ver/sa/tion, our words a love song.\nWe sang in/to each ot/her, where love we grew made strong.\nIn that per/fect mel/o/dy, our souls had found their home.\n\n[@CAPTION:Verse 4]\nYou're my Tex/as in No/vem/ber; our life made a new.\nSo per/fect it be/came truth, where hope has made it so.\nI al/rea/dy fall/ing, my heart has come home.\n\n[@CAPTION:Chorus]\nI Choose You! Now and in Nov/em/ber.\nI Choose You! Now and in for/e/ver.\nI Choose You!\n\n[@CAPTION:Bridge]\nWe star/ted in, A Tex/as No/vem/ber,\nand in that mo/ment, you found your heart a home.\n\n[@CAPTION:Pre Chorus (reprise)]\nCome meet me in No/vem/ber, to live our life fore/told.\nOur mo/ments yet to hap/pen, al/rea/dy feel like old.\n\n[@CAPTION:Final Chorus]\nYou Choose Me! In all No/vem/ber.\nYou Choose Me! Make it for/e/ver.\n\n[@CAPTION:(whisper)]\nI do.\n`\n\nexport function parseNovemberLyrics(): TimedWord[] {\n  const words: TimedWord[] = []\n  let currentTime = 0\n  let wordId = 0\n  const beatInterval = 0.8 // Longer intervals for more obvious gaps\n  const wordDuration = 0.4 // Words are shorter than the beat interval\n\n  console.log(`🎵 Generating lyrics with: wordDuration=${wordDuration}s, beatInterval=${beatInterval}s`)\n  console.log(`⚙️ Using centralized timing: minGap=${TIMING.word.collisionMargin}ms, minSyllable=${TIMING.syllable.minDuration}ms`)\n\n  // Parse the lyrics with metadata handling (like the main app)\n  const { lyrics, metadata } = parseLyricsWithMetadata(NOVEMBER_LYRICS)\n\n  console.log('📋 Parsed metadata:', {\n    title: metadata.title,\n    author: metadata.author,\n    captions: metadata.captions?.length || 0\n  })\n\n  // Process only the lyrics lines (skip metadata)\n  const lyricsLines = lyrics.filter(line => line.type === 'lyrics' || !line.type)\n  console.log(`🎵 Processing ${lyricsLines.length} lyrics lines (skipping ${lyrics.length - lyricsLines.length} metadata lines)`)\n\n  for (const lyricLine of lyricsLines) {\n    const lineText = lyricLine.text\n\n    // Skip empty lines\n    if (!lineText.trim()) {\n      continue\n    }\n\n    // Handle special stage directions\n    if (lineText.trim().startsWith('(') && lineText.trim().endsWith(')')) {\n      const stageLine = lineText.trim().slice(1, -1) // Remove parentheses\n      words.push(createTimedWord(wordId++, stageLine, currentTime, currentTime + 1))\n      currentTime += 1.5\n      continue\n    }\n\n    // Split line into words (separated by spaces)\n    const lineWords = lineText.split(/\\s+/).filter((word: string) => word.trim())\n\n    for (const word of lineWords) {\n      // Remove punctuation for processing but keep it for display\n      const cleanWord = word.replace(/[.,!?;:]/g, '')\n      const punctuation = word.match(/[.,!?;:]/g)?.[0] || ''\n\n      // Calculate actual word duration (may be extended for minimum syllable requirements)\n      let actualWordDuration = wordDuration\n\n      if (cleanWord.includes('/')) {\n        // Multi-syllable word with musical timing distribution\n        const syllableParts = cleanWord.split('/')\n        const syllables: Syllable[] = []\n\n        // Use centralized syllable weighting system for consistent timing\n        const weights = TimingUtils.calculateSyllableWeights(syllableParts.length)\n\n        const totalWeight = weights.reduce((sum: number, weight: number) => sum + weight, 0)\n\n        // Ensure syllable durations meet minimum requirements\n        const minSyllableDurationSec = TIMING.syllable.minDuration / 1000\n        const totalMinDuration = minSyllableDurationSec * syllableParts.length\n\n        if (wordDuration < totalMinDuration) {\n          actualWordDuration = totalMinDuration\n          console.warn(`⚠️ Test data: Extended word \"${cleanWord}\" from ${wordDuration}s to ${actualWordDuration}s for ${syllableParts.length} syllables`)\n        }\n\n        const syllableDurations = weights.map((weight: number) => {\n          const baseDuration = minSyllableDurationSec\n          const extraDuration = ((weight / totalWeight) * (actualWordDuration - totalMinDuration))\n          return baseDuration + extraDuration\n        })\n\n        let syllableStartTime = currentTime\n        syllableParts.forEach((syllable: string, index: number) => {\n          const endTime = syllableStartTime + syllableDurations[index]\n          syllables.push({\n            text: syllable + (index === syllableParts.length - 1 ? punctuation : ''),\n            startTime: syllableStartTime,\n            endTime,\n          })\n          syllableStartTime = endTime\n        })\n\n        words.push({\n          id: `word-${wordId++}`,\n          text: cleanWord.replace(/\\//g, '') + punctuation,\n          startTime: currentTime,\n          endTime: currentTime + actualWordDuration,\n          syllables,\n        })\n      } else {\n        // Single word or \"FULL\" word\n        const isFullWord = cleanWord.length > 6 // Longer words become \"FULL\"\n\n        if (isFullWord) {\n          words.push({\n            id: `word-${wordId++}`,\n            text: 'FULL',\n            startTime: currentTime,\n            endTime: currentTime + wordDuration,\n            syllables: [\n              {\n                text: 'FULL',\n                startTime: currentTime,\n                endTime: currentTime + wordDuration,\n              },\n            ],\n          })\n        } else {\n          words.push(createTimedWord(wordId++, cleanWord + punctuation, currentTime, currentTime + actualWordDuration))\n        }\n      }\n\n      // Apply realistic word spacing using beat-based gaps\n      // Use a fraction of the beat interval as gap (more musical)\n      const wordGap = beatInterval - actualWordDuration // Remaining time in beat\n      const minGap = TIMING.word.collisionMargin / 1000 // Minimum safe gap\n      const actualGap = Math.max(wordGap * 0.6, minGap) // Use 60% of available gap, minimum safe gap\n\n      // Debug first few words to show gap calculations\n      if (wordId <= 5) {\n        console.log(`📏 Word \"${cleanWord}\": duration=${actualWordDuration.toFixed(3)}s, gap=${actualGap.toFixed(3)}s, next=${(currentTime + actualWordDuration + actualGap).toFixed(3)}s`)\n      }\n\n      currentTime += actualWordDuration + actualGap\n    }\n\n    // Add pause between lines\n    currentTime += beatInterval * 0.5\n  }\n\n  // Debug: Log first few words to see timing and gaps\n  console.log('📊 First 5 words with gaps:')\n  words.slice(0, 5).forEach((word, index) => {\n    const nextWord = words[index + 1]\n    const gap = nextWord ? nextWord.startTime - word.endTime : 0\n    console.log(\n      `  ${index + 1}. \"${word.text}\": ${word.startTime.toFixed(3)}s - ${word.endTime.toFixed(3)}s` +\n      (gap > 0 ? ` → gap: ${gap.toFixed(3)}s` : ' (last)')\n    )\n  })\n\n  return words\n}\n\nfunction createTimedWord(id: number, text: string, startTime: number, endTime: number): TimedWord {\n  return {\n    id: `word-${id}`,\n    text,\n    startTime,\n    endTime,\n    syllables: [\n      {\n        text,\n        startTime,\n        endTime,\n      },\n    ],\n  }\n}\n\n// Calculate total duration for the test\nexport function getTestDuration(): number {\n  const words = parseNovemberLyrics()\n  return words.length > 0 ? Math.max(...words.map(w => w.endTime)) + 2 : 60\n}\n\n// Debug function to test metadata parsing\nexport function debugNovemberParsing() {\n  console.log('🧪 DEBUG: Testing November lyrics parsing with metadata')\n  const { lyrics, metadata } = parseLyricsWithMetadata(NOVEMBER_LYRICS)\n\n  console.log('📋 Metadata extracted:')\n  console.log(`  Title: \"${metadata.title}\"`)\n  console.log(`  Author: \"${metadata.author}\"`)\n  console.log(`  Captions: ${metadata.captions?.length || 0} found`)\n  metadata.captions?.forEach((caption: string, index: number) => {\n    console.log(`    ${index + 1}. \"${caption}\"`)\n  })\n\n  console.log(`\\n📝 Lines breakdown (${lyrics.length} total):`)\n  lyrics.forEach((line, index) => {\n    const isMetadata = line.type !== 'lyrics' && line.type !== undefined\n    console.log(`  ${index + 1}. [${isMetadata ? 'META' : 'LYRICS'}] \"${line.text}\"`)\n    if (!isMetadata && line.words) {\n      console.log(`     → ${line.words.length} words: ${line.words.map(w => w.word).join(', ')}`)\n    }\n  })\n\n  const lyricsOnly = lyrics.filter(line => line.type === 'lyrics' || !line.type)\n  console.log(`\\n✅ Result: ${lyricsOnly.length} lyrics lines, ${lyrics.length - lyricsOnly.length} metadata lines skipped`)\n}\n\nexport { type TimedWord, type Syllable }\n","<template>\n  <div class=\"test-timing-page\">\n    <!-- Header -->\n    <div class=\"header bg-light p-3 mb-4\">\n      <div class=\"container\">\n        <div class=\"row align-items-center\">\n          <div class=\"col\">\n            <nav aria-label=\"breadcrumb\" class=\"mb-2\">\n              <ol class=\"breadcrumb mb-0\">\n                <li class=\"breadcrumb-item\">\n                  <router-link to=\"/compose\" class=\"text-decoration-none\">\n                    <i class=\"bi bi-arrow-left\"></i> Back to Projects\n                  </router-link>\n                </li>\n                <li class=\"breadcrumb-item active\">Word Timing Test</li>\n              </ol>\n            </nav>\n            <h2 class=\"mb-1\">Word Timing Editor Test</h2>\n            <p class=\"mb-0 text-muted\">Testing drag & drop word timing with \"November\" lyrics</p>\n          </div>\n          <div class=\"col-auto\">\n            <button class=\"btn btn-primary btn-sm me-2\" @click=\"resetTiming\"><i class=\"bi bi-arrow-clockwise\"></i>\n              Reset</button>\n            <button class=\"btn btn-info btn-sm\" @click=\"showDebugInfo = !showDebugInfo\"><i class=\"bi bi-bug\"></i>\n              Debug</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main Content -->\n    <!-- Slide-in Help Panel -->\n    <div class=\"help-panel-container\">\n      <div class=\"help-panel\" :class=\"{ visible: showHelp }\" @mouseenter=\"showHelp = true\"\n        @mouseleave=\"showHelp = false\">\n        <div class=\"help-tab\">\n          <i class=\"bi bi-question-circle\"></i>\n          <span>Help</span>\n        </div>\n        <div class=\"help-content\">\n          <h5><i class=\"bi bi-info-circle\"></i> Word Timing Editor</h5>\n          <ul class=\"help-list\">\n            <li><strong>Select:</strong> Click on any word box to select it</li>\n            <li><strong>Move:</strong> Drag a word box left/right to change its start time</li>\n            <li><strong>Resize:</strong> Drag the green handle on the right edge to change duration</li>\n            <li><strong>Syllables:</strong> Drag orange dividers within multi-syllable words</li>\n            <li><strong>View:</strong> Adjust the view window controls above to zoom in/out</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main Content -->\n    <div class=\"container\">\n      <!-- Word Timing Editor -->\n      <div class=\"timing-editor-section mb-4\">\n        <h4>Word Timing Editor</h4>\n        <WordTimingEditor :words=\"words\" :duration=\"duration\" :view-start=\"viewStart\" :view-end=\"viewEnd\"\n          :show-debug=\"showDebug\" :show-background=\"true\" :show-border=\"true\" @update:words=\"handleWordsUpdate\"\n          @select-word=\"handleWordSelect\" />\n      </div>\n\n      <!-- Controls -->\n      <div class=\"controls-section mb-4\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <label class=\"form-label\">View Window (seconds)</label>\n            <div class=\"row\">\n              <div class=\"col\">\n                <input v-model.number=\"viewStartInput\" type=\"number\" class=\"form-control form-control-sm\" min=\"0\"\n                  :max=\"duration\" step=\"0.5\" placeholder=\"Start\" />\n              </div>\n              <div class=\"col\">\n                <input v-model.number=\"viewDurationInput\" type=\"number\" class=\"form-control form-control-sm\" min=\"0.1\"\n                  :max=\"duration - viewStart\" step=\"0.5\" placeholder=\"Duration\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-4\">\n            <label class=\"form-label\">Selected Word</label>\n            <div class=\"form-control form-control-sm bg-light\">\n              {{\n                selectedWord\n                  ? `\"${selectedWord.text}\" (${selectedWord.startTime.toFixed(1)}s - ${selectedWord.endTime.toFixed(1)}s)`\n                  : 'None'\n              }}\n            </div>\n          </div>\n          <div class=\"col-md-4\">\n            <label class=\"form-label\">Total Duration</label>\n            <div class=\"form-control form-control-sm bg-light\">\n              {{ duration.toFixed(1) }} seconds ({{ Math.floor(duration / 60) }}:{{\n                Math.floor(duration % 60)\n                  .toString()\n                  .padStart(2, '0')\n              }})\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Lyrics Display -->\n      <div class=\"lyrics-section mb-4\">\n        <h5>Current Lyrics with Timing</h5>\n        <div class=\"lyrics-display p-3 border rounded bg-light\">\n          <div v-for=\"(line, lineIndex) in lyricsLines\" :key=\"lineIndex\" class=\"lyrics-line mb-2\">\n            <span v-for=\"word in line\" :key=\"word.id\" class=\"lyrics-word me-1\"\n              :class=\"{ 'selected-word': selectedWordId === word.id }\" @click=\"handleWordSelected(word.id)\">\n              {{ word.text }}\n              <small class=\"text-muted\">({{ word.startTime.toFixed(1) }}s)</small>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Debug Info -->\n      <div v-if=\"showDebugInfo\" class=\"debug-section\">\n        <h5>Debug Information</h5>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <h6>Words in View ({{ visibleWords.length }})</h6>\n            <div class=\"debug-box\">\n              <div v-for=\"word in visibleWords\" :key=\"word.id\" class=\"debug-word mb-1\">\n                <strong>{{ word.text }}</strong>: {{ word.startTime.toFixed(2) }}s - {{ word.endTime.toFixed(2) }}s\n                <span v-if=\"word.syllables.length > 1\" class=\"text-muted\"> ({{ word.syllables.length }} syllables)\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <h6>Selected Word Details</h6>\n            <div class=\"debug-box\">\n              <pre v-if=\"selectedWord\">{{ JSON.stringify(selectedWord, null, 2) }}</pre>\n              <div v-else class=\"text-muted\">No word selected</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Close container -->\n  </div>\n  <!-- Close test-timing-page -->\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue'\nimport WordTimingEditor from '@/components/WordTimingEditor.vue'\nimport { parseNovemberLyrics, getTestDuration, type TimedWord } from '@/utils/novemberLyrics'\nimport { RelativeSyllableTiming } from '@/models/RelativeSyllableTiming'\n\n// Reactive state\nconst words = ref<TimedWord[]>([])\nconst duration = ref(60)\nconst viewStartInput = ref(0)\nconst viewDurationInput = ref(3)\nconst selectedWordId = ref<string | null>(null)\nconst showDebugInfo = ref(true) // Enable debug by default in test rig\nconst showHelp = ref(false)\nconst showDebug = computed(() => showDebugInfo.value)\n\n// Computed properties for safe input handling\nconst viewStart = computed(() => {\n  const value = Number(viewStartInput.value)\n  return isNaN(value) ? 0 : Math.max(0, Math.min(value, duration.value))\n})\n\nconst viewDuration = computed(() => {\n  const value = Number(viewDurationInput.value)\n  return isNaN(value) ? 3 : Math.max(0.1, Math.min(value, duration.value - viewStart.value))\n})\n\nconst viewEnd = computed(() => {\n  return viewStart.value + viewDuration.value\n})\n\n// Computed properties\nconst selectedWord = computed(() => {\n  return selectedWordId.value ? words.value.find(w => w.id === selectedWordId.value) : null\n})\n\nconst visibleWords = computed(() => {\n  return words.value.filter(word => {\n    return word.endTime >= viewStart.value && word.startTime <= viewEnd.value\n  })\n})\n\nconst lyricsLines = computed(() => {\n  // Group words into lines for display (rough approximation)\n  const lines: TimedWord[][] = []\n  let currentLine: TimedWord[] = []\n  let lastEndTime = 0\n\n  for (const word of words.value) {\n    // New line if there's a significant gap or we have too many words\n    if (word.startTime - lastEndTime > 1.0 || currentLine.length > 8) {\n      if (currentLine.length > 0) {\n        lines.push([...currentLine])\n        currentLine = []\n      }\n    }\n\n    currentLine.push(word)\n    lastEndTime = word.endTime\n  }\n\n  if (currentLine.length > 0) {\n    lines.push(currentLine)\n  }\n\n  return lines\n})\n\n// Methods\n// const handleWordUpdate = (wordId: string, startTime: number, endTime: number) => {\n//   const wordIndex = words.value.findIndex(w => w.id === wordId)\n//   if (wordIndex !== -1) {\n//     const word = words.value[wordIndex]\n//     const oldStartTime = word.startTime\n//     const oldEndTime = word.endTime\n\n//     // Update word timing\n//     word.startTime = startTime\n//     word.endTime = endTime\n\n//     // SMART SYLLABLE HANDLING: Only adjust what needs to change\n//     if (word.syllables.length > 1) {\n//       const startTimeChanged = Math.abs(startTime - oldStartTime) > 0.01\n//       const endTimeChanged = Math.abs(endTime - oldEndTime) > 0.01\n\n//       if (startTimeChanged && !endTimeChanged) {\n//         // Moving word start: shift all syllables equally\n//         const deltaStart = startTime - oldStartTime\n//         word.syllables.forEach((syllable) => {\n//           syllable.startTime += deltaStart\n//           syllable.endTime += deltaStart\n//         })\n//         console.log(`MOVE START: \"${word.text}\" shifted by ${deltaStart.toFixed(2)}s`)\n\n//       } else if (endTimeChanged && !startTimeChanged) {\n//         // Resizing word end: redistribute syllables proportionally from original start\n//         const originalTotalDuration = oldEndTime - oldStartTime\n//         const newTotalDuration = endTime - oldStartTime\n//         const scaleFactor = newTotalDuration / originalTotalDuration\n\n//         console.log(`RESIZE END: \"${word.text}\" ${oldEndTime.toFixed(2)}s -> ${endTime.toFixed(2)}s (scale: ${scaleFactor.toFixed(2)})`)\n\n//         let syllableStartTime = oldStartTime\n//         word.syllables.forEach((syllable) => {\n//           const originalDuration = syllable.endTime - syllable.startTime\n//           const newDuration = originalDuration * scaleFactor\n//           syllable.startTime = syllableStartTime\n//           syllable.endTime = syllableStartTime + newDuration\n//           syllableStartTime = syllable.endTime\n//         })\n\n//         console.log(`   -> Syllables: ${word.syllables.map(s => `${s.text}(${s.startTime.toFixed(1)}-${s.endTime.toFixed(1)})`).join(' ')}`)\n\n//       } else if (startTimeChanged && endTimeChanged) {\n//         // Both changed: adjust first and last syllable boundaries, keep middle boundaries\n//         word.syllables[0].startTime = startTime\n//         word.syllables[word.syllables.length - 1].endTime = endTime\n//         console.log(`MOVE WORD: \"${word.text}\" adjusted boundaries only`)\n//       }\n//     } else {\n//       // Single syllable: just update it to match word\n//       word.syllables[0].startTime = startTime\n//       word.syllables[0].endTime = endTime\n//     }\n//   }\n// }\n\n// const handleSyllableUpdate = (wordId: string, syllableIndex: number, startTime: number, endTime: number) => {\n//   const word = words.value.find(w => w.id === wordId)\n//   if (word && word.syllables[syllableIndex]) {\n//     word.syllables[syllableIndex].startTime = startTime\n//     word.syllables[syllableIndex].endTime = endTime\n\n//     // Update word boundaries if needed\n//     word.startTime = Math.min(word.startTime, startTime)\n//     word.endTime = Math.max(word.endTime, endTime)\n\n//     console.log(`Updated syllable \"${word.syllables[syllableIndex].text}\": ${startTime.toFixed(2)}s - ${endTime.toFixed(2)}s`)\n//   }\n// }\n\nconst handleWordSelected = (wordId: string | null) => {\n  selectedWordId.value = wordId\n\n  if (wordId) {\n    const word = words.value.find(w => w.id === wordId)\n    if (word) {\n      console.log(`Selected word: \"${word.text}\"`)\n    }\n  }\n}\n\n// New handlers for the simplified component\nconst handleWordsUpdate = (updatedWords: any[]) => {\n  // Use RelativeSyllableTiming model for proper syllable handling\n  updatedWords.forEach((updatedWordData) => {\n    const originalWordIndex = words.value.findIndex(w => w.id === updatedWordData.id)\n    if (originalWordIndex !== -1) {\n      const originalWord = words.value[originalWordIndex]\n      const oldStartTime = originalWord.startTime\n      const oldEndTime = originalWord.endTime\n      const newStartTime = updatedWordData.startTime\n      const newEndTime = updatedWordData.endTime\n\n      // Create RelativeSyllableTiming instance from current word data\n      // Convert seconds to milliseconds and create absolute syllables for conversion\n      const absoluteSyllables = originalWord.syllables.map(syl => ({\n        text: syl.text,\n        startTime: Math.round(syl.startTime * 1000),\n        endTime: Math.round(syl.endTime * 1000)\n      }))\n\n      const timing = RelativeSyllableTiming.fromAbsoluteSyllables(\n        originalWord.id,\n        originalWord.text,\n        Math.round(oldStartTime * 1000),\n        Math.round(oldEndTime * 1000),\n        absoluteSyllables\n      )\n\n      let updatedTiming: RelativeSyllableTiming\n\n      // Determine the type of change and apply appropriate operation\n      const startTimeChanged = Math.abs(newStartTime - oldStartTime) > 0.01\n      const endTimeChanged = Math.abs(newEndTime - oldEndTime) > 0.01\n\n      if (startTimeChanged && !endTimeChanged) {\n        // Moving word: use moveWord method\n        updatedTiming = timing.moveWord(Math.round(newStartTime * 1000))\n        if (showDebugInfo.value) console.log(`MOVE: \"${originalWord.text}\" moved to ${newStartTime.toFixed(2)}s`)\n\n      } else if (endTimeChanged && !startTimeChanged) {\n        // Resizing word end: use resizeWordEnd method\n        updatedTiming = timing.resizeWordEnd(Math.round(newEndTime * 1000))\n        if (showDebugInfo.value) console.log(`RESIZE: \"${originalWord.text}\" resized to ${newEndTime.toFixed(2)}s`)\n\n      } else if (startTimeChanged && endTimeChanged) {\n        // Both changed: first move, then resize\n        const movedTiming = timing.moveWord(Math.round(newStartTime * 1000))\n        updatedTiming = movedTiming.resizeWordEnd(Math.round(newEndTime * 1000))\n        if (showDebugInfo.value) console.log(`MOVE & RESIZE: \"${originalWord.text}\" moved and resized`)\n\n      } else {\n        // No change needed\n        updatedTiming = timing\n      }\n\n      // Convert back to TimedWord format (milliseconds to seconds)\n      const updatedTimingWordData = updatedTiming.getWordData()\n      const updatedAbsoluteSyllables = updatedTiming.getAbsoluteSyllables()\n\n      // Update the original word with new timing data\n      originalWord.startTime = updatedTimingWordData.startTime / 1000\n      originalWord.endTime = updatedTimingWordData.endTime / 1000\n      originalWord.syllables = updatedAbsoluteSyllables.map(syl => ({\n        text: syl.text,\n        startTime: syl.startTime / 1000,\n        endTime: syl.endTime / 1000\n      }))\n    }\n  })\n\n  console.log('Words updated:', updatedWords.length)\n}\n\nconst handleWordSelect = (wordId: string | null) => {\n  handleWordSelected(wordId)\n}\n\nconst resetTiming = () => {\n  words.value = parseNovemberLyrics()\n  duration.value = getTestDuration()\n  selectedWordId.value = null\n  console.log('Timing data reset')\n}\n\n// Lifecycle\nonMounted(() => {\n  resetTiming()\n})\n</script>\n\n<style scoped>\n.test-timing-page {\n  min-height: 100vh;\n  background: #f8f9fa;\n}\n\n.timing-editor-section {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.controls-section {\n  background: white;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.lyrics-section {\n  background: white;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.lyrics-display {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.lyrics-word {\n  cursor: pointer;\n  padding: 2px 4px;\n  border-radius: 3px;\n  transition: background-color 0.2s;\n  display: inline-block;\n}\n\n.lyrics-word:hover {\n  background-color: rgba(0, 123, 255, 0.1);\n}\n\n.lyrics-word.selected-word {\n  background-color: rgba(255, 193, 7, 0.3);\n  font-weight: bold;\n}\n\n.debug-section {\n  background: white;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n\n.debug-box {\n  background: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 4px;\n  padding: 10px;\n  max-height: 200px;\n  overflow-y: auto;\n  font-family: 'Courier New', monospace;\n  font-size: 12px;\n}\n\n.debug-word {\n  padding: 2px 0;\n  border-bottom: 1px solid #eee;\n}\n\n.lyrics-line {\n  line-height: 1.8;\n}\n\n/* Slide-in Help Panel */\n.help-panel-container {\n  position: fixed;\n  top: 50%;\n  left: 0;\n  z-index: 1000;\n  transform: translateY(-50%);\n}\n\n.help-panel {\n  position: relative;\n  width: 250px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 0 8px 8px 0;\n  box-shadow: 2px 0 12px rgba(0, 0, 0, 0.2);\n  transform: translateX(-230px);\n  transition: transform 0.3s ease-in-out;\n  color: white;\n}\n\n.help-panel.visible {\n  transform: translateX(0);\n}\n\n.help-tab {\n  position: absolute;\n  right: -40px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 8px 12px 8px 8px;\n  border-radius: 0 8px 8px 0;\n  cursor: pointer;\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  font-size: 12px;\n  font-weight: 600;\n  white-space: nowrap;\n  box-shadow: 2px 0 8px rgba(0, 0, 0, 0.15);\n}\n\n.help-tab i {\n  margin-bottom: 4px;\n  font-size: 14px;\n}\n\n.help-content {\n  padding: 20px;\n}\n\n.help-content h5 {\n  margin: 0 0 15px 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: #fff;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  padding-bottom: 8px;\n}\n\n.help-content h5 i {\n  margin-right: 8px;\n  color: #ffd700;\n}\n\n.help-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.help-list li {\n  padding: 6px 0;\n  font-size: 13px;\n  line-height: 1.4;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.help-list li:last-child {\n  border-bottom: none;\n}\n\n.help-list li strong {\n  color: #ffd700;\n  font-weight: 600;\n}\n\n/* Hover effects */\n.help-tab:hover {\n  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);\n}\n\n.help-panel:hover .help-tab {\n  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);\n}\n</style>\n"],"names":["NOVEMBER_LYRICS","parseNovemberLyrics","words","currentTime","wordId","beatInterval","wordDuration","TIMING","lyrics","metadata","parseLyricsWithMetadata","_a","lyricsLines","line","lyricLine","lineText","stageLine","createTimedWord","lineWords","word","cleanWord","punctuation","_b","actualWordDuration","syllableParts","syllables","weights","TimingUtils","totalWeight","sum","weight","minSyllableDurationSec","totalMinDuration","syllableDurations","baseDuration","extraDuration","syllableStartTime","syllable","index","endTime","wordGap","minGap","actualGap","nextWord","gap","id","text","startTime","getTestDuration","w","ref","duration","viewStartInput","viewDurationInput","selectedWordId","showDebugInfo","showHelp","showDebug","computed","viewStart","value","viewDuration","viewEnd","selectedWord","visibleWords","lines","currentLine","lastEndTime","handleWordSelected","handleWordsUpdate","updatedWords","updatedWordData","originalWordIndex","originalWord","oldStartTime","oldEndTime","newStartTime","newEndTime","absoluteSyllables","syl","timing","RelativeSyllableTiming","updatedTiming","startTimeChanged","endTimeChanged","updatedTimingWordData","updatedAbsoluteSyllables","handleWordSelect","resetTiming","onMounted","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_createVNode","_component_router_link","_cache","_hoisted_9","$event","_hoisted_10","_normalizeClass","_hoisted_11","_hoisted_12","WordTimingEditor","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_19","_hoisted_21","_hoisted_22","_toDisplayString","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_Fragment","_renderList","lineIndex","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_createTextVNode","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37"],"mappings":"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"}