{"version":3,"file":"TimingView-4230ba05.js","sources":["../../src/services/audioService.ts","../../src/models/MusicalTimingModel.ts","../../src/composables/useTimingAnalysis.ts","../../src/components/LyricsEditor.vue","../../src/components/LyricsPreview.vue","../../src/components/WaveformViewer.vue","../../src/components/TimingControlsPanel.vue","../../src/components/ProgressStats.vue","../../src/components/HotkeyHelp.vue","../../src/components/ViewportIndicator.vue","../../src/views/TimingView.vue"],"sourcesContent":["// Audio playback service using Web Audio API and HTML5 Audio\nimport type { PlaybackState, AudioFile } from '@/types/karaoke'\nimport { TimingUtils } from '@/models/TimingConstants'\n\nexport class AudioService {\n  private audio: HTMLAudioElement | null = null\n  private audioContext: AudioContext | null = null\n  private source: MediaElementAudioSourceNode | null = null\n  private analyser: AnalyserNode | null = null\n  private gainNode: GainNode | null = null\n  private isInitialized = false\n\n  // High-frequency timer for smooth updates\n  private updateTimer: number | null = null\n  private fastMode = false\n\n  private playbackState: PlaybackState = {\n    isPlaying: false,\n    currentTime: 0,\n    duration: 0,\n    volume: 1,\n    playbackRate: 1,\n    isLoaded: false,\n  }\n\n  private timeUpdateCallback?: (time: number) => void\n  private playbackStateCallback?: (state: PlaybackState) => void\n\n  constructor() {\n    this.initializeAudioContext()\n  }\n\n  private async initializeAudioContext() {\n    try {\n      // Check if we need to recreate context\n      if (this.audioContext && this.audioContext.state === 'closed') {\n        this.audioContext = null\n        this.analyser = null\n        this.gainNode = null\n        this.source = null\n        this.isInitialized = false\n      }\n\n      if (!this.audioContext || this.audioContext.state === 'closed') {\n        this.audioContext = new AudioContext()\n        this.analyser = this.audioContext.createAnalyser()\n        this.gainNode = this.audioContext.createGain()\n\n        this.analyser.fftSize = 2048\n        this.analyser.connect(this.audioContext.destination)\n        this.gainNode.connect(this.analyser)\n\n        this.isInitialized = true\n        console.log('Audio context initialized successfully')\n      }\n\n      // Resume context if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume()\n        console.log('Audio context resumed')\n      }\n    } catch (error) {\n      console.error('Failed to initialize audio context:', error)\n    }\n  }\n\n  async loadAudioFile(audioFile: AudioFile): Promise<boolean> {\n    try {\n      // Ensure audio context is properly initialized\n      await this.initializeAudioContext()\n\n      // Create or update HTML5 audio element\n      if (this.audio) {\n        this.audio.pause()\n        this.audio.src = ''\n      }\n\n      this.audio = new Audio()\n\n      // Set up event listeners\n      this.setupAudioEventListeners()\n\n      // Load the audio file\n      if (audioFile.file) {\n        const url = URL.createObjectURL(audioFile.file)\n        this.audio.src = url\n      } else if (audioFile.url) {\n        this.audio.src = audioFile.url\n      } else {\n        throw new Error('No audio file or URL provided')\n      }\n\n      // Connect to Web Audio API if initialized\n      if (this.isInitialized && this.audioContext && this.gainNode) {\n        try {\n          if (this.source) {\n            this.source.disconnect()\n          }\n          this.source = this.audioContext.createMediaElementSource(this.audio)\n          this.source.connect(this.gainNode)\n          console.log('Audio source connected to Web Audio API')\n        } catch (contextError) {\n          console.warn('Web Audio API connection failed, falling back to basic audio:', contextError)\n          // Continue without Web Audio API features\n        }\n      }\n\n      // Wait for audio to be ready\n      await new Promise<void>((resolve, reject) => {\n        const handleCanPlay = () => {\n          this.audio!.removeEventListener('canplaythrough', handleCanPlay)\n          this.audio!.removeEventListener('error', handleError)\n          resolve()\n        }\n\n        const handleError = (error: Event) => {\n          this.audio!.removeEventListener('canplaythrough', handleCanPlay)\n          this.audio!.removeEventListener('error', handleError)\n          reject(error)\n        }\n\n        this.audio!.addEventListener('canplaythrough', handleCanPlay)\n        this.audio!.addEventListener('error', handleError)\n        this.audio!.load()\n      })\n\n      this.playbackState.isLoaded = true\n\n      // Robust duration detection\n      const duration = await this.detectAudioDuration(audioFile)\n      this.playbackState.duration = duration\n      this.updatePlaybackState()\n\n      return true\n    } catch (error) {\n      console.error('Failed to load audio file:', error)\n      this.playbackState.isLoaded = false\n      this.updatePlaybackState()\n      return false\n    }\n  }\n\n  private setupAudioEventListeners() {\n    if (!this.audio) return\n\n    this.audio.addEventListener('timeupdate', () => {\n      this.playbackState.currentTime = this.audio!.currentTime * 1000 // Convert to ms\n      this.updatePlaybackState()\n\n      if (this.timeUpdateCallback) {\n        this.timeUpdateCallback(this.playbackState.currentTime)\n      }\n    })\n\n    this.audio.addEventListener('play', () => {\n      this.playbackState.isPlaying = true\n      this.updatePlaybackState()\n    })\n\n    this.audio.addEventListener('pause', () => {\n      this.playbackState.isPlaying = false\n      this.updatePlaybackState()\n    })\n\n    this.audio.addEventListener('ended', () => {\n      this.playbackState.isPlaying = false\n      this.playbackState.currentTime = 0\n      this.updatePlaybackState()\n    })\n\n    this.audio.addEventListener('loadedmetadata', () => {\n      this.playbackState.duration = this.audio!.duration * 1000\n      this.updatePlaybackState()\n    })\n  }\n\n  async play(): Promise<void> {\n    if (!this.audio || !this.playbackState.isLoaded) return\n\n    try {\n      // Ensure audio context is properly initialized\n      await this.initializeAudioContext()\n\n      // Resume AudioContext if suspended (required by some browsers)\n      if (this.audioContext && this.audioContext.state === 'suspended') {\n        await this.audioContext.resume()\n        console.log('Audio context resumed for playback')\n      }\n\n      await this.audio.play()\n      this.playbackState.isPlaying = true\n      this.startUpdateTimer() // Start high-frequency timer\n      this.updatePlaybackState()\n      console.log('Audio playback started successfully')\n    } catch (error) {\n      console.error('Failed to play audio:', error)\n      throw error\n    }\n  }\n\n  pause(): void {\n    if (this.audio) {\n      this.audio.pause()\n      this.stopUpdateTimer() // Stop high-frequency timer\n    }\n  }\n\n  stop(): void {\n    if (this.audio) {\n      this.audio.pause()\n      this.audio.currentTime = 0\n    }\n  }\n\n  seek(timeMs: number): void {\n    if (this.audio && this.playbackState.isLoaded) {\n      this.audio.currentTime = timeMs / 1000 // Convert to seconds\n\n      // Immediately update playback state to sync waveform red line\n      this.playbackState.currentTime = timeMs\n      this.updatePlaybackState()\n\n      // Trigger time update callback for immediate UI sync\n      if (this.timeUpdateCallback) {\n        this.timeUpdateCallback(timeMs)\n      }\n    }\n  }\n\n  setVolume(volume: number): void {\n    if (this.audio) {\n      this.audio.volume = Math.max(0, Math.min(1, volume))\n      this.playbackState.volume = this.audio.volume\n    }\n\n    if (this.gainNode) {\n      this.gainNode.gain.value = this.playbackState.volume\n    }\n\n    this.updatePlaybackState()\n  }\n\n  setPlaybackRate(rate: number): void {\n    if (this.audio) {\n      this.audio.playbackRate = Math.max(0.25, Math.min(4, rate))\n      this.playbackState.playbackRate = this.audio.playbackRate\n    }\n\n    this.updatePlaybackState()\n  }\n\n  getPlaybackState(): PlaybackState {\n    return { ...this.playbackState }\n  }\n\n  onTimeUpdate(callback: (time: number) => void): void {\n    this.timeUpdateCallback = callback\n  }\n\n  onPlaybackStateChange(callback: (state: PlaybackState) => void): void {\n    this.playbackStateCallback = callback\n  }\n\n  // Enable/disable fast refresh mode for smoother updates\n  setFastMode(enabled: boolean): void {\n    this.fastMode = enabled\n    if (this.playbackState.isPlaying) {\n      this.stopUpdateTimer()\n      this.startUpdateTimer()\n    }\n    const hz = enabled ? '12Hz' : '8Hz'\n    const interval = enabled ? '~83ms' : '~125ms'\n    console.log(`🔄 Refresh rate: ${hz} (${interval} intervals) - ${enabled ? 'FAST MODE' : 'Normal mode'}`)\n  }\n\n  // Toggle fast refresh mode for hotkey convenience\n  toggleFastMode(): void {\n    this.setFastMode(!this.fastMode)\n  }\n\n  // Get current fast mode state\n  getFastMode(): boolean {\n    return this.fastMode\n  }\n\n  private startUpdateTimer(): void {\n    if (this.updateTimer) {\n      clearInterval(this.updateTimer)\n    }\n\n    const interval = TimingUtils.getPlaybackUpdateInterval(this.fastMode)\n    this.updateTimer = window.setInterval(() => {\n      if (this.audio && this.playbackState.isPlaying) {\n        const currentTimeMs = this.audio.currentTime * 1000\n        this.playbackState.currentTime = currentTimeMs\n\n        if (this.timeUpdateCallback) {\n          this.timeUpdateCallback(currentTimeMs)\n        }\n      }\n    }, interval)\n  }\n\n  private stopUpdateTimer(): void {\n    if (this.updateTimer) {\n      clearInterval(this.updateTimer)\n      this.updateTimer = null\n    }\n  }\n\n  private updatePlaybackState(): void {\n    if (this.playbackStateCallback) {\n      this.playbackStateCallback({ ...this.playbackState })\n    }\n  }\n\n  // Get frequency data for visualization\n  getFrequencyData(): Uint8Array | null {\n    if (!this.analyser) return null\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount)\n    this.analyser.getByteFrequencyData(dataArray)\n    return dataArray\n  }\n\n  // Get time domain data for waveform\n  getTimeDomainData(): Uint8Array | null {\n    if (!this.analyser) return null\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount)\n    this.analyser.getByteTimeDomainData(dataArray)\n    return dataArray\n  }\n\n  // Generate waveform data from audio buffer\n  async generateWaveformData(samples: number = 1000): Promise<number[] | null> {\n    if (!this.audio || !this.audioContext) return null\n\n    try {\n      // Fetch audio data\n      const response = await fetch(this.audio.src)\n      const arrayBuffer = await response.arrayBuffer()\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)\n\n      const channelData = audioBuffer.getChannelData(0)\n      const blockSize = Math.floor(channelData.length / samples)\n      const peaks: number[] = []\n\n      for (let i = 0; i < samples; i++) {\n        const start = i * blockSize\n        const end = start + blockSize\n        let max = 0\n\n        for (let j = start; j < end; j++) {\n          max = Math.max(max, Math.abs(channelData[j]))\n        }\n\n        peaks.push(max)\n      }\n\n      return peaks\n    } catch (error) {\n      console.error('Failed to generate waveform data:', error)\n      return null\n    }\n  }\n\n  private async detectAudioDuration(audioFile: AudioFile): Promise<number> {\n    // First check if we have a stored duration from previous detection\n    if (audioFile.duration && audioFile.duration > 0) {\n      console.log('✅ Using stored duration:', audioFile.duration / 1000, 'seconds')\n      return audioFile.duration\n    }\n\n    // Second try the simple approach - if HTML5 audio has valid duration\n    if (this.audio && isFinite(this.audio.duration) && this.audio.duration > 0) {\n      console.log('📏 Duration from HTML5 audio:', this.audio.duration, 'seconds')\n      return this.audio.duration * 1000 // Convert to ms\n    }\n\n    console.log('⏳ HTML5 duration invalid, using Web Audio API to detect duration...')\n\n    try {\n      // Use Web Audio API to decode the entire file and get accurate duration\n      const arrayBuffer = await this.fileToArrayBuffer(audioFile)\n\n      if (!this.audioContext) {\n        throw new Error('AudioContext not initialized')\n      }\n\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)\n      const durationMs = audioBuffer.duration * 1000\n\n      console.log('🎵 Duration detected via Web Audio API:', audioBuffer.duration, 'seconds')\n      return durationMs\n    } catch (error) {\n      console.error('❌ Failed to detect audio duration:', error)\n\n      // Fallback: return a default duration and warn user\n      console.warn('⚠️ Using fallback duration of 3 minutes - waveform scrolling may not work correctly')\n      return 180000 // 3 minutes in ms\n    }\n  }\n\n  private async fileToArrayBuffer(audioFile: AudioFile): Promise<ArrayBuffer> {\n    if (audioFile.file) {\n      return await audioFile.file.arrayBuffer()\n    } else if (audioFile.url) {\n      const response = await fetch(audioFile.url)\n      return await response.arrayBuffer()\n    } else {\n      throw new Error('No audio file or URL available')\n    }\n  }\n\n  dispose(): void {\n    if (this.audio) {\n      this.audio.pause()\n      this.audio.src = ''\n    }\n\n    if (this.source) {\n      this.source.disconnect()\n    }\n\n    if (this.audioContext) {\n      this.audioContext.close()\n    }\n\n    this.timeUpdateCallback = undefined\n    this.playbackStateCallback = undefined\n  }\n}\n\n// Export singleton instance\nexport const audioService = new AudioService()\n","/**\n * MUSICAL TIMING MODEL - Beat-Aware Syllable Distribution\n * Addresses the preference to distribute words & syllables musically\n * instead of being musically intelligent about rests and note patterns.\n */\n\nimport type { WordTiming } from '@/types/karaoke'\nimport { TIMING } from '@/models/TimingConstants'\n\nexport interface MusicalNote {\n  type: 'eighth' | 'quarter' | 'half' | 'whole'\n  duration: number // in milliseconds\n}\n\nexport interface TimingContext {\n  bpm?: number // beats per minute\n  timeSignature?: [number, number] // e.g., [4, 4]\n  estimatedBeatDuration?: number // milliseconds per beat\n}\n\nexport interface RestPattern {\n  hasRest: boolean\n  restType: 'comma' | 'period' | 'breath' | 'phrase'\n  estimatedRestDuration: number\n}\n\n/**\n * Analyze text for musical rest indicators\n */\nexport function detectRestPattern(\n  currentWord: string,\n  nextWordText?: string,\n  timeToNextWord?: number\n): RestPattern {\n  // Check punctuation that indicates rests\n  const wordEndsWithComma = /[,;]$/.test(currentWord)\n  const wordEndsWithPeriod = /[.!?]$/.test(currentWord)\n  const nextWordIsCapitalized = nextWordText ? /^[A-Z]/.test(nextWordText) : false\n\n  if (wordEndsWithPeriod || nextWordIsCapitalized) {\n    return {\n      hasRest: true,\n      restType: 'phrase',\n      estimatedRestDuration: TIMING.musical.restDuration.period\n    }\n  }\n\n  if (wordEndsWithComma) {\n    return {\n      hasRest: true,\n      restType: 'comma',\n      estimatedRestDuration: TIMING.musical.restDuration.comma\n    }\n  }\n\n  // Use timing gap to infer rest\n  if (timeToNextWord && timeToNextWord > 1000) {\n    return {\n      hasRest: true,\n      restType: 'breath',\n      estimatedRestDuration: Math.min(timeToNextWord * 0.3, TIMING.musical.restDuration.breath)\n    }\n  }\n\n  return {\n    hasRest: false,\n    restType: 'breath',\n    estimatedRestDuration: 0\n  }\n}\n\n/**\n * Estimate note durations based on syllable count and musical context\n */\nexport function estimateNotePattern(\n  syllableCount: number,\n  availableTime: number,\n  context: TimingContext = {}\n): MusicalNote[] {\n  const { estimatedBeatDuration = 500 } = context // Default: 120 BPM = 500ms per beat\n\n  // Common note durations in milliseconds (at 120 BPM)\n  const noteDurations = {\n    eighth: estimatedBeatDuration / 2,    // 250ms\n    quarter: estimatedBeatDuration,       // 500ms\n    half: estimatedBeatDuration * 2,      // 1000ms\n    whole: estimatedBeatDuration * 4      // 2000ms\n  }\n\n  // Musical patterns based on syllable count\n  if (syllableCount === 1) {\n    // Single syllable - usually gets a clean note value\n    if (availableTime > noteDurations.half) {\n      return [{\n        type: 'half', duration: noteDurations.half\n      }]\n    } else if (availableTime > noteDurations.quarter) {\n      return [{\n        type: 'quarter', duration: noteDurations.quarter\n      }]\n    } else {\n      return [{\n        type: 'eighth', duration: noteDurations.eighth\n      }]\n    }\n  }\n\n  if (syllableCount === 2) {\n    // Two syllables - common patterns: quarter+quarter, eighth+quarter, etc.\n    const halfTime = availableTime / 2\n    if (halfTime > noteDurations.quarter) {\n      return [\n        {\n          type: 'quarter', duration: noteDurations.quarter\n        },\n        {\n          type: 'quarter', duration: noteDurations.quarter\n        }\n      ]\n    } else {\n      return [\n        {\n          type: 'eighth', duration: noteDurations.eighth\n        },\n        {\n          type: 'quarter', duration: noteDurations.quarter\n        }\n      ]\n    }\n  }\n\n  if (syllableCount === 3) {\n    // Three syllables - triplet or eighth+quarter pattern\n    return [\n      {\n        type: 'eighth', duration: noteDurations.eighth\n      },\n      {\n        type: 'eighth', duration: noteDurations.eighth\n      },\n      {\n        type: 'quarter', duration: noteDurations.quarter\n      }\n    ]\n  }\n\n  // Fallback: distribute evenly but prefer musical note values\n  const avgDuration = availableTime / syllableCount\n  const closestNote = avgDuration > noteDurations.quarter ? 'quarter' : 'eighth'\n\n  return Array(syllableCount).fill(null).map(() => ({\n    type: closestNote,\n    duration: noteDurations[closestNote]\n  })) as MusicalNote[]\n}\n\n/**\n * MUSICAL SYLLABLE DISTRIBUTION - The core improvement\n * Instead of filling all available space, use musical intelligence\n */\nexport function distributeSyllablesMusically(\n  word: WordTiming,\n  wordStartTime: number,\n  timeToNextWord: number,\n  nextWordText?: string,\n  context: TimingContext = {},\n  silent = false,\n  preserveWordBoundaries = false\n): void {\n  if (word.syllables.length === 0) return\n\n  // Step 1: Detect if there should be a rest after this word\n  const restPattern = detectRestPattern(word.word, nextWordText, timeToNextWord)\n\n  // Step 2: Calculate available time for actual singing (minus rest)\n  let availableTime = timeToNextWord - restPattern.estimatedRestDuration\n\n  // If preserving word boundaries, constrain to existing word duration\n  if (preserveWordBoundaries && word.endTime !== undefined && word.startTime !== undefined) {\n    const existingWordDuration = word.endTime - word.startTime\n    availableTime = Math.min(availableTime, existingWordDuration)\n    console.log(`🎵 Constraining \"${word.word}\" to existing duration: ${existingWordDuration}ms`)\n  }\n\n  // Step 3: Use musical note patterns instead of filling all space\n  const notePattern = estimateNotePattern(word.syllables.length, availableTime, context)\n\n  // Step 4: Apply timing to syllables\n  let currentTime = wordStartTime\n  word.syllables.forEach((syllable, index) => {\n    const note = notePattern[index] || notePattern[notePattern.length - 1]\n\n    syllable.startTime = currentTime\n    syllable.endTime = currentTime + note.duration\n    syllable.duration = note.duration\n\n    currentTime = syllable.endTime\n  })\n\n  // Step 5: Set word boundaries (only if not preserving existing boundaries)\n  word.startTime = wordStartTime\n  if (!preserveWordBoundaries) {\n    word.endTime = currentTime\n    word.duration = currentTime - wordStartTime\n  } else {\n    // Keep existing word boundaries, just redistribute syllables within them\n    console.log(`🎵 Preserving word boundaries for \"${word.word}\": ${word.startTime}-${word.endTime}`)\n  }\n\n  if (!silent) {\n    console.log(`🎵 Musical timing: \"${word.word}\" uses ${word.duration}ms of ${timeToNextWord}ms available` +\n      (restPattern.hasRest ? ` (${restPattern.estimatedRestDuration}ms rest reserved)` : ''))\n  }\n}\n\n/**\n * BEAT LEARNING SYSTEM - Your idea about improving with more timing data\n */\nexport class BeatLearningSystem {\n  private timingHistory: Array<{\n    wordDuration: number\n    syllableCount: number\n    timestamp: number\n  }> = []\n\n  addTimingExample(wordDuration: number, syllableCount: number): void {\n    this.timingHistory.push({\n      wordDuration,\n      syllableCount,\n      timestamp: Date.now()\n    })\n\n    // Keep only recent examples (last 50)\n    if (this.timingHistory.length > 50) {\n      this.timingHistory.shift()\n    }\n  }\n\n  estimateBPM(): number {\n    if (this.timingHistory.length < 3) return 120 // Default BPM\n\n    // Analyze common word durations to infer beat patterns\n    const durations = this.timingHistory.map(h => h.wordDuration)\n    const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length\n\n    // Estimate BPM assuming average word is roughly one beat\n    const estimatedBPM = 60000 / avgDuration // 60000ms per minute\n\n    // Clamp to reasonable range\n    return Math.max(80, Math.min(200, estimatedBPM))\n  }\n\n  getTimingContext(): TimingContext {\n    const bpm = this.estimateBPM()\n    return {\n      bpm,\n      timeSignature: [4, 4],\n      estimatedBeatDuration: 60000 / bpm\n    }\n  }\n}\n\n// Global instance for the app to learn from user's timing patterns\nexport const beatLearner = new BeatLearningSystem()\n\n/**\n * BATCH MUSICAL TIMING PROCESSOR - Phase 2\n * Analyzes entire song at once for optimal musical timing\n */\nexport interface SongAnalysis {\n  totalWords: number\n  avgWordDuration: number\n  estimatedBPM: number\n  detectedRests: number\n  timingQuality: 'poor' | 'good' | 'excellent'\n}\n\nexport function analyzeSongTiming(lyrics: Array<{ words: WordTiming[] }>): SongAnalysis {\n  let totalWords = 0\n  let totalDuration = 0\n  let detectedRests = 0\n\n  for (const line of lyrics) {\n    for (let i = 0; i < line.words.length; i++) {\n      const word = line.words[i]\n      if (word.startTime !== undefined && word.endTime !== undefined) {\n        totalWords++\n        totalDuration += word.endTime - word.startTime\n\n        // Check for rests\n        const nextWord = line.words[i + 1]\n        if (nextWord?.startTime !== undefined) {\n          const gap = nextWord.startTime - word.endTime\n          const restPattern = detectRestPattern(word.word, nextWord.word, gap)\n          if (restPattern.hasRest) detectedRests++\n        }\n      }\n    }\n  }\n\n  const avgWordDuration = totalWords > 0 ? totalDuration / totalWords : 500\n  const estimatedBPM = totalWords > 0 ? 60000 / avgWordDuration : 120\n\n  // Clamp BPM to reasonable range\n  const clampedBPM = Math.max(80, Math.min(200, estimatedBPM))\n\n  // Determine timing quality based on word count and rest detection\n  let timingQuality: 'poor' | 'good' | 'excellent' = 'poor'\n  if (totalWords > 10 && detectedRests > 2) timingQuality = 'good'\n  if (totalWords > 20 && detectedRests > 5) timingQuality = 'excellent'\n\n  return {\n    totalWords,\n    avgWordDuration,\n    estimatedBPM: clampedBPM,\n    detectedRests,\n    timingQuality\n  }\n}\n\n/**\n * Apply musical timing to entire song (batch operation)\n */\nexport function applyMusicalTimingToSong(\n  lyrics: Array<{ words: WordTiming[] }>,\n  options: {\n    preserveWordTiming?: boolean // Keep word start/end times, only redistribute syllables\n    aggressiveness?: 'conservative' | 'moderate' | 'aggressive' // How much to change\n    onlyProcessUntimedSyllables?: boolean // Only fix syllables that have no timing yet\n  } = {}\n): SongAnalysis {\n  const {\n    preserveWordTiming = true,\n    onlyProcessUntimedSyllables = true\n  } = options\n\n  // First, analyze the song to understand its musical context\n  const analysis = analyzeSongTiming(lyrics)\n  console.log(`🎵 Song Analysis: ${analysis.totalWords} words, ${analysis.estimatedBPM.toFixed(0)} BPM, ${analysis.detectedRests} rests (${analysis.timingQuality} quality)`)\n\n  const context: TimingContext = {\n    bpm: analysis.estimatedBPM,\n    timeSignature: [4, 4],\n    estimatedBeatDuration: 60000 / analysis.estimatedBPM\n  }\n\n  // Apply musical timing to each word\n  for (const line of lyrics) {\n    for (let i = 0; i < line.words.length; i++) {\n      const word = line.words[i]\n      if (word.startTime !== undefined) {\n\n        // Skip words that already have good syllable timing (unless forced)\n        if (onlyProcessUntimedSyllables) {\n          const hasExistingSyllableTiming = word.syllables.some(s => s.startTime !== undefined)\n          if (hasExistingSyllableTiming) {\n            console.log(`🎵 Skipping \"${word.word}\" - already has syllable timing`)\n            continue\n          }\n        }\n        // Calculate time to next word\n        let timeToNextWord = 1000 // Default\n        const nextWord = line.words[i + 1]\n        if (nextWord?.startTime !== undefined) {\n          timeToNextWord = nextWord.startTime - word.startTime\n        }\n\n        // Get next word text for rest detection\n        const nextWordText = nextWord?.word\n\n        if (preserveWordTiming && word.endTime !== undefined) {\n          // Only redistribute syllables within existing word duration - DON'T change word boundaries\n          const wordDuration = word.endTime - word.startTime\n          distributeSyllablesMusically(word, word.startTime, wordDuration, nextWordText, context, false, true)\n        } else {\n          // Allow word timing to change based on musical analysis, using centralized conservative rules\n          const conservativeTime = Math.min(timeToNextWord * TIMING.musical.conservativeMultiplier, TIMING.autoTiming.maxPhraseBreakDuration)\n          distributeSyllablesMusically(word, word.startTime, conservativeTime, nextWordText, context, false, false)\n        }\n      }\n    }\n  }\n\n  return analysis\n}\n\n/**\n * Reset all syllable timing in the song\n */\nexport function resetSongSyllableTiming(lyrics: Array<{ words: WordTiming[] }>): void {\n  let resetCount = 0\n\n  for (const line of lyrics) {\n    for (const word of line.words) {\n      word.syllables.forEach(syllable => {\n        if (syllable.startTime !== undefined) resetCount++\n        syllable.startTime = undefined\n        syllable.endTime = undefined\n        syllable.duration = undefined\n      })\n    }\n  }\n\n  console.log(`🔄 Reset syllable timing for ${resetCount} syllables`)\n}\n","import type { LyricLine, WordTiming } from '../types/karaoke'\n\nexport interface TimingOverlap {\n  word1: WordTiming & { lineIndex: number; wordIndex: number }\n  word2: WordTiming & { lineIndex: number; wordIndex: number }\n  overlapStart: number\n  overlapEnd: number\n  overlapDuration: number\n}\n\nexport interface TimingAnalysisResult {\n  overlaps: TimingOverlap[]\n  totalWords: number\n  timedWords: number\n  smallGaps: Array<{\n    word1: string\n    word2: string\n    gap: number\n  }>\n  sequenceViolations: Array<{\n    word1: string\n    word2: string\n    issue: string\n  }>\n  summary: string\n  hasIssues: boolean\n}\n\nexport function useTimingAnalysis() {\n\n  function analyzeTimingOverlaps(lyrics: LyricLine[]): TimingAnalysisResult {\n    const overlaps: TimingOverlap[] = []\n    const smallGaps: { word1: string; word2: string; gap: number }[] = []\n    const sequenceViolations: { word1: string; word2: string; issue: string }[] = []\n    let totalWords = 0\n    let timedWords = 0\n    const allWords: Array<WordTiming & { lineIndex: number; wordIndex: number }> = []\n\n    // Collect all words with their positions\n    lyrics.forEach((line, lineIndex) => {\n      line.words.forEach((word, wordIndex) => {\n        totalWords++\n        if (word.startTime !== undefined && word.endTime !== undefined) {\n          timedWords++\n          allWords.push({\n            ...word,\n            lineIndex,\n            wordIndex\n          })\n        }\n      })\n    })\n\n    if (timedWords === 0) {\n      return {\n        overlaps: [],\n        totalWords,\n        timedWords,\n        smallGaps: [],\n        sequenceViolations: [],\n        summary: 'No timed words found.',\n        hasIssues: false\n      }\n    }\n\n    // Check for sequence violations within each line BEFORE sorting\n    lyrics.forEach((line) => {\n      const lineWords = line.words.filter(w => w.startTime !== undefined && w.endTime !== undefined)\n      for (let i = 0; i < lineWords.length - 1; i++) {\n        const word1 = lineWords[i]\n        const word2 = lineWords[i + 1]\n\n        if (word1.startTime! > word2.startTime!) {\n          sequenceViolations.push({\n            word1: word1.word,\n            word2: word2.word,\n            issue: `\"${word1.word}\" starts at ${word1.startTime}ms but comes before \"${word2.word}\" at ${word2.startTime}ms`\n          })\n        }\n      }\n    })\n\n    // Sort words by start time for overlap analysis\n    allWords.sort((a, b) => (a.startTime || 0) - (b.startTime || 0))\n\n    // Check for overlaps\n    for (let i = 0; i < allWords.length - 1; i++) {\n      const word1 = allWords[i]\n      const word2 = allWords[i + 1]\n\n      if (word1.endTime! > word2.startTime!) {\n        const overlapStart = word2.startTime!\n        const overlapEnd = Math.min(word1.endTime!, word2.endTime!)\n        const overlapDuration = overlapEnd - overlapStart\n\n        overlaps.push({\n          word1,\n          word2,\n          overlapStart,\n          overlapEnd,\n          overlapDuration\n        })\n      }\n    }\n\n    // Check for small gaps\n    for (let i = 0; i < allWords.length - 1; i++) {\n      const word1 = allWords[i]\n      const word2 = allWords[i + 1]\n      const gap = word2.startTime! - word1.endTime!\n\n      if (gap >= 0 && gap < 50) {\n        smallGaps.push({\n          word1: word1.word,\n          word2: word2.word,\n          gap\n        })\n      }\n    }\n\n    const hasIssues = overlaps.length > 0 || smallGaps.length > 3 || sequenceViolations.length > 0\n    const totalIssues = overlaps.length + smallGaps.length + sequenceViolations.length\n\n    let summary = ''\n    if (sequenceViolations.length > 0) {\n      summary = `🚨 Critical: ${sequenceViolations.length} words out of sequence! This breaks timing order.`\n    } else if (overlaps.length === 0 && smallGaps.length <= 3) {\n      summary = `✅ Clean timing: ${timedWords} words, good spacing`\n    } else {\n      summary = `⚠️ Found ${totalIssues} spacing issues (${overlaps.length} overlaps, ${smallGaps.length} tight gaps) - may affect editing`\n    }\n\n    return {\n      overlaps,\n      totalWords,\n      timedWords,\n      smallGaps,\n      sequenceViolations,\n      summary,\n      hasIssues\n    }\n  }\n\n  function fixTimingOverlaps(lyrics: LyricLine[]): { fixCount: number; details: string[] } {\n    console.log('🔧 Starting timing overlap fix...')\n    const details: string[] = []\n    let fixCount = 0\n\n    // Process each line to collect and fix overlapping words\n    const allWords: Array<{ word: WordTiming; lineIndex: number; wordIndex: number }> = []\n\n    // Collect references to actual word objects (not copies)\n    lyrics.forEach((line, lineIndex) => {\n      line.words.forEach((word, wordIndex) => {\n        if (word.startTime !== undefined && word.endTime !== undefined) {\n          allWords.push({\n            word, // Reference to actual word object\n            lineIndex,\n            wordIndex\n          })\n        }\n      })\n    })\n\n    console.log(`🔍 Found ${allWords.length} timed words to check`)\n\n    // Sort by start time\n    allWords.sort((a, b) => (a.word.startTime || 0) - (b.word.startTime || 0))\n\n    // Fix overlaps AND words that are too close together\n    const minGap = 50 // Minimum 50ms gap for proper visual/interaction spacing\n\n    for (let i = 0; i < allWords.length - 1; i++) {\n      const wordRef1 = allWords[i]\n      const wordRef2 = allWords[i + 1]\n      const word1 = wordRef1.word\n      const word2 = wordRef2.word\n\n      const currentGap = word2.startTime! - word1.endTime!\n      const needsFix = currentGap < minGap\n\n      if (needsFix) {\n        const originalEnd = word1.endTime!\n        const newEnd = word2.startTime! - minGap\n\n        if (currentGap < 0) {\n          console.log(`🔧 Fixing overlap: \"${word1.word}\" (${originalEnd}ms) → \"${word2.word}\" (${word2.startTime}ms)`)\n        } else {\n          console.log(`🔧 Fixing tight spacing: \"${word1.word}\" → \"${word2.word}\" (${currentGap}ms gap → ${minGap}ms gap)`)\n        }\n        console.log(`   Adjusting \"${word1.word}\" end time: ${originalEnd}ms → ${newEnd}ms`)\n\n        word1.endTime = newEnd\n        word1.duration = word1.endTime - word1.startTime!\n\n        const actionType = currentGap < 0 ? 'overlap' : 'tight spacing'\n        details.push(`Fixed ${actionType} \"${word1.word}\": ${originalEnd}ms → ${word1.endTime}ms`)\n        fixCount++\n\n        // Fix syllable timing if present\n        if (word1.syllables && word1.syllables.length > 0) {\n          const wordDuration = word1.duration\n          let currentTime = word1.startTime!\n\n          word1.syllables.forEach((syllable) => {\n            const syllableDuration = wordDuration / word1.syllables.length\n            syllable.startTime = currentTime\n            syllable.endTime = currentTime + syllableDuration\n            syllable.duration = syllableDuration\n            currentTime = syllable.endTime\n          })\n          console.log(`   Updated ${word1.syllables.length} syllables for \"${word1.word}\"`)\n        }\n      }\n    } console.log(`✅ Fixed ${fixCount} overlaps`)\n    return {\n      fixCount,\n      details\n    }\n  }\n\n  return {\n    analyzeTimingOverlaps,\n    fixTimingOverlaps\n  }\n}\n","<template>\n  <div class=\"lyrics-editor\">\n    <div class=\"card\">\n      <div class=\"card-header d-flex justify-content-between align-items-center\">\n        <h5 class=\"mb-0\">📝 Lyrics Editor</h5>\n        <div class=\"editor-controls\">\n          <button class=\"btn btn-sm btn-outline-primary me-2\" @click=\"addLine\" title=\"Add new line\">\n            <i class=\"bi bi-plus\"></i>\n          </button>\n\n          <span class=\"badge\" :class=\"isTimingMode ? 'bg-success' : 'bg-secondary'\">\n            {{ isTimingMode ? 'Timing Mode' : 'Editing Ready' }}\n          </span>\n        </div>\n      </div>\n      <div class=\"card-body p-0\">\n        <div class=\"lyrics-container\" ref=\"lyricsContainer\">\n          <div v-for=\"(lyric, index) in lyrics\" :key=\"lyric.id\" class=\"lyric-line\" :class=\"{\n            active: index === currentLine,\n            'has-timing': lyric.startTime !== undefined,\n            'timing-mode': isTimingMode,\n            'metadata-line': isMetadataLyricLine(lyric),\n          }\" @click=\"selectLine(index)\">\n            <!-- Line Number -->\n            <div class=\"line-number\">\n              {{ lyric.lineNumber }}\n            </div>\n\n            <!-- Timing Display -->\n            <div class=\"timing-display\">\n              <small v-if=\"lyric.startTime !== undefined\" class=\"text-success\">\n                {{ formatTime(lyric.startTime) }}\n              </small>\n              <small v-else-if=\"isMetadataLyricLine(lyric)\" class=\"text-info\">\n                META\n              </small>\n              <small v-else class=\"text-muted\">--:--</small>\n            </div>\n\n            <!-- Lyrics Text -->\n            <div class=\"lyric-text-container\">\n              <input v-if=\"editingLine === index && !isMetadataLyricLine(lyric)\" type=\"text\"\n                class=\"form-control form-control-sm\" v-model=\"lyric.text\" @blur=\"finishEditing\"\n                @keyup.enter=\"finishEditing\" @keyup.esc=\"cancelEditing\" ref=\"editInput\"\n                placeholder=\"Use / to separate syllables: Hel/lo world a/maz/ing\" />\n              <input v-else-if=\"editingLine === index && isMetadataLyricLine(lyric)\" type=\"text\"\n                class=\"form-control form-control-sm\" v-model=\"lyric.text\" @blur=\"finishEditing\"\n                @keyup.enter=\"finishEditing\" @keyup.esc=\"cancelEditing\" ref=\"editInput\"\n                placeholder=\"[@TITLE:], [@AUTHOR:], or [@CAPTION:]\" />\n              <div v-else class=\"lyric-text\" @dblclick=\"startEditing(index)\"\n                :class=\"{ empty: !lyric.text.trim(), 'metadata-text': isMetadataLyricLine(lyric) }\">\n                <!-- Show metadata lines as-is -->\n                <div v-if=\"isMetadataLyricLine(lyric)\" class=\"metadata-display\">\n                  <i class=\"bi bi-tag me-1\"></i>{{ lyric.text }}\n                </div>\n                <!-- Show words with syllable breakdown for lyrics -->\n                <div v-else-if=\"lyric.words.length > 0\" class=\"words-display\">\n                  <span v-for=\"(word, wordIndex) in lyric.words\" :key=\"wordIndex\" class=\"word-item\" :class=\"{\n                    'current-word': index === currentLine && wordIndex === currentWord,\n                    'timed-word': word.startTime !== undefined,\n                  }\">\n                    <span v-for=\"(syllable, sylIndex) in word.syllables\" :key=\"sylIndex\" class=\"syllable-item\"\n                      :class=\"{ 'timed-syllable': syllable.startTime !== undefined }\">\n                      {{ syllable.syllable }}\n                    </span>\n                  </span>\n                </div>\n                <div v-else class=\"empty-text\">Empty line - double click to edit</div>\n              </div>\n            </div>\n\n            <!-- Line Actions -->\n            <div class=\"line-actions\">\n              <button v-if=\"!isTimingMode\" class=\"btn btn-sm btn-outline-danger\" @click=\"deleteLine(index)\"\n                title=\"Delete line\">\n                <i class=\"bi bi-trash3\"></i>\n              </button>\n              <button v-if=\"isTimingMode && lyric.startTime !== undefined && !isMetadataLyricLine(lyric)\"\n                class=\"btn btn-sm btn-outline-warning\" @click=\"clearTiming(index)\" title=\"Clear timing\">\n                <i class=\"bi bi-clock-history\"></i>\n              </button>\n            </div>\n          </div>\n\n          <!-- Add line placeholder -->\n          <div v-if=\"lyrics.length === 0\" class=\"empty-state text-center py-4\">\n            <p class=\"text-muted\">No lyrics yet. Click \"+\" to add your first line.</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"row align-items-center\">\n          <div class=\"col-sm-6\">\n            <small class=\"text-muted\"> {{ lyrics.length }} lines • {{ completedTimings }}/{{ lyrics.length }} timed\n            </small>\n          </div>\n          <div class=\"col-sm-6 text-end\">\n            <small class=\"text-muted\" v-if=\"isTimingMode\"> Press <kbd>Space</kbd> to assign timing to current line\n            </small>\n            <small class=\"text-muted\" v-else> Double-click to edit lyrics </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, nextTick } from 'vue'\nimport type { LyricLine } from '@/types/karaoke'\nimport { parseLyricsLine, clearTimingFromLine } from '@/utils/lyricsParser'\n\n// Props\ninterface Props {\n  lyrics: LyricLine[]\n  currentLine: number\n  currentWord: number\n  isTimingMode: boolean\n}\n\nconst props = defineProps<Props>()\n\n// Emits\nconst emit = defineEmits<{\n  'line-select': [lineIndex: number]\n  'lyrics-update': [lyrics: LyricLine[]]\n}>()\n\n// Reactive state\nconst editingLine = ref(-1)\nconst lyricsContainer = ref<HTMLElement>()\nconst editInput = ref<HTMLInputElement[]>()\n\n// Computed properties\nconst completedTimings = computed(() => {\n  return props.lyrics.filter(lyric => lyric.startTime !== undefined).length\n})\n\n// Helper function to check if a lyric line is metadata\nconst isMetadataLyricLine = (lyric: LyricLine): boolean => {\n  return lyric.type !== undefined && lyric.type !== 'lyrics'\n}\n\n// Methods\nconst selectLine = (index: number) => {\n  emit('line-select', index)\n}\n\nconst addLine = () => {\n  const newLine = parseLyricsLine('', props.lyrics.length + 1, `line-${Date.now()}`)\n\n  const updatedLyrics = [...props.lyrics, newLine]\n  updateLineNumbers(updatedLyrics)\n  emit('lyrics-update', updatedLyrics)\n\n  // Start editing the new line\n  nextTick(() => {\n    startEditing(updatedLyrics.length - 1)\n  })\n}\n\nconst deleteLine = (index: number) => {\n  if (confirm('Are you sure you want to delete this line?')) {\n    const updatedLyrics = props.lyrics.filter((_, i) => i !== index)\n    updateLineNumbers(updatedLyrics)\n    emit('lyrics-update', updatedLyrics)\n  }\n}\n\nconst startEditing = (index: number) => {\n  if (props.isTimingMode) return\n\n  editingLine.value = index\n  nextTick(() => {\n    const input = editInput.value?.[0]\n    if (input) {\n      input.focus()\n      input.select()\n    }\n  })\n}\n\nconst finishEditing = () => {\n  // Re-parse the edited line to update word/syllable structure\n  if (editingLine.value >= 0) {\n    const updatedLyrics = [...props.lyrics]\n    const line = updatedLyrics[editingLine.value]\n    if (line) {\n      const parsedLine = parseLyricsLine(line.text, line.lineNumber, line.id)\n      // Preserve any existing timing data\n      parsedLine.startTime = line.startTime\n      parsedLine.endTime = line.endTime\n      parsedLine.duration = line.duration\n      updatedLyrics[editingLine.value] = parsedLine\n      emit('lyrics-update', updatedLyrics)\n    }\n  }\n  editingLine.value = -1\n}\n\nconst cancelEditing = () => {\n  editingLine.value = -1\n  // Reset the text value if needed\n}\n\nconst clearTiming = (index: number) => {\n  // Confirm the action since it clears timing from this line and all subsequent lines\n  const lineCount = props.lyrics.length - index\n  const message = lineCount === 1\n    ? 'Clear timing for this line?'\n    : `Clear timing for this line and ${lineCount - 1} lines after it?\\n\\nThis prevents timing inconsistencies by clearing all subsequent timing.`\n\n  if (confirm(message)) {\n    const updatedLyrics = clearTimingFromLine(props.lyrics, index)\n    emit('lyrics-update', updatedLyrics)\n  }\n}\n\n// Edit mode removed - double-click now works directly\n\nconst updateLineNumbers = (lyrics: LyricLine[]) => {\n  lyrics.forEach((lyric, index) => {\n    lyric.lineNumber = index + 1\n  })\n}\n\nconst formatTime = (timeMs: number): string => {\n  const seconds = Math.floor(timeMs / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const remainingSeconds = seconds % 60\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n}\n\n// Watch for current line changes to scroll into view\n// watch(\n//   () => props.currentLine,\n//   newLine => {\n//     nextTick(() => {\n//       const container = lyricsContainer.value\n//       if (container) {\n//         const activeElement = container.querySelector('.lyric-line.active')\n//         if (activeElement) {\n//           activeElement.scrollIntoView({\n//             behavior: 'smooth',\n//             block: 'center',\n//           })\n//         }\n//       }\n//     })\n//   }\n// )\n\n// Keyboard shortcuts\nconst handleKeydown = (event: KeyboardEvent) => {\n  if (props.isTimingMode) {\n    if (event.code === 'Space') {\n      event.preventDefault()\n      // This will be handled by the parent component\n    } else if (event.code === 'ArrowUp') {\n      event.preventDefault()\n      if (props.currentLine > 0) {\n        emit('line-select', props.currentLine - 1)\n      }\n    } else if (event.code === 'ArrowDown') {\n      event.preventDefault()\n      if (props.currentLine < props.lyrics.length - 1) {\n        emit('line-select', props.currentLine + 1)\n      }\n    }\n  }\n}\n\n// Add keyboard listener\nif (typeof window !== 'undefined') {\n  window.addEventListener('keydown', handleKeydown)\n}\n</script>\n\n<style scoped>\n.lyrics-container {\n  height: 400px;\n  overflow-y: auto;\n}\n\n.lyric-line {\n  display: flex;\n  align-items: center;\n  padding: 0.15rem;\n  border-bottom: 1px solid #f0f0f0;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.lyric-line:hover {\n  background-color: #f8f9fa;\n}\n\n.lyric-line.active {\n  background-color: #e3f2fd;\n  border-left: 4px solid #2196f3;\n}\n\n.lyric-line.has-timing {\n  border-left: 4px solid #4caf50;\n}\n\n.lyric-line.timing-mode.active {\n  background-color: #fff3e0;\n  border-left: 4px solid #ff9800;\n}\n\n.line-number {\n  min-width: 40px;\n  text-align: center;\n  font-weight: bold;\n  color: #666;\n  font-size: 0.875rem;\n}\n\n.timing-display {\n  min-width: 60px;\n  text-align: center;\n  font-family: 'Courier New', monospace;\n}\n\n.lyric-text-container {\n  flex: 1;\n  padding: 0 1rem;\n}\n\n.lyric-text {\n  min-height: 1.5rem;\n  padding: 0.25rem 0;\n}\n\n.empty-text {\n  color: #999;\n  font-style: italic;\n}\n\n.words-display {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.word-item {\n  display: inline-flex;\n  padding: 0.125rem 0.25rem;\n  border-radius: 0.25rem;\n  transition: all 0.2s;\n}\n\n.word-item.current-word {\n  background-color: #fff3cd;\n  border: 1px solid #ffc107;\n}\n\n.word-item.timed-word {\n  background-color: #d1edff;\n  border: 1px solid #0d6efd;\n}\n\n.syllable-item {\n  position: relative;\n}\n\n.syllable-item:not(:last-child)::after {\n  content: '·';\n  color: #ccc;\n  margin: 0 1px;\n}\n\n.syllable-item.timed-syllable {\n  color: #0d6efd;\n  font-weight: 500;\n}\n\n.line-actions {\n  min-width: 50px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.empty-state {\n  min-height: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.editor-controls .btn.active {\n  background-color: #0d6efd;\n  color: white;\n}\n\nkbd {\n  background-color: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 0.25rem;\n  padding: 0.125rem 0.25rem;\n  font-size: 0.75rem;\n}\n\n/* Scrollbar styling */\n.lyrics-container::-webkit-scrollbar {\n  width: 8px;\n}\n\n.lyrics-container::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.lyrics-container::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.lyrics-container::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n/* Metadata line styling */\n.lyric-line.metadata-line {\n  background-color: #f8f9fa;\n  border-left: 3px solid #6c757d;\n  opacity: 0.8;\n}\n\n.lyric-line.metadata-line:hover {\n  opacity: 1;\n}\n\n.metadata-display {\n  color: #6c757d;\n  font-style: italic;\n  font-size: 0.9em;\n}\n\n.metadata-text {\n  color: #6c757d !important;\n}\n</style>\n","<template>\n  <div class=\"lyrics-preview\">\n    <div class=\"card\">\n      <div class=\"card-header d-flex justify-content-between align-items-center\">\n        <h5 class=\"mb-0\">👁️ Lyrics Preview</h5>\n        <div class=\"preview-controls\">\n          <button class=\"btn btn-sm btn-outline-secondary me-2\" @click=\"toggleKaraokeMode\"\n            :class=\"{ active: isKaraokeMode }\" title=\"Toggle karaoke mode\">\n            <i class=\"bi bi-display\"></i>\n          </button>\n          <div class=\"btn-group\" role=\"group\">\n            <button class=\"btn btn-sm btn-outline-primary\" :class=\"{ active: fontSize === 'small' }\"\n              @click=\"setFontSize('small')\">\n              A\n            </button>\n            <button class=\"btn btn-sm btn-outline-primary\" :class=\"{ active: fontSize === 'medium' }\"\n              @click=\"setFontSize('medium')\">\n              A\n            </button>\n            <button class=\"btn btn-sm btn-outline-primary\" :class=\"{ active: fontSize === 'large' }\"\n              @click=\"setFontSize('large')\">\n              A\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- Lyrics Display Area -->\n      <div class=\"card-body preview-container\" :class=\"[`font-${fontSize}`, { 'karaoke-mode': isKaraokeMode }]\">\n        <div v-if=\"lyrics.length === 0\" class=\"empty-state text-center py-4\">\n          <p class=\"text-muted\">No lyrics to preview</p>\n        </div>\n        <div v-else class=\"lyrics-display\" ref=\"lyricsDisplay\">\n          <!-- Karaoke Mode - Professional karaoke format display -->\n          <div v-if=\"isKaraokeMode\" class=\"karaoke-display\">\n            <!-- Clean 3-slot display: Title → Artist → Caption (smart slot assignment) -->\n            <div class=\"karaoke-position position-1\">\n              <div v-if=\"slot1Content.type === 'title'\" class=\"display-title\">{{ slot1Content.text }}</div>\n              <div v-else-if=\"slot1Content.type === 'caption'\" class=\"display-caption\">{{ slot1Content.text }}</div>\n            </div>\n\n            <div class=\"karaoke-position position-2\">\n              <div v-if=\"slot2Content.type === 'author'\" class=\"display-author\">{{ slot2Content.text }}</div>\n              <div v-else-if=\"slot2Content.type === 'caption'\" class=\"display-caption\">{{ slot2Content.text }}</div>\n            </div>\n\n            <div class=\"karaoke-position position-3\">\n              <div v-if=\"slot3Content.type === 'caption'\" class=\"display-caption\">{{ slot3Content.text }}</div>\n            </div>\n\n            <!-- Current Line - What we're singing now -->\n            <div v-if=\"currentLyric && (!currentLyric.type || currentLyric.type === 'lyrics')\"\n              class=\"current-line-display\" :class=\"{ highlighted: isCurrentLinePlaying }\">\n              <div class=\"line-text\">\n                <!-- Show word/syllable highlighting -->\n                <span v-for=\"(word, wordIndex) in currentLyric.words\" :key=\"wordIndex\" class=\"karaoke-word\" :class=\"{\n                  'current-word': wordIndex === currentWord,\n                  'past-word': isWordPast(currentLyric, wordIndex),\n                  'future-word': isWordFuture(currentLyric, wordIndex),\n                }\">\n                  <span v-for=\"(syllable, sylIndex) in word.syllables\" :key=\"sylIndex\" class=\"karaoke-syllable\" :class=\"{\n                    'current-syllable': wordIndex === currentWord && sylIndex === currentSyllable,\n                    'past-syllable': isSyllablePast(syllable),\n                    'future-syllable': isSyllableFuture(syllable),\n                  }\">\n                    {{ syllable.syllable }}\n                  </span>\n                  {{ ' ' }}\n                </span>\n              </div>\n            </div>\n\n            <!-- Future Lines - What's coming up (small and diminished) -->\n            <div class=\"future-lines\">\n              <div v-for=\"lyric in futureLyricLines\" :key=\"`future-${lyric.id}`\" class=\"future-line\">\n                {{ getCleanText(lyric) }}\n              </div>\n            </div>\n          </div>\n\n          <!-- Normal Mode - All lyrics visible -->\n          <div v-else class=\"normal-display\">\n            <div v-for=\"(lyric, index) in lyrics\" :key=\"lyric.id\" class=\"preview-line\" :class=\"{\n              current: index === currentLine,\n              'has-timing': lyric.startTime !== undefined,\n              past: lyric.startTime !== undefined && lyric.startTime < currentTime,\n              future: lyric.startTime !== undefined && lyric.startTime > currentTime,\n              playing: isLinePlaying(lyric),\n            }\">\n              <div class=\"line-content\">\n                <span class=\"line-number\">{{ lyric.lineNumber }}</span>\n                <span class=\"line-text\">{{ getCleanText(lyric) }}</span>\n                <span v-if=\"lyric.startTime !== undefined\" class=\"line-timing\">\n                  {{ formatTime(lyric.startTime) }}\n                </span>\n              </div>\n\n              <!-- Progress bar for current playing line -->\n              <div v-if=\"isLinePlaying(lyric) && lyric.duration\" class=\"line-progress\">\n                <div class=\"progress-bar\" :style=\"{ width: getLineProgress(lyric) + '%' }\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"row align-items-center\">\n          <div class=\"col-sm-6\">\n            <small class=\"text-muted\">\n              Line {{ currentLine + 1 }} of {{ lyrics.length }}\n              <span v-if=\"currentTime > 0\"> • {{ formatTime(currentTime) }}</span>\n            </small>\n          </div>\n          <div class=\"col-sm-6 text-end\">\n            <small class=\"text-muted\">\n              {{ timedLines }}/{{ lyrics.length }} lines timed\n              <span v-if=\"completionPercentage > 0\">({{ completionPercentage }}%)</span>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick } from 'vue'\nimport type { LyricLine } from '@/types/karaoke'\nimport { parseLyricsWithMetadata } from '@/utils/lyricsParser'\n\n// Props\ninterface Props {\n  lyrics: LyricLine[]\n  currentTime: number\n  currentLine: number\n  currentWord?: number\n  currentSyllable?: number\n}\n\nconst props = defineProps<Props>()\n\n// Reactive state\nconst isKaraokeMode = ref(true)\nconst fontSize = ref<'small' | 'medium' | 'large'>('medium')\nconst lyricsDisplay = ref<HTMLElement>()\n\n// Computed properties\nconst currentLyric = computed(() => {\n  return props.lyrics[props.currentLine] || null\n})\n\n// Removed previousLines and nextLines - replaced with futureLyricLines for karaoke mode\n\nconst isCurrentLinePlaying = computed(() => {\n  if (!currentLyric.value || currentLyric.value.startTime === undefined) {\n    return false\n  }\n\n  const startTime = currentLyric.value.startTime\n  const endTime = currentLyric.value.endTime || startTime + (currentLyric.value.duration || 3000)\n\n  return props.currentTime >= startTime && props.currentTime <= endTime\n})\n\nconst timedLines = computed(() => {\n  return props.lyrics.filter(lyric => lyric.startTime !== undefined).length\n})\n\nconst completionPercentage = computed(() => {\n  if (props.lyrics.length === 0) return 0\n  return Math.round((timedLines.value / props.lyrics.length) * 100)\n})\n\n// Extract metadata from lyrics for karaoke display\nconst extractedMetadata = computed(() => {\n  // Create a simple text representation to parse metadata\n  const lyricsText = props.lyrics.map(line => line.text).join('\\n')\n  const { metadata } = parseLyricsWithMetadata(lyricsText)\n  return metadata\n})\n\nconst songTitle = computed(() => {\n  return extractedMetadata.value.title || null\n})\n\nconst songAuthor = computed(() => {\n  return extractedMetadata.value.author || null\n})\n\n// Find the currently active caption based on timing and position in lyrics\nconst currentCaption = computed(() => {\n  // Find caption lines in the lyrics array\n  const captionLines = props.lyrics.filter(line => line.type === 'caption')\n\n  if (captionLines.length === 0) return null\n\n  // Find the most recent caption that should be displayed based on current position\n  let activeCaption = null\n  for (let i = 0; i < captionLines.length; i++) {\n    const captionLine = captionLines[i]\n    const captionLineIndex = props.lyrics.findIndex(line => line.id === captionLine.id)\n\n    // Show caption if we're at or past its position in the lyrics\n    if (captionLineIndex <= props.currentLine) {\n      activeCaption = captionLine.metadata?.caption || captionLine.text.replace(/^\\[@CAPTION:\\s*/, '').replace(/\\]$/, '')\n    } else {\n      break // We've reached future captions\n    }\n  }\n\n  return activeCaption\n})\n\n// Simple three-slot system: Title always there OR not, Author always there OR not, Caption comes and goes\nconst slot1Content = computed(() => {\n  // Slot 1 priority: Title first, then caption if no title\n  if (songTitle.value) {\n    return {\n      type: 'title',\n      text: songTitle.value\n    }\n  }\n  if (currentCaption.value) {\n    return {\n      type: 'caption',\n      text: currentCaption.value\n    }\n  }\n  return {\n    type: 'empty',\n    text: ''\n  }\n})\n\nconst slot2Content = computed(() => {\n  // Slot 2 priority: Author first, then caption if no author AND slot 1 is occupied by title\n  if (songAuthor.value) {\n    return {\n      type: 'author',\n      text: songAuthor.value\n    }\n  }\n  if (currentCaption.value && slot1Content.value.type === 'title') {\n    return {\n      type: 'caption',\n      text: currentCaption.value\n    }\n  }\n  return {\n    type: 'empty',\n    text: ''\n  }\n})\n\nconst slot3Content = computed(() => {\n  // Slot 3 only used for caption if both slot 1 and 2 are occupied by title and author\n  if (currentCaption.value && slot1Content.value.type === 'title' && slot2Content.value.type === 'author') {\n    return {\n      type: 'caption',\n      text: currentCaption.value\n    }\n  }\n  return {\n    type: 'empty',\n    text: ''\n  }\n})\n\n// Compute display lines for karaoke mode - only future lyrics\nconst futureLyricLines = computed(() => {\n  const futureLines = props.lyrics.slice(props.currentLine + 1)\n  // Filter to only lyric lines (not metadata)\n  const lyricsOnly = futureLines.filter(line => !line.type || line.type === 'lyrics')\n  return lyricsOnly.slice(0, 1) // Show next 1 lyric lines only\n})\n\n// Methods\nconst toggleKaraokeMode = () => {\n  isKaraokeMode.value = !isKaraokeMode.value\n}\n\nconst setFontSize = (size: 'small' | 'medium' | 'large') => {\n  fontSize.value = size\n}\n\nconst isLinePlaying = (lyric: LyricLine): boolean => {\n  if (lyric.startTime === undefined) return false\n\n  const startTime = lyric.startTime\n  const endTime = lyric.endTime || startTime + (lyric.duration || 3000)\n\n  return props.currentTime >= startTime && props.currentTime <= endTime\n}\n\nconst getLineProgress = (lyric: LyricLine): number => {\n  if (!lyric.startTime || !lyric.duration) return 0\n\n  const elapsed = props.currentTime - lyric.startTime\n  const progress = (elapsed / lyric.duration) * 100\n\n  return Math.max(0, Math.min(100, progress))\n}\n\nconst formatTime = (timeMs: number): string => {\n  const seconds = Math.floor(timeMs / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const remainingSeconds = seconds % 60\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n}\n\nconst getCleanText = (lyric: LyricLine): string => {\n  // For metadata lines, show the original text\n  if (lyric.type && lyric.type !== 'lyrics') {\n    return lyric.text\n  }\n\n  // For lyrics lines, return clean text without syllable markers\n  if (lyric.words && lyric.words.length > 0) {\n    return lyric.words.map(word => word.word).join(' ')\n  }\n\n  // Fallback to original text if no words\n  return lyric.text || ''\n}\n\nconst isWordPast = (line: LyricLine, wordIndex: number): boolean => {\n  const word = line.words[wordIndex]\n  if (!word?.endTime) return false\n  return props.currentTime > word.endTime\n}\n\nconst isWordFuture = (line: LyricLine, wordIndex: number): boolean => {\n  const word = line.words[wordIndex]\n  if (!word?.startTime) return false\n  return props.currentTime < word.startTime\n}\n\nconst isSyllablePast = (syllable: any): boolean => {\n  if (!syllable?.endTime) return false\n  return props.currentTime > syllable.endTime\n}\n\nconst isSyllableFuture = (syllable: any): boolean => {\n  if (!syllable?.startTime) return false\n  return props.currentTime < syllable.startTime\n}\n\n// Auto-scroll to current line in normal mode\nwatch(\n  () => props.currentLine,\n  () => {\n    if (!isKaraokeMode.value) {\n      nextTick(() => {\n        const display = lyricsDisplay.value\n        if (display) {\n          const currentElement = display.querySelector('.preview-line.current')\n          if (currentElement) {\n            currentElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'center',\n            })\n          }\n        }\n      })\n    }\n  }\n)\n</script>\n\n<style scoped>\n.preview-container {\n  height: 400px;\n  overflow-y: auto;\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n}\n\n.preview-container.karaoke-mode {\n  background: #1a1a1a;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n}\n\n/* Font sizes */\n.font-small {\n  font-size: 0.875rem;\n}\n\n.font-medium {\n  font-size: 1rem;\n}\n\n.font-large {\n  font-size: 1.25rem;\n}\n\n/* Karaoke Mode Styles */\n.karaoke-display {\n  width: 100%;\n  max-width: 600px;\n}\n\n.context-lines {\n  margin: 0.5rem 0;\n}\n\n.context-line {\n  padding: 0.25rem 0;\n  opacity: 0.6;\n  font-size: 0.9em;\n}\n\n.context-line.previous {\n  color: #999;\n}\n\n.context-line.next {\n  color: #ccc;\n}\n\n.current-line-display {\n  padding: 0.7rem 0.7rem;\n  border: 1px solid #444;\n  border-radius: 1rem;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  margin: 1rem 0;\n  transition: all 0.3s ease;\n}\n\n.current-line-display.highlighted {\n  border-color: #ffd700;\n  background: rgba(255, 215, 0, 0.2);\n  transform: scale(1.05);\n}\n\n.current-line-display .line-text {\n  font-size: 1.3em;\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.current-line-display .line-timing {\n  font-size: 0.9em;\n  color: #ffd700;\n}\n\n/* Word and syllable highlighting */\n.karaoke-word {\n  display: inline-block;\n  margin: 0 0.25rem;\n  transition: all 0.3s ease;\n}\n\n.karaoke-word.current-word {\n  color: #ffd700;\n  font-weight: bold;\n  text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);\n  transform: scale(1.1);\n}\n\n.karaoke-word.past-word {\n  color: #90ee90;\n  opacity: 0.8;\n}\n\n.karaoke-word.future-word {\n  color: #ddd;\n  opacity: 0.6;\n}\n\n.karaoke-syllable {\n  transition: all 0.2s ease;\n}\n\n.karaoke-syllable.current-syllable {\n  background: linear-gradient(135deg, #ffd700, #ffed4e);\n  color: #000;\n  padding: 0.1rem 0.2rem;\n  border-radius: 0.25rem;\n  animation: syllable-highlight 0.5s ease-in-out;\n}\n\n.karaoke-syllable.past-syllable {\n  color: #90ee90;\n}\n\n.karaoke-syllable.future-syllable {\n  color: #ccc;\n}\n\n@keyframes syllable-highlight {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.2);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Normal Mode Styles */\n.normal-display {\n  padding: 0.5rem;\n  height: 100%;\n}\n\n.preview-line {\n  padding: 0.5rem;\n  margin: 0.125rem 0;\n  border-radius: 0.375rem;\n  transition: all 0.3s ease;\n  border-left: 4px solid transparent;\n}\n\n.preview-line.current {\n  background-color: rgba(33, 150, 243, 0.1);\n  border-left-color: #2196f3;\n}\n\n.preview-line.has-timing {\n  border-left-color: #4caf50;\n}\n\n.preview-line.playing {\n  background-color: rgba(255, 193, 7, 0.2);\n  border-left-color: #ffc107;\n  animation: pulse 1.5s ease-in-out infinite alternate;\n}\n\n.preview-line.past {\n  opacity: 0.7;\n  color: #666;\n}\n\n.preview-line.future {\n  opacity: 0.8;\n}\n\n.line-content {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.line-number {\n  min-width: 30px;\n  font-weight: bold;\n  color: #666;\n  font-size: 0.875rem;\n}\n\n.line-text {\n  flex: 1;\n}\n\n.line-timing {\n  font-family: 'Courier New', monospace;\n  font-size: 0.875rem;\n  color: #28a745;\n  font-weight: bold;\n}\n\n.line-progress {\n  height: 3px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 2px;\n  margin-top: 0.5rem;\n  overflow: hidden;\n}\n\n.progress-bar {\n  height: 100%;\n  background: linear-gradient(90deg, #ffc107, #ff9800);\n  border-radius: 2px;\n  transition: width 0.1s linear;\n}\n\n.empty-state {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.preview-controls .btn.active {\n  background-color: #0d6efd;\n  color: white;\n}\n\n/* Button sizing for font controls */\n.btn-group .btn {\n  min-width: 32px;\n}\n\n.btn-group .btn:nth-child(1) {\n  font-size: 0.75rem;\n}\n\n.btn-group .btn:nth-child(2) {\n  font-size: 0.875rem;\n}\n\n.btn-group .btn:nth-child(3) {\n  font-size: 1rem;\n}\n\n/* Animation */\n@keyframes pulse {\n  from {\n    transform: scale(1);\n  }\n\n  to {\n    transform: scale(1.02);\n  }\n}\n\n/* Scrollbar styling */\n.preview-container::-webkit-scrollbar {\n  width: 8px;\n}\n\n.preview-container::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n}\n\n.preview-container::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n}\n\n.preview-container::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.5);\n}\n\n/* Metadata line styling in preview */\n.context-line,\n.current-line-display,\n.normal-line {\n  position: relative;\n}\n\n/* Add visual indicator for metadata lines */\n.context-line:has(.line-text:contains(\"[@\")),\n.current-line-display:has(.line-text:contains(\"[@\")),\n.normal-line:has(.line-text:contains(\"[@\")) {\n  opacity: 0.7;\n  font-style: italic;\n  color: #6c757d;\n}\n\n/* Alternative approach using data attributes or classes if the above doesn't work */\n.metadata-preview-line {\n  opacity: 0.7;\n  font-style: italic;\n  color: #6c757d;\n  border-left: 3px solid #6c757d;\n  padding-left: 8px;\n  margin-left: -8px;\n}\n\n/* Professional Karaoke Display - Fixed Positions */\n.karaoke-display {\n  display: flex;\n  flex-direction: column;\n  min-height: 400px;\n  padding: 1.8rem 1rem 1rem 1rem;\n  text-align: center;\n}\n\n/* Fixed positions for title/author/captions */\n.karaoke-position {\n  x-vicb-border: 1px solid #2196f3;\n  min-height: 1.2rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0rem;\n  padding: 0px;\n}\n\n.position-1 {\n  /* Reserved for title or caption */\n  order: 1;\n}\n\n.position-2 {\n  /* Reserved for author or caption */\n  order: 2;\n}\n\n.position-3 {\n  /* Reserved for caption only */\n  order: 3;\n}\n\n/* Title styling - always position 1 */\n.display-title {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: #fff;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n/* Author styling - always position 2 */\n.display-author {\n  font-size: 1.1em;\n  color: #e0e0e0;\n  font-style: italic;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n/* Caption styling - position 1, 2, or 3 based on availability */\n.display-caption {\n  font-size: 0.9em;\n  color: #b0b0b0;\n  font-style: italic;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);\n  background: rgba(0, 0, 0, 0.2);\n}\n\n/* Current line - prominent display */\n.current-line-display {\n  order: 4;\n  margin: 1rem 0;\n  font-size: 1.6em;\n  font-weight: 500;\n  color: #fff;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);\n  min-height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Future lines - small and diminished */\n.future-lines {\n  order: 5;\n  margin-top: 1rem;\n}\n\n.future-line {\n  font-size: 0.9em;\n  color: #999;\n  opacity: 0.6;\n  margin-bottom: 0.5rem;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n/* Responsive sizing for different font sizes */\n.font-small .display-title {\n  font-size: 1.27em;\n}\n\n.font-small .display-author {\n  font-size: 1.04em;\n}\n\n.font-small .display-caption {\n  font-size: 0.81em;\n}\n\n.font-small .current-line-display {\n  font-size: 1.38em;\n}\n\n.font-small .future-line {\n  font-size: 0.81em;\n}\n\n.font-large .display-title {\n  font-size: 2.13em;\n}\n\n.font-large .display-author {\n  font-size: 1.53em;\n}\n\n.font-large .display-caption {\n  font-size: 1.19em;\n}\n\n.font-large .current-line-display {\n  font-size: 1.7em;\n}\n\n.font-large .future-line {\n  font-size: 0.94em;\n}\n</style>\n","<template>\n  <div class=\"waveform-viewer\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <!-- Top row: Title and mode indicator -->\n        <div class=\"d-flex justify-content-between align-items-center mb-2\">\n          <h5 class=\"mb-0\">🌊 Audio Waveform & Controls</h5>\n          <div class=\"d-flex align-items-center\">\n            <div class=\"mode-indicator me-3\" v-if=\"isTimingMode !== undefined\">\n              <span class=\"badge\" :class=\"isTimingMode ? 'bg-warning' : 'bg-secondary'\">\n                {{ isTimingMode ? 'Timing Mode' : 'Playback Mode' }}\n              </span>\n            </div>\n            <div class=\"loading-spinner me-2\" v-if=\"isLoading\">\n              <div class=\"spinner-border spinner-border-sm\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Controls row -->\n        <div class=\"controls-row d-flex justify-content-between align-items-center flex-wrap gap-2\">\n          <!-- Audio Player Controls -->\n          <div class=\"player-controls d-flex align-items-center gap-2\">\n            <button class=\"btn btn-outline-secondary btn-sm\" @click=\"emit('skip-backward')\" title=\"Skip backward 10s\">\n              <i class=\"bi bi-skip-backward\"></i>\n            </button>\n            <button class=\"btn btn-primary btn-sm\" @click=\"emit('play-pause')\" :disabled=\"!audioFile?.file\">\n              <i :class=\"playbackState.isPlaying ? 'bi bi-pause-fill' : 'bi bi-play-fill'\"></i>\n            </button>\n            <button class=\"btn btn-outline-secondary btn-sm\" @click=\"emit('skip-forward')\" title=\"Skip forward 10s\">\n              <i class=\"bi bi-skip-forward\"></i>\n            </button>\n          </div>\n\n          <!-- View Mode Controls -->\n          <div class=\"view-controls d-flex align-items-center gap-2\">\n            <!-- View Mode Toggle -->\n            <div class=\"btn-group\" role=\"group\">\n              <button class=\"btn btn-sm\" :class=\"viewMode === 'window' ? 'btn-primary' : 'btn-outline-primary'\"\n                @click=\"setViewMode('window')\" title=\"Sliding window view\">\n                <i class=\"bi bi-window\"></i> Window\n              </button>\n              <button class=\"btn btn-sm\" :class=\"viewMode === 'full' ? 'btn-primary' : 'btn-outline-primary'\"\n                @click=\"setViewMode('full')\" title=\"Full song view\">\n                <i class=\"bi bi-arrows-fullscreen\"></i> Full\n              </button>\n            </div>\n\n            <!-- Zoom Controls (only for full view) -->\n            <div v-if=\"viewMode === 'full'\" class=\"zoom-controls d-flex align-items-center\">\n              <button class=\"btn btn-sm btn-outline-secondary\" @click=\"zoomOut\" :disabled=\"zoomLevel <= 1\"\n                title=\"Zoom out\">\n                <i class=\"bi bi-zoom-out\"></i>\n              </button>\n              <span class=\"zoom-level mx-2\">{{ Math.round(zoomLevel * 100) }}%</span>\n              <button class=\"btn btn-sm btn-outline-secondary\" @click=\"zoomIn\" :disabled=\"zoomLevel >= 5\"\n                title=\"Zoom in\">\n                <i class=\"bi bi-zoom-in\"></i>\n              </button>\n            </div>\n\n            <!-- Window Controls (only for window view) -->\n            <div v-if=\"viewMode === 'window'\" class=\"window-controls d-flex align-items-center gap-2\">\n              <select class=\"form-select form-select-sm\" v-model=\"windowDuration\" @change=\"onWindowDurationChange\">\n                <option :value=\"5000\">5s</option>\n                <option :value=\"10000\">10s</option>\n                <option :value=\"15000\">15s</option>\n                <option :value=\"25000\">25s</option>\n              </select>\n              <button class=\"btn btn-sm\" :class=\"autoScroll ? 'btn-success' : 'btn-outline-success'\"\n                @click=\"toggleAutoScroll\" title=\"Auto-scroll with playback\">\n                <i class=\"bi bi-skip-end\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Progress Bar -->\n        <div class=\"progress-container mt-2\" v-if=\"playbackState\">\n          <div class=\"progress\" style=\"height: 6px; cursor: pointer\" @click=\"seekToClick\">\n            <div class=\"progress-bar\" :style=\"{ width: progressPercent + '%' }\" role=\"progressbar\"></div>\n          </div>\n          <div class=\"time-display d-flex justify-content-between mt-1\">\n            <small class=\"text-muted\">{{ formatTime(currentTime) }}</small>\n            <small class=\"text-muted\">{{ formatTime(audioFile?.duration || 0) }}</small>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"card-body p-0\">\n        <div class=\"waveform-container\" ref=\"waveformContainer\">\n          <!-- Loading State -->\n          <div v-if=\"isLoading\" class=\"loading-state d-flex align-items-center justify-content-center\">\n            <div class=\"spinner-border text-primary me-2\" role=\"status\"></div>\n            <span>Analyzing audio...</span>\n          </div>\n\n          <!-- No Audio State -->\n          <div v-else-if=\"!audioFile?.file\" class=\"no-audio-state d-flex align-items-center justify-content-center\">\n            <div class=\"text-center text-muted\">\n              <i class=\"bi bi-music-note-beamed display-4\"></i>\n              <p class=\"mt-2\">No audio file loaded</p>\n            </div>\n          </div>\n\n          <!-- Audio File Content -->\n          <div v-else>\n            <!-- Content slot above waveform -->\n            <slot name=\"above-waveform\"></slot>\n\n            <!-- Waveform Canvas -->\n            <div class=\"waveform-canvas-container\" @mousedown=\"startSelection\" @mousemove=\"updateSelection\"\n              @mouseup=\"endSelection\">\n              <canvas ref=\"waveformCanvas\" class=\"waveform-canvas\" :width=\"canvasWidth\" :height=\"canvasHeight\"\n                @click=\"seekToPosition\"></canvas>\n\n              <!-- Playback position handled by canvas drawing -->\n\n              <!-- Lyrics Markers -->\n              <div v-for=\"(lyric, index) in positionedLyrics\" :key=\"lyric.id\" class=\"lyric-marker\" :class=\"{\n                active: index === currentLineIndex,\n                selected: selectedMarkers.includes(index),\n              }\" :style=\"{ left: lyric.position + 'px' }\" @click=\"selectLyricMarker(index, $event)\"\n                @mousedown=\"startDragMarker(index, $event)\" :title=\"`Line ${lyric.lineNumber}: ${lyric.text}`\">\n                <div class=\"marker-line\"></div>\n                <div class=\"marker-label\">{{ lyric.lineNumber }}</div>\n              </div>\n\n              <!-- Selection Area -->\n              <div v-if=\"selectionStart !== null && selectionEnd !== null\" class=\"selection-area\"\n                :style=\"selectionStyle\">\n              </div>\n\n              <!-- Time Scale -->\n              <div class=\"time-scale\">\n                <div v-for=\"mark in timeMarks\" :key=\"mark.time\" class=\"time-mark\"\n                  :style=\"{ left: mark.position + 'px' }\">\n                  <div class=\"time-mark-line\"></div>\n                  <div class=\"time-mark-label\">{{ mark.label }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"row align-items-center\">\n          <div class=\"col-sm-4\">\n            <small class=\"text-muted\">\n              <span v-if=\"audioFile?.duration\">Duration: {{ formatTime(audioFile.duration) }}</span>\n              <span v-if=\"selectedDuration\"> • Selection: {{ formatTime(selectedDuration) }}</span>\n            </small>\n          </div>\n          <div class=\"col-sm-4 text-center\">\n            <small class=\"text-muted\">\n              {{ lyrics.length }} lyrics • {{ timedLyricsCount }} positioned\n            </small>\n          </div>\n          <div class=\"col-sm-4 text-end\">\n            <small class=\"text-muted\">\n              <span v-if=\"viewMode === 'window'\">Window: {{ formatTime(windowDuration) }}</span>\n              <span v-if=\"viewMode === 'full'\">Zoom: {{ Math.round(zoomLevel * 100) }}%</span>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\nimport type { AudioFile, LyricLine, WaveformData } from '@/types/karaoke'\n\n// Props\ninterface Props {\n  audioFile: AudioFile\n  lyrics: LyricLine[]\n  currentTime: number\n  waveformData: WaveformData | null\n  currentLineIndex?: number\n  playbackState?: any\n  isTimingMode?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  currentLineIndex: 0,\n  isTimingMode: false,\n})\n\n// Emits\nconst emit = defineEmits<{\n  seek: [time: number]\n  'lyrics-position': [lineIndex: number, time: number]\n  selection: [startTime: number, endTime: number]\n  'play-pause': []\n  'skip-backward': []\n  'skip-forward': []\n  'view-window-change': [viewStart: number, viewEnd: number, viewMode: 'full' | 'window']\n}>()\n\n// Reactive state\nconst waveformContainer = ref<HTMLElement>()\nconst waveformCanvas = ref<HTMLCanvasElement>()\nconst isLoading = ref(false)\nconst generatedWaveformData = ref<WaveformData | null>(null)\nconst zoomLevel = ref(1)\nconst canvasWidth = ref(800)\nconst canvasHeight = ref(120) // Increased height for better visibility\nconst selectionStart = ref<number | null>(null)\nconst selectionEnd = ref<number | null>(null)\nconst isDragging = ref(false)\nconst dragMarkerIndex = ref(-1)\nconst selectedMarkers = ref<number[]>([])\n\n// New waveform enhancement controls\nconst viewMode = ref<'full' | 'window'>('window') // Default to sliding window\nconst windowDuration = ref(15000) // 15 seconds window (in milliseconds)\nconst windowStart = ref(0) // Start position of the window in milliseconds\nconst autoScroll = ref(true) // Auto-scroll with playback\n\n// Computed properties\nconst positionedLyrics = computed(() => {\n  return props.lyrics\n    .filter(lyric => lyric.startTime !== undefined)\n    .map((lyric) => ({\n      ...lyric,\n      position: timeToPixel(lyric.startTime!),\n    }))\n})\n\n// Playback position now handled by canvas drawing\n\nconst timedLyricsCount = computed(() => {\n  return props.lyrics.filter((line: LyricLine) => line.startTime !== undefined).length\n})\n\n// Progress bar computed properties\nconst progressPercent = computed(() => {\n  if (!props.playbackState || !props.audioFile?.duration) return 0\n  return Math.min((props.currentTime / props.audioFile.duration) * 100, 100)\n})\n\nconst selectedDuration = computed(() => {\n  if (selectionStart.value !== null && selectionEnd.value !== null) {\n    const startTime = pixelToTime(Math.min(selectionStart.value, selectionEnd.value))\n    const endTime = pixelToTime(Math.max(selectionStart.value, selectionEnd.value))\n    return endTime - startTime\n  }\n  return 0\n})\n\nconst selectionStyle = computed(() => {\n  if (selectionStart.value !== null && selectionEnd.value !== null) {\n    const left = Math.min(selectionStart.value, selectionEnd.value)\n    const width = Math.abs(selectionEnd.value - selectionStart.value)\n    return {\n      left: left + 'px',\n      width: width + 'px',\n    }\n  }\n  return {}\n})\n\nconst timeMarks = computed(() => {\n  if (!props.audioFile?.duration) return []\n\n  const marks = []\n\n  if (viewMode.value === 'window') {\n    // Window mode: show marks only for the visible window (all values in milliseconds)\n    const windowStartMs = Math.floor(windowStart.value) // Already in milliseconds\n    const windowDurationMs = windowDuration.value // Already in milliseconds\n    const windowEndMs = windowStartMs + windowDurationMs\n    const intervalMs = windowDurationMs > 30000 ? 5000 : 2000 // 5s or 2s intervals\n\n    // Calculate starting mark aligned to interval boundaries\n    const firstMarkMs = Math.ceil(windowStartMs / intervalMs) * intervalMs\n\n    for (let timeMs = firstMarkMs; timeMs <= windowEndMs; timeMs += intervalMs) {\n      if (timeMs >= windowStartMs) {\n        const positionInWindow = (timeMs - windowStartMs) / windowDurationMs\n\n        // Only add marks that are within the visible window\n        if (positionInWindow >= 0 && positionInWindow <= 1) {\n          marks.push({\n            time: timeMs,\n            position: positionInWindow * canvasWidth.value,\n            label: formatTime(timeMs),\n          })\n        }\n      }\n    }\n  } else {\n    // Full mode: show marks for the entire duration\n    const duration = props.audioFile.duration\n    const interval = duration > 60000 ? 10000 : 5000 // 10s or 5s intervals\n\n    for (let time = 0; time <= duration; time += interval) {\n      marks.push({\n        time,\n        position: timeToPixel(time),\n        label: formatTime(time),\n      })\n    }\n  }\n\n  return marks\n})\n\n// Methods\nconst timeToPixel = (timeMs: number): number => {\n  if (!props.audioFile?.duration) return 0\n  const ratio = timeMs / props.audioFile.duration\n  return ratio * canvasWidth.value * zoomLevel.value\n}\n\nconst pixelToTime = (pixel: number): number => {\n  if (!props.audioFile?.duration) return 0\n  const ratio = pixel / (canvasWidth.value * zoomLevel.value)\n  return ratio * props.audioFile.duration\n}\n\nconst seekToPosition = (event: MouseEvent) => {\n  if (isDragging.value) return\n\n  const rect = waveformCanvas.value!.getBoundingClientRect()\n  const x = event.clientX - rect.left\n  const time = pixelToTime(x)\n  emit('seek', time)\n}\n\nconst selectLyricMarker = (index: number, event: MouseEvent) => {\n  event.stopPropagation()\n\n  if (event.ctrlKey || event.metaKey) {\n    // Multi-select\n    const markerIndex = selectedMarkers.value.indexOf(index)\n    if (markerIndex >= 0) {\n      selectedMarkers.value.splice(markerIndex, 1)\n    } else {\n      selectedMarkers.value.push(index)\n    }\n  } else {\n    // Single select\n    selectedMarkers.value = [index]\n  }\n}\n\nconst startDragMarker = (index: number, event: MouseEvent) => {\n  event.stopPropagation()\n  isDragging.value = true\n  dragMarkerIndex.value = index\n\n  const handleMouseMove = () => {\n    if (!isDragging.value) return\n\n    // Intentionally left blank for now; could compute live preview here if needed.\n  }\n\n  const handleMouseUp = () => {\n    if (isDragging.value) {\n      const rect = waveformCanvas.value!.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const time = pixelToTime(x)\n\n      emit('lyrics-position', dragMarkerIndex.value, Math.max(0, time))\n    }\n\n    isDragging.value = false\n    dragMarkerIndex.value = -1\n    document.removeEventListener('mousemove', handleMouseMove)\n    document.removeEventListener('mouseup', handleMouseUp)\n  }\n\n  document.addEventListener('mousemove', handleMouseMove)\n  document.addEventListener('mouseup', handleMouseUp)\n}\n\nconst startSelection = (event: MouseEvent) => {\n  if (event.target !== waveformCanvas.value) return\n\n  const rect = waveformCanvas.value!.getBoundingClientRect()\n  const x = event.clientX - rect.left\n  selectionStart.value = x\n  selectionEnd.value = x\n}\n\nconst updateSelection = (event: MouseEvent) => {\n  if (selectionStart.value === null) return\n\n  const rect = waveformCanvas.value!.getBoundingClientRect()\n  const x = event.clientX - rect.left\n  selectionEnd.value = x\n}\n\nconst endSelection = () => {\n  if (selectionStart.value !== null && selectionEnd.value !== null) {\n    const startTime = pixelToTime(Math.min(selectionStart.value, selectionEnd.value))\n    const endTime = pixelToTime(Math.max(selectionStart.value, selectionEnd.value))\n\n    if (Math.abs(selectionEnd.value - selectionStart.value) > 5) {\n      emit('selection', startTime, endTime)\n    }\n  }\n\n  // Clear selection after a delay\n  setTimeout(() => {\n    selectionStart.value = null\n    selectionEnd.value = null\n  }, 2000)\n}\n\nconst zoomIn = () => {\n  if (zoomLevel.value < 5) {\n    zoomLevel.value += 0.5\n    drawWaveform()\n  }\n}\n\nconst zoomOut = () => {\n  if (zoomLevel.value > 1) {\n    zoomLevel.value -= 0.5\n    drawWaveform()\n  }\n}\n\n// View mode controls\nconst setViewMode = (mode: 'full' | 'window') => {\n  viewMode.value = mode\n  if (mode === 'window') {\n    // Reset zoom when switching to window mode\n    zoomLevel.value = 1\n    updateWindowPosition()\n  }\n  drawWaveform()\n  emitViewWindowChange()\n}\n\nconst onWindowDurationChange = () => {\n  updateWindowPosition()\n  drawWaveform()\n  emitViewWindowChange()\n}\n\nconst toggleAutoScroll = () => {\n  autoScroll.value = !autoScroll.value\n}\n\n// Helper function to emit view window changes\nconst emitViewWindowChange = () => {\n  if (viewMode.value === 'window') {\n    const viewStart = windowStart.value / 1000 // Convert to seconds\n    const viewEnd = (windowStart.value + windowDuration.value) / 1000 // Convert to seconds\n    emit('view-window-change', viewStart, viewEnd, 'window')\n  } else {\n    // Full mode - show entire duration\n    const duration = props.audioFile?.duration || 60000 // Default to 60 seconds\n    emit('view-window-change', 0, duration / 1000, 'full')\n  }\n}\n\nconst updateWindowPosition = () => {\n  if (viewMode.value === 'window') {\n    const halfWindow = windowDuration.value / 2 // Half window in milliseconds\n\n    if (autoScroll.value && props.currentTime > 0) {\n      if (props.currentTime <= halfWindow) {\n        // Before mid-point: keep window at start\n        windowStart.value = 0\n      } else {\n        // After mid-point: center the window around current time\n        windowStart.value = Math.max(0, props.currentTime - halfWindow)\n      }\n    } else {\n      // When not playing or at start, show from beginning\n      windowStart.value = 0\n    }\n\n    // console.log('Window position updated:', {\n    //   windowStart: windowStart.value,\n    //   windowDuration: windowDuration.value,\n    //   currentTime: props.currentTime,\n    //   halfWindow,\n    //   autoScroll: autoScroll.value,\n    //   phase: props.currentTime <= halfWindow ? 'line-moves' : 'wave-scrolls',\n    // })\n  }\n\n  // Emit view window change whenever position updates\n  emitViewWindowChange()\n}\n\n// Timing controls methods\nconst seekToClick = (event: MouseEvent) => {\n  if (!props.audioFile?.duration) return\n\n  const progressBar = event.currentTarget as HTMLElement\n  const rect = progressBar.getBoundingClientRect()\n  const clickX = event.clientX - rect.left\n  const percentage = clickX / rect.width\n  const seekTime = percentage * props.audioFile.duration\n\n  emit('seek', seekTime)\n}\n\nconst drawWaveform = async () => {\n  const canvas = waveformCanvas.value\n  const waveformData = props.waveformData || generatedWaveformData.value\n  if (!canvas || !waveformData) return\n\n  const ctx = canvas.getContext('2d')\n  if (!ctx) return\n\n  // Clear canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n  // Draw waveform\n  const { peaks } = waveformData\n  const width = canvas.width\n  const height = canvas.height\n\n  // Calculate visible range based on view mode\n  let visiblePeaks = peaks\n  let startIndex = 0\n\n  if (viewMode.value === 'window') {\n    // Show only the window duration worth of peaks\n    const totalDuration = waveformData.duration || props.audioFile?.duration || 1\n    const startRatio = windowStart.value / totalDuration\n    const durationRatio = windowDuration.value / totalDuration\n\n    startIndex = Math.floor(startRatio * peaks.length)\n    const endIndex = Math.min(Math.floor((startRatio + durationRatio) * peaks.length), peaks.length)\n    visiblePeaks = peaks.slice(startIndex, endIndex)\n\n    // Debug logging - TMI for the console; it just noise!\n    //  we could add a vue based element to show this in the brower UI if needed\n    // console.log('Window mode debug:', {\n    //   totalDuration,\n    //   windowStart: windowStart.value,\n    //   windowDuration: windowDuration.value,\n    //   startRatio,\n    //   durationRatio,\n    //   peaksLength: peaks.length,\n    //   startIndex,\n    //   endIndex,\n    //   visiblePeaksLength: visiblePeaks.length,\n    //   visiblePeaksPreview: visiblePeaks.slice(0, 5)\n    // })\n\n    // Fallback: if no visible peaks (edge case), show first portion\n    if (visiblePeaks.length === 0) {\n      const fallbackEndIndex = Math.min(Math.floor(peaks.length * 0.2), peaks.length) // Show first 20%\n      visiblePeaks = peaks.slice(0, fallbackEndIndex)\n      // Better as a UI visualization than console logging\n      // console.log('Fallback applied, showing first 20% of peaks:', visiblePeaks.length)\n    }\n  }\n\n  const barWidth = width / visiblePeaks.length\n\n  // Enhanced visualization: top-half waves, bottom-centered, auto-height\n  ctx.fillStyle = '#3b82f6'\n  ctx.strokeStyle = '#1d4ed8'\n\n  // Calculate step size for proper zoom level - with 8000 samples, we can afford smaller steps\n  const stepSize =\n    viewMode.value === 'window'\n      ? Math.max(1, Math.ceil(visiblePeaks.length / (width * 2))) // More detail for window mode\n      : Math.max(1, Math.ceil(visiblePeaks.length / (width * zoomLevel.value * 2))) // More detail for full mode too\n\n  for (let i = 0; i < visiblePeaks.length; i += stepSize) {\n    // Only show top half of waveform (positive amplitudes only)\n    const amplitude = Math.abs(visiblePeaks[i])\n\n    // More aggressive height scaling - multiply by a scaling factor\n    const scalingFactor = 3.0 // Increase this to make waveform taller\n    const barHeight = Math.min(amplitude * height * scalingFactor, height * 0.95) // Use up to 95% of height\n\n    const x =\n      viewMode.value === 'window' ? (i / visiblePeaks.length) * width : (i / visiblePeaks.length) * width * zoomLevel.value\n    const y = height - barHeight // Bottom-centered: start from bottom and go up\n\n    // Calculate bar width based on view mode\n    const actualBarWidth =\n      viewMode.value === 'window'\n        ? Math.max(1, (width / visiblePeaks.length) * stepSize)\n        : Math.max(1, barWidth * zoomLevel.value)\n\n    // Draw the bar\n    if (barHeight > 1) {\n      ctx.fillRect(x, y, actualBarWidth, barHeight)\n    }\n  }\n\n  // Draw baseline at bottom\n  ctx.strokeStyle = '#6b7280'\n  ctx.lineWidth = 1\n  ctx.beginPath()\n  ctx.moveTo(0, height - 1)\n  ctx.lineTo(width, height - 1)\n  ctx.stroke()\n\n  // Draw current time indicator if provided\n  if (props.currentTime !== undefined) {\n    const totalDuration = waveformData.duration || props.audioFile?.duration\n    if (totalDuration) {\n      let timeX\n      if (viewMode.value === 'window') {\n        // Smart positioning with three states:\n        const halfWindow = windowDuration.value / 2\n        const endThreshold = totalDuration - halfWindow\n\n        if (props.currentTime <= halfWindow) {\n          // STATE 1: Before mid-point - red line moves from left (0% to 50%)\n          timeX = (props.currentTime / windowDuration.value) * width\n        } else if (props.currentTime >= endThreshold) {\n          // STATE 3: Near end of song - red line tracks to the right\n          const remainingTime = totalDuration - props.currentTime\n          const remainingWindow = windowDuration.value\n          timeX = width - (remainingTime / remainingWindow) * width\n        } else {\n          // STATE 2: Middle section - red line stays centered, waveform scrolls\n          timeX = width / 2\n        }\n      } else {\n        timeX = (props.currentTime / totalDuration) * width * zoomLevel.value\n      }\n\n      if (timeX >= 0 && timeX <= width) {\n        ctx.strokeStyle = '#ef4444'\n        ctx.lineWidth = 3 // Make it slightly thicker for better visibility\n        ctx.beginPath()\n        ctx.moveTo(timeX, 0)\n        ctx.lineTo(timeX, height)\n        ctx.stroke()\n      }\n    }\n  }\n}\n\nconst generateWaveformData = async () => {\n  if (!props.audioFile?.file) return\n\n  isLoading.value = true\n\n  try {\n    const audioContext = new AudioContext()\n    const arrayBuffer = await props.audioFile.file.arrayBuffer()\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer)\n\n    const channelData = audioBuffer.getChannelData(0)\n    const samples = 8000 // Much higher sample count for smooth waveform\n    const blockSize = Math.floor(channelData.length / samples)\n    const peaks = []\n\n    // Find the overall maximum to normalize peaks properly\n    let globalMax = 0\n    for (let i = 0; i < channelData.length; i++) {\n      globalMax = Math.max(globalMax, Math.abs(channelData[i]))\n    }\n\n    for (let i = 0; i < samples; i++) {\n      const start = i * blockSize\n      const end = start + blockSize\n      let max = 0\n\n      for (let j = start; j < end; j++) {\n        max = Math.max(max, Math.abs(channelData[j]))\n      }\n\n      // Normalize peaks to use full height range\n      peaks.push(globalMax > 0 ? max / globalMax : 0)\n    }\n\n    // Store the generated waveform data\n    generatedWaveformData.value = {\n      peaks,\n      sampleRate: audioBuffer.sampleRate,\n      duration: audioBuffer.duration,\n      channels: audioBuffer.numberOfChannels,\n    }\n\n    // Initialize window position now that we have duration\n    if (viewMode.value === 'window') {\n      updateWindowPosition()\n    }\n\n    nextTick(() => {\n      drawWaveform()\n    })\n  } catch (error) {\n    console.error('Error generating waveform:', error)\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst formatTime = (timeMs: number): string => {\n  const seconds = Math.floor(timeMs / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const remainingSeconds = seconds % 60\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n}\n\nconst updateCanvasSize = () => {\n  if (waveformContainer.value) {\n    canvasWidth.value = waveformContainer.value.clientWidth - 20\n  }\n}\n\n// Watchers\nwatch(\n  () => props.audioFile,\n  () => {\n    if (props.audioFile?.file) {\n      generateWaveformData()\n    }\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => props.waveformData,\n  () => {\n    if (props.waveformData) {\n      nextTick(() => {\n        drawWaveform()\n      })\n    }\n  }\n)\n\nwatch(\n  () => generatedWaveformData.value,\n  () => {\n    if (generatedWaveformData.value) {\n      nextTick(() => {\n        drawWaveform()\n      })\n    }\n  }\n)\n\nwatch(\n  () => props.currentTime,\n  (newTime, oldTime) => {\n    // Auto-scroll in window mode with smart positioning\n    if (viewMode.value === 'window' && newTime !== undefined && props.audioFile?.duration) {\n      const halfWindow = windowDuration.value / 2\n\n      // Detect if this is a manual seek (large time jump) vs natural playback\n      const isManualSeek = oldTime !== undefined && Math.abs(newTime - oldTime) > 2000 // 2+ second jump\n\n      // Update window position if auto-scroll is on OR if it's a manual seek\n      if (autoScroll.value || isManualSeek) {\n        const endThreshold = props.audioFile.duration - halfWindow\n\n        if (newTime <= halfWindow) {\n          // STATE 1: Before mid-point - keep window at start, red line moves from left\n          windowStart.value = 0\n        } else if (newTime >= endThreshold) {\n          // STATE 3: Near end of song - keep window at end, red line tracks to right\n          windowStart.value = Math.max(0, props.audioFile.duration - windowDuration.value)\n        } else {\n          // STATE 2: Middle section - center current time, red line stays at 50%\n          windowStart.value = Math.max(0, Math.min(newTime - halfWindow, props.audioFile.duration - windowDuration.value))\n        }\n\n        // const behavior = newTime <= halfWindow ? 'red-line-moves-left' :\n        //   newTime >= endThreshold ? 'red-line-tracks-right' : 'waveform-scrolls'\n\n        // console.log('Window position update:', {\n        //   currentTime: newTime,\n        //   endThreshold,\n        //   isManualSeek,\n        //   autoScroll: autoScroll.value,\n        //   windowStart: windowStart.value,\n        //   behavior\n        // })\n\n        // Emit view window change after updating window position\n        emitViewWindowChange()\n      }\n    }\n\n    nextTick(() => {\n      drawWaveform()\n    })\n  }\n)\n\n// Lifecycle\nonMounted(() => {\n  updateCanvasSize()\n  window.addEventListener('resize', updateCanvasSize)\n\n  // Values are already set in ref initialization - 15 seconds window mode with auto-scroll\n  // Emit initial view window state\n  emitViewWindowChange()\n})\n</script>\n\n<style scoped>\n.waveform-container {\n  min-height: 220px;\n  position: relative;\n  background: #f8f9fa;\n  overflow-x: auto;\n}\n\n.loading-state,\n.no-audio-state {\n  height: 220px;\n}\n\n.waveform-canvas-container {\n  margin-top: 0.5em;\n  position: relative;\n  padding: 20px 10px 5px;\n  /* Remove min-height to let content determine size naturally */\n  /* Total content: 20px + 120px (canvas) + 15px (time-scale) + 5px = 160px */\n}\n\n.waveform-canvas {\n  display: block;\n  cursor: crosshair;\n  border: 1px solid #dee2e6;\n  background: white;\n}\n\n/* Playback position now handled by canvas drawing */\n\n.lyric-marker {\n  position: absolute;\n  top: 15px;\n  /* Calculate height to stop at canvas baseline: container top padding (20px) + canvas baseline (119px) - marker top (15px) = 124px */\n  height: 124px;\n  cursor: pointer;\n  z-index: 5;\n}\n\n.marker-line {\n  width: 2px;\n  height: 100%;\n  background-color: #28a745;\n  margin: 0 auto;\n}\n\n.marker-label {\n  position: absolute;\n  top: -15px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: #28a745;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 0.75rem;\n  font-weight: bold;\n  white-space: nowrap;\n}\n\n.lyric-marker.active .marker-line {\n  background-color: #ffc107;\n  width: 3px;\n}\n\n.lyric-marker.active .marker-label {\n  background-color: #ffc107;\n  color: #000;\n}\n\n.lyric-marker.selected .marker-line {\n  background-color: #007bff;\n  width: 3px;\n}\n\n.lyric-marker.selected .marker-label {\n  background-color: #007bff;\n}\n\n.selection-area {\n  position: absolute;\n  top: 20px;\n  bottom: 40px;\n  background-color: rgba(0, 123, 255, 0.2);\n  border: 1px solid #007bff;\n  pointer-events: none;\n  z-index: 3;\n}\n\n.time-scale {\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  right: 10px;\n  height: 15px;\n}\n\n.time-mark {\n  position: absolute;\n  bottom: 0;\n}\n\n.time-mark-line {\n  width: 1px;\n  height: 10px;\n  background-color: #6c757d;\n  margin: 0 auto;\n}\n\n.time-mark-label {\n  position: absolute;\n  top: 3px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 0.75rem;\n  color: #6c757d;\n  white-space: nowrap;\n}\n\n.zoom-level {\n  font-size: 0.875rem;\n  color: #6c757d;\n  min-width: 50px;\n  text-align: center;\n}\n\n.controls-row {\n  min-height: 38px;\n}\n\n.controls-row>* {\n  flex-shrink: 0;\n}\n\n.player-controls .btn {\n  min-width: 36px;\n}\n\n.view-controls {\n  flex-wrap: wrap;\n}\n\n@media (max-width: 768px) {\n  .controls-row {\n    flex-direction: column;\n    gap: 0.75rem !important;\n  }\n\n  .view-controls {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n/* Scrollbar styling */\n.waveform-container::-webkit-scrollbar {\n  height: 8px;\n}\n\n.waveform-container::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.waveform-container::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.waveform-container::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n</style>\n","<template>\n  <div class=\"mb-4\">\n    <h6><i class=\"bi bi-stopwatch\"></i> Timing Mode</h6>\n    <div class=\"d-grid gap-1\">\n      <button class=\"btn btn-sm\" :class=\"isTimingMode ? 'btn-warning' : 'btn-outline-primary'\"\n        @click=\"$emit('toggle-timing-mode')\">\n        <i class=\"bi bi-crosshair\"></i>\n        {{ isTimingMode ? 'Exit Timing' : 'Start Timing' }}\n      </button>\n      <div class=\"timing-status small text-muted mt-1\">\n        <template v-if=\"isTimingMode\">\n          Press Space during playback to assign word timings\n        </template>\n        <template v-else>\n          Word boxes can be edited manually\n        </template>\n      </div>\n    </div>\n  </div>\n\n  <!-- Musical Timing Section -->\n  <div class=\"mb-4\">\n    <h6><i class=\"bi bi-music-note\"></i> Musical Timing</h6>\n    <div class=\"d-grid gap-1\">\n      <button class=\"btn btn-sm btn-outline-success\" @click=\"$emit('apply-musical-timing')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-magic\"></i>\n        Apply Musical Intelligence\n      </button>\n      <button class=\"btn btn-sm btn-outline-secondary\" @click=\"$emit('reset-syllable-timing')\"\n        :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-arrow-clockwise\"></i>\n        Reset Syllable Timing\n      </button>\n      <button class=\"btn btn-sm btn-outline-danger\" @click=\"$emit('clear-timing')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-trash\"></i>\n        Clear from Current Line\n      </button>\n      <button class=\"btn btn-sm btn-outline-info\" @click=\"showAnalysis = !showAnalysis\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-graph-up\"></i>\n        {{ showAnalysis ? 'Hide' : 'Show' }} Analysis\n      </button>\n    </div>\n\n    <!-- Analysis Panel -->\n    <div v-if=\"showAnalysis && songAnalysis\" class=\"mt-2 p-2 bg-light rounded small\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <strong>BPM:</strong> {{ songAnalysis.estimatedBPM.toFixed(0) }}<br>\n          <strong>Words:</strong> {{ songAnalysis.totalWords }}\n        </div>\n        <div class=\"col-6\">\n          <strong>Rests:</strong> {{ songAnalysis.detectedRests }}<br>\n          <strong>Quality:</strong> {{ songAnalysis.timingQuality }}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"timing-status small text-muted mt-1\">\n      Musical timing analyzes your word timings to distribute syllables using musical patterns (8th notes, quarter\n      notes,\n      etc.) and respects natural pauses.\n    </div>\n  </div>\n\n  <!-- Timing Diagnostics Section -->\n  <div class=\"mb-4\">\n    <h6><i class=\"bi bi-search\"></i> Timing Diagnostics</h6>\n    <div class=\"d-grid gap-1\">\n      <button class=\"btn btn-sm btn-outline-info\" @click=\"$emit('analyze-timing')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-bug\"></i>\n        Check for Overlaps\n      </button>\n      <button class=\"btn btn-sm btn-outline-warning\" @click=\"$emit('fix-overlaps')\" :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-wrench\"></i>\n        Fix Overlaps\n      </button>\n      <button class=\"btn btn-sm btn-outline-secondary\" @click=\"showDiagnostics = !showDiagnostics\"\n        :disabled=\"!hasTimedWords\">\n        <i class=\"bi bi-info-circle\"></i>\n        {{ showDiagnostics ? 'Hide' : 'Show' }} Details\n      </button>\n    </div>\n\n    <!-- Diagnostics Panel -->\n    <div v-if=\"showDiagnostics && timingAnalysis\" class=\"mt-2 p-2 rounded small\"\n      :class=\"timingAnalysis.hasIssues ? 'bg-warning bg-opacity-10 border border-warning' : 'bg-success bg-opacity-10 border border-success'\">\n      <div class=\"mb-2\">\n        <strong>Status:</strong> {{ timingAnalysis.summary }}\n      </div>\n\n      <div v-if=\"timingAnalysis.sequenceViolations && timingAnalysis.sequenceViolations.length > 0\" class=\"mb-2\">\n        <strong class=\"text-danger\">🚨 Sequence Violations:</strong>\n        <ul class=\"mb-0 ps-3\">\n          <li v-for=\"violation in timingAnalysis.sequenceViolations.slice(0, 3)\"\n            :key=\"`${violation.word1}-${violation.word2}`\" class=\"small text-danger\">\n            {{ violation.issue }}\n          </li>\n          <li v-if=\"timingAnalysis.sequenceViolations.length > 3\" class=\"small text-muted\">\n            ...and {{ timingAnalysis.sequenceViolations.length - 3 }} more\n          </li>\n        </ul>\n      </div>\n\n      <div v-if=\"timingAnalysis.overlaps.length > 0\" class=\"mb-2\">\n        <strong class=\"text-warning\">Overlaps Found:</strong>\n        <ul class=\"mb-0 ps-3\">\n          <li v-for=\"overlap in timingAnalysis.overlaps.slice(0, 5)\"\n            :key=\"`${overlap.word1.lineIndex}-${overlap.word1.wordIndex}`\" class=\"small\">\n            \"{{ overlap.word1.word }}\" → \"{{ overlap.word2.word }}\" ({{ overlap.overlapDuration }}ms overlap)\n          </li>\n          <li v-if=\"timingAnalysis.overlaps.length > 5\" class=\"small text-muted\">\n            ...and {{ timingAnalysis.overlaps.length - 5 }} more\n          </li>\n        </ul>\n      </div>\n\n      <div v-if=\"timingAnalysis.smallGaps.length > 0\" class=\"mb-2\">\n        <strong class=\"text-info\">Small Gaps:</strong>\n        <span class=\"small\">{{ timingAnalysis.smallGaps.length }} gaps &lt; 50ms</span>\n      </div>\n\n      <div class=\"small text-muted\">\n        {{ timingAnalysis.timedWords }} of {{ timingAnalysis.totalWords }} words have timing data\n      </div>\n    </div>\n\n    <div class=\"timing-status small text-muted mt-1\">\n      Overlapping word timings can cause editing issues. Use diagnostics to detect and fix timing problems.\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport type { TimingAnalysisResult } from '../composables/useTimingAnalysis'\n\ninterface Props {\n  isTimingMode: boolean\n  timedWords?: number\n  totalWords?: number\n  songAnalysis?: {\n    estimatedBPM: number\n    totalWords: number\n    detectedRests: number\n    timingQuality: string\n  } | null\n  timingAnalysis?: TimingAnalysisResult | null\n}\n\nconst props = defineProps<Props>()\n\n// Local reactive state\nconst showAnalysis = ref(false)\nconst showDiagnostics = ref(false)\n\n// Computed properties\nconst hasTimedWords = computed(() => {\n  return (props.timedWords || 0) > 0\n})\n\ndefineEmits<{\n  'toggle-timing-mode': []\n  'apply-musical-timing': []\n  'reset-syllable-timing': []\n  'clear-timing': []\n  'analyze-timing': []\n  'fix-overlaps': []\n}>()\n</script>\n","<template>\n  <div class=\"mb-4\">\n    <h6>Progress</h6>\n    <div class=\"small\">\n      <div class=\"d-flex justify-content-between\">\n        <span>Lines:</span>\n        <span>{{ timingStats.timedLines }}/{{ timingStats.totalLines }}</span>\n      </div>\n      <div class=\"d-flex justify-content-between\">\n        <span>Words:</span>\n        <span>{{ timingStats.timedWords }}/{{ timingStats.totalWords }}</span>\n      </div>\n      <div class=\"d-flex justify-content-between\">\n        <span>Syllables:</span>\n        <span>{{ timingStats.timedSyllables }}/{{ timingStats.totalSyllables }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface TimingStats {\n  totalLines: number\n  timedLines: number\n  totalWords: number\n  timedWords: number\n  totalSyllables: number\n  timedSyllables: number\n  completionPercent: number\n}\n\ninterface Props {\n  timingStats: TimingStats\n}\n\ndefineProps<Props>()\n</script>\n","<template>\n  <div>\n    <h6><i class=\"bi bi-question-circle\"></i> Hotkeys</h6>\n    <div class=\"small\">\n      <div class=\"hotkey-list mb-2\">\n        <div class=\"hotkey-item\">\n          <kbd>Space</kbd><span>Play/Timing</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Enter</kbd><span>Play/Pause</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>0</kbd><kbd>.</kbd><span>Assign timing</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>+</kbd><kbd>-</kbd><span>Skip short</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Ctrl</kbd><kbd>←</kbd><kbd>→</kbd><span>Skip 5s</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Alt</kbd><kbd>T</kbd><span>Toggle mode</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Ctrl</kbd><kbd>F</kbd><span>Fast refresh (smoother)</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Home</kbd><kbd>End</kbd><span>Start/End</span>\n        </div>\n        <div class=\"hotkey-item\">\n          <kbd>Esc</kbd><span>Exit \"Add Timing\" mode</span>\n        </div>\n      </div>\n      <div class=\"timing-steps\">\n        <strong>Workflow:</strong>\n        <ol class=\"small-steps\">\n          <li>Start timing mode</li>\n          <li>Press Space to play, then Space during playback to assign timings</li>\n          <li>Edit word boxes manually</li>\n          <li>Adjust syllable timings</li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.hotkey-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.25rem;\n}\n\n.hotkey-item kbd {\n  font-size: 0.7rem;\n  padding: 0.15rem 0.3rem;\n  min-width: auto;\n}\n\n.hotkey-item span {\n  flex: 1;\n  font-size: 0.75rem;\n}\n\n.timing-steps {\n  background: rgba(0, 0, 0, 0.05);\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  margin-top: 0.5rem;\n  font-size: 1.1rem;\n}\n\n.small-steps {\n  margin: 0.25rem 0 0 1rem;\n  padding-left: 0;\n  line-height: 1.3;\n  font-size: 0.9rem;\n}\n</style>\n","<template>\n  <div class=\"mb-3\">\n    <h6><i class=\"bi bi-display\"></i> Viewport</h6>\n    <div class=\"small\">\n      <div class=\"d-flex justify-content-between\">\n        <span>Width:</span>\n        <span class=\"text-primary font-monospace\">{{ viewportWidth }}px</span>\n      </div>\n      <div class=\"d-flex justify-content-between\">\n        <span>Breakpoint:</span>\n        <span class=\"text-success font-monospace\">{{ currentBreakpoint }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  viewportWidth: number\n  currentBreakpoint: string\n}\n\ndefineProps<Props>()\n</script>\n","<template>\n  <div class=\"timing-view\" tabindex=\"0\" ref=\"timingViewRef\" @click=\"ensureAudioReady\">\n    <!-- Main Layout Container - Full Width -->\n    <div class=\"full-width-layout\" v-if=\"project\">\n      <div class=\"flexible-layout\">\n        <!-- Left Sidebar Column: Help & Timing Controls -->\n        <div class=\"sidebar-column\">\n          <div class=\"card h-100\">\n            <!-- Compact Header -->\n            <div class=\"card-header py-2\">\n              <div class=\"d-flex align-items-center justify-content-between\">\n                <div>\n                  <h6 class=\"mb-0\">{{ project?.name }}</h6>\n                  <small class=\"text-muted\">{{ project?.artist }}</small>\n                </div>\n                <div class=\"btn-group-vertical btn-group-sm\">\n                  <button class=\"btn btn-success btn-sm\" @click=\"saveProject\" title=\"Save project (Ctrl+S)\"\n                    data-bs-toggle=\"tooltip\">\n                    <i class=\"bi bi-save\"></i>\n                  </button>\n                  <button class=\"btn btn-outline-secondary btn-sm\" @click=\"exitProject\" title=\"Exit to previous page\"\n                    data-bs-toggle=\"tooltip\">\n                    <i class=\"bi bi-x-circle\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <!-- Help & Controls Body -->\n            <div class=\"card-body\">\n              <!-- Timing Controls -->\n              <TimingControlsPanel :is-timing-mode=\"isTimingMode\" :timed-words=\"timingStats.timedWords\"\n                :total-words=\"timingStats.totalWords\" :song-analysis=\"songAnalysis\" :timing-analysis=\"timingAnalysis\"\n                @toggle-timing-mode=\"toggleTimingMode\" @clear-timing=\"clearCurrentLineTiming\"\n                @apply-musical-timing=\"applyMusicalTiming\" @reset-syllable-timing=\"resetSyllableTiming\"\n                @analyze-timing=\"analyzeCurrentTiming\" @fix-overlaps=\"fixCurrentOverlaps\" />\n\n              <!-- Progress Stats -->\n              <ProgressStats :timing-stats=\"timingStats\" />\n\n              <!-- Viewport Info -->\n              <ViewportIndicator :viewport-width=\"viewportWidth\" :current-breakpoint=\"currentBreakpoint\" />\n\n              <!-- Help Section -->\n              <HotkeyHelp />\n            </div>\n          </div>\n        </div>\n\n        <!-- Right Main Content Column -->\n        <div class=\"main-content-column\">\n          <!-- Lyrics Editor and Preview Row - Side by Side -->\n          <div class=\"row mb-3\">\n            <!-- Lyrics Editor - Left Half -->\n            <div class=\"col-6\">\n              <LyricsEditor :lyrics=\"project.lyrics\" :currentLine=\"currentLine\" :currentWord=\"currentWordIndex\"\n                :isTimingMode=\"isTimingMode\" @line-select=\"selectLine\" @lyrics-update=\"updateLyrics\" />\n            </div>\n            <!-- Lyrics Preview - Right Half -->\n            <div class=\"col-6\">\n              <LyricsPreview :lyrics=\"project.lyrics\" :currentTime=\"playbackState.currentTime\"\n                :currentLine=\"currentLine\" :currentWord=\"currentWordIndex\"\n                :currentSyllable=\"isTimingMode ? 0 : playbackState.currentSyllable?.syllableIndex\" />\n            </div>\n          </div>\n\n          <!-- Waveform View with Word Timing Editor - Full Width -->\n          <div class=\"row mb-3\">\n            <div class=\"col-12\">\n              <WaveformViewer :audioFile=\"project.audioFile\" :lyrics=\"project.lyrics\"\n                :currentTime=\"playbackState.currentTime\" :waveformData=\"waveformData\" :playbackState=\"playbackState\"\n                :isTimingMode=\"isTimingMode\" @seek=\"seekAudio\" @lyrics-position=\"updateLyricsPosition\"\n                @play-pause=\"togglePlayPause\" @skip-backward=\"skipBackward\" @skip-forward=\"skipForward\"\n                @view-window-change=\"handleViewWindowChange\">\n\n                <!-- Word Timing Editor in slot above waveform -->\n                <template #above-waveform>\n                  <WordTimingEditor :key=\"`timing-editor-${visualRefreshKey}`\" :words=\"timingEditorWords\"\n                    :duration=\"audioDuration\" :view-start=\"viewWindowStart\" :view-end=\"viewWindowEnd\"\n                    :show-debug=\"false\" @update:words=\"handleTimingEditorWordsUpdate\" @select-word=\"handleWordSelect\" />\n                </template>\n              </WaveformViewer>\n            </div>\n          </div>\n\n          <!-- Debug info -->\n          <div class=\"row mb-3\">\n            <div class=\"col-12\">\n              <small class=\" text-muted\">\n                🎯 {{ isTimingMode ? 'Timing' : 'Playback' }} Mode: Line {{ currentLine }}\n                , Word {{ currentWordIndex + 1 }}\n                <span v-if=\"project.lyrics[currentLine]?.words[currentWordIndex]\">\n                  ({{ project.lyrics[currentLine].words[currentWordIndex].word }})\n                </span>\n                <span class=\"ms-3\" :class=\"isFastMode ? 'text-success fw-bold' : 'text-muted'\">\n                  🔄 {{ isFastMode ? '12Hz FAST' : '8Hz Normal' }}\n                </span>\n              </small>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading State -->\n    <div v-else-if=\"loading\" class=\"full-width-layout\">\n      <div class=\"text-center py-5\">\n        <div class=\"spinner-border text-primary\" role=\"status\">\n          <span class=\"visually-hidden\">Loading...</span>\n        </div>\n        <p class=\"mt-3\">Loading project...</p>\n      </div>\n    </div>\n\n    <!-- Project Not Found -->\n    <div v-else class=\"full-width-layout\">\n      <div class=\"d-flex justify-content-center\">\n        <div class=\"card\" style=\"max-width: 500px;\">\n          <div class=\"card-body p-5 text-center\">\n            <h3>Project Not Found</h3>\n            <p class=\"lead\">The requested project could not be found.</p>\n            <router-link to=\"/compose\" class=\"btn btn-primary\">\n              <i class=\"bi bi-arrow-left\"></i> Back to Projects\n            </router-link>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Hotkey Help Modal -->\n    <div class=\"modal\" :class=\"{ show: showHotkeyModal }\" v-if=\"showHotkeyModal\" @click=\"closeHotkeyModal\">\n      <div class=\"modal-dialog modal-lg\" @click.stop>\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">🎹 Hotkey Reference Guide</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeHotkeyModal\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h6 class=\"text-primary\">⏯️ Playback Controls</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Spacebar</kbd> - Play/Pause (or Timing in Timing Mode)</li>\n                  <li class=\"mb-2\"><kbd>Numpad Enter</kbd> - Play/Pause</li>\n                  <li class=\"mb-2\"><kbd>Ctrl+P</kbd> - Play/Pause</li>\n                </ul>\n\n                <h6 class=\"text-success\">⏩ Navigation</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Home</kbd> - Jump to start (0:00)</li>\n                  <li class=\"mb-2\"><kbd>End</kbd> - Jump to end of song</li>\n                  <li class=\"mb-2\"><kbd>Numpad +</kbd> - Skip forward 1 second</li>\n                  <li class=\"mb-2\"><kbd>Numpad -</kbd> - Skip backward 1 second</li>\n                  <li class=\"mb-2\"><kbd>Ctrl+R</kbd> - Skip forward 10 seconds</li>\n                  <li class=\"mb-2\"><kbd>Ctrl+L</kbd> - Skip backward 10 seconds</li>\n                </ul>\n              </div>\n              <div class=\"col-md-6\">\n                <h6 class=\"text-warning\">⏱️ Timing Assignment</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Spacebar</kbd> - Assign timing (in Timing Mode)</li>\n                  <li class=\"mb-2\"><kbd>Numpad 0</kbd> or <kbd>.</kbd> - Assign timing</li>\n                  <li class=\"mb-2\"><kbd>T</kbd> or <kbd>Insert</kbd> - Toggle Timing Mode</li>\n                </ul>\n\n                <h6 class=\"text-info\">📝 Editing</h6>\n                <ul class=\"list-unstyled mb-4\">\n                  <li class=\"mb-2\"><kbd>Ctrl+S</kbd> - Save project</li>\n                  <li class=\"mb-2\"><kbd>Escape</kbd> - Close modal or exit timing mode</li>\n                  <li class=\"mb-2\"><kbd>Double-click</kbd> any lyric line to edit</li>\n                  <li class=\"mb-2\"><kbd>Enter</kbd> or <kbd>Blur</kbd> to save</li>\n                  <li class=\"mb-2\"><kbd>Escape</kbd> to cancel</li>\n                </ul>\n              </div>\n            </div>\n\n            <div class=\"alert alert-info mt-3\">\n              <strong>💡 Pro Tips:</strong>\n              <ul class=\"mb-0 mt-2\">\n                <li>Use <kbd>Home</kbd>/<kbd>End</kbd> for instant navigation to start/end</li>\n                <li>Use the numpad for fastest timing assignment workflow</li>\n                <li>Toggle Timing Mode (<kbd>T</kbd> or <kbd>Insert</kbd>) to focus on timing vs playback</li>\n                <li>Double-click lyrics for quick inline editing</li>\n                <li>Use 1-second skips for precise timing adjustments</li>\n              </ul>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"closeHotkeyModal\">Got it!</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, nextTick } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport type { KaraokeProject, LyricLine, PlaybackState, WaveformData } from '@/types/karaoke'\nimport { audioService } from '@/services/audioService'\nimport { audioStorageService } from '@/services/audioStorageService'\nimport { assignWordTiming, getCurrentPosition, getTimingStats, finalizePendingSyllableTiming, clearTimingFromLine } from '@/utils/lyricsParser'\nimport { applyMusicalTimingToSong, resetSongSyllableTiming, type SongAnalysis } from '@/models/MusicalTimingModel'\nimport { TIMING, TimingUtils } from '@/models/TimingConstants'\nimport { useTimingAnalysis, type TimingAnalysisResult } from '@/composables/useTimingAnalysis'\nimport { RelativeSyllableTiming } from '@/models/RelativeSyllableTiming'\nimport LyricsEditor from '@/components/LyricsEditor.vue'\nimport LyricsPreview from '@/components/LyricsPreview.vue'\nimport WaveformViewer from '@/components/WaveformViewer.vue'\nimport WordTimingEditor from '@/components/WordTimingEditor.vue'\nimport TimingControlsPanel from '@/components/TimingControlsPanel.vue'\nimport ProgressStats from '@/components/ProgressStats.vue'\nimport HotkeyHelp from '@/components/HotkeyHelp.vue'\nimport ViewportIndicator from '@/components/ViewportIndicator.vue'\n\n// Router\nconst route = useRoute()\nconst router = useRouter()\n\n// Reactive state\nconst timingViewRef = ref<HTMLElement>()\nconst project = ref<KaraokeProject | null>(null)\nconst loading = ref(true)\nconst showHotkeyModal = ref(false)\nconst currentLine = ref(0)\nconst currentWordIndex = ref(0)\nconst isTimingMode = ref(false)\n\n// Visual refresh counter to force component re-renders after timing fixes\nconst visualRefreshKey = ref(0)\nconst waveformData = ref<WaveformData | null>(null)\n\n// Musical timing state\nconst songAnalysis = ref<SongAnalysis | null>(null)\n\n// Timing analysis state\nconst { analyzeTimingOverlaps, fixTimingOverlaps } = useTimingAnalysis()\nconst timingAnalysis = ref<TimingAnalysisResult | null>(null)\n\n// View window state (synchronized with WaveformViewer)\nconst viewWindowStart = ref(0) // in seconds\nconst viewWindowEnd = ref(60) // in seconds, default to 60s\nconst viewWindowMode = ref<'full' | 'window'>('window')\n\n// Viewport tracking\nconst viewportWidth = ref(typeof window !== 'undefined' ? window.innerWidth : 1024)\nconst viewportHeight = ref(typeof window !== 'undefined' ? window.innerHeight : 768)\n\n// Global hotkeys cleanup\nlet cleanupGlobalHotkeys: (() => void) | null = null\n\n// Playback state\nconst playbackState = ref<PlaybackState>({\n  isPlaying: false,\n  currentTime: 0,\n  duration: 0,\n  volume: 1,\n  playbackRate: 1,\n  isLoaded: false,\n})\n\n// Fast refresh mode state\nconst isFastMode = ref(false)\n\n// Computed properties\nconst timingStats = computed(() => {\n  if (!project.value) {\n    return {\n      totalLines: 0,\n      timedLines: 0,\n      totalWords: 0,\n      timedWords: 0,\n      totalSyllables: 0,\n      timedSyllables: 0,\n      completionPercent: 0,\n    }\n  }\n  return getTimingStats(project.value.lyrics)\n})\n\nconst currentBreakpoint = computed(() => {\n  const width = viewportWidth.value\n  if (width >= 1400) return 'xxl'\n  if (width >= 1200) return 'xl'\n  if (width >= 992) return 'lg'\n  if (width >= 768) return 'md'\n  if (width >= 576) return 'sm'\n  return 'xs'\n})\n\n// Computed properties for WordTimingEditor\nconst timingEditorWords = computed(() => {\n  if (!project.value?.lyrics) {\n    console.log('🔍 timingEditorWords: No project or lyrics')\n    return []\n  }\n\n  const words: { id: string; text: string; startTime: number; endTime: number; syllables?: any[] }[] = []\n  let lyricsLineIndex = 0 // Track lyrics-only line index\n\n  project.value.lyrics.forEach((line) => {\n\n    // console.log(`🔍 Processing line ${originalLineIndex}:`, {\n    //   text: line.text,\n    //   type: line.type,\n    //   isMetadata: isMetadataLine(line),\n    //   hasWords: !!line.words,\n    //   wordCount: line.words?.length || 0\n    // })\n\n    // Skip metadata lines - only process lyrics lines\n    if (isMetadataLine(line)) {\n      return\n    }\n\n    // Only process lines that have words array\n    if (!line.words || !Array.isArray(line.words)) {\n      return\n    }\n\n    line.words.forEach((word, wordIndex) => {\n      words.push({\n        id: `lyrics-${lyricsLineIndex}-word-${wordIndex}`, // Use lyrics-only line index\n        text: word.word,\n        startTime: (word.startTime || 0) / 1000, // Convert milliseconds to seconds\n        endTime: (word.endTime || word.startTime || 0) / 1000, // Convert milliseconds to seconds\n        syllables: word.syllables?.map((syllable) => ({\n          text: syllable.syllable,\n          startTime: (syllable.startTime || 0) / 1000, // Convert milliseconds to seconds\n          endTime: (syllable.endTime || syllable.startTime || 0) / 1000, // Convert milliseconds to seconds\n        })),\n      })\n    })\n\n    lyricsLineIndex++ // Increment only for actual lyrics lines\n  })\n\n  // Debug logging disabled - this computed runs frequently during drag operations\n  // console.log('🔍 timingEditorWords result:', {\n  //   totalLyricsLines: project.value.lyrics.length,\n  //   wordsGenerated: words.length,\n  //   firstFewWords: words.slice(0, 5).map(w => ({\n  //     id: w.id, text: w.text, startTime: w.startTime, endTime: w.endTime\n  //   }))\n  // })\n\n  return words\n})\n\nconst audioDuration = computed(() => {\n  return playbackState.value.duration || 60 // Default to 60 seconds if not loaded\n})\n\n// Methods\nconst closeHotkeyModal = () => {\n  showHotkeyModal.value = false\n}\n\nconst exitProject = () => {\n  // Use browser back navigation to maintain proper history\n  // If there's no history (user came directly to this URL), fall back to compose page\n  if (window.history.length > 1) {\n    router.back()\n  } else {\n    router.push('/compose')\n  }\n}\n\n// Handler for view window changes from WaveformViewer\nconst handleViewWindowChange = (viewStart: number, viewEnd: number, mode: 'full' | 'window') => {\n  viewWindowStart.value = viewStart\n  viewWindowEnd.value = viewEnd\n  viewWindowMode.value = mode\n  // console.log('🔄 View window synchronized:', {\n  //   viewStart, viewEnd, mode\n  // })\n}\n\n// Helper function to check if a line is a metadata line\nconst isMetadataLine = (line: LyricLine): boolean => {\n  return line.type !== undefined && line.type !== 'lyrics'\n}\n\n// Helper function to find the next lyric line (skip metadata)\nconst findNextLyricLine = (startIndex: number): number => {\n  if (!project.value) return startIndex\n\n  for (let i = startIndex; i < project.value.lyrics.length; i++) {\n    const line = project.value.lyrics[i]\n    if (!isMetadataLine(line) && line.words && line.words.length > 0) {\n      return i\n    }\n  }\n  return startIndex // Return original if no lyric line found\n}\n\n// Helper function to find the previous lyric line (skip metadata)\nconst findPrevLyricLine = (startIndex: number): number => {\n  if (!project.value) return startIndex\n\n  for (let i = startIndex; i >= 0; i--) {\n    const line = project.value.lyrics[i]\n    if (!isMetadataLine(line) && line.words && line.words.length > 0) {\n      return i\n    }\n  }\n  return startIndex // Return original if no lyric line found\n}\n\n// Helper function to finalize syllables when we reach the end of a line or song\nconst finalizeCurrentWordSyllables = () => {\n  if (!project.value) return\n\n  const lineIndex = currentLine.value\n  const wordIndex = currentWordIndex.value\n\n  if (lineIndex >= 0 && lineIndex < project.value.lyrics.length) {\n    const line = project.value.lyrics[lineIndex]\n    if (line && line.words && wordIndex >= 0 && wordIndex < line.words.length) {\n      const word = line.words[wordIndex]\n      // Only finalize if the word has timing assigned and syllables that need timing\n      if (word.startTime !== undefined && word.syllables && word.syllables.length > 0) {\n        // Check if syllables need timing (have undefined or 0 timing)\n        const needsTiming = word.syllables.some(s => s.startTime === undefined || s.endTime === undefined)\n        if (needsTiming) {\n          project.value.lyrics = finalizePendingSyllableTiming(project.value.lyrics, lineIndex, wordIndex)\n          console.log('🔄 Finalized syllables for current word:', word.word)\n        }\n      }\n    }\n  }\n}\n\nconst selectLine = (lineIndex: number) => {\n  if (!project.value || lineIndex >= project.value.lyrics.length) {\n    currentLine.value = lineIndex\n    return\n  }\n\n  const selectedLine = project.value.lyrics[lineIndex]\n\n  // If selecting a metadata line, find the nearest lyric line\n  if (isMetadataLine(selectedLine)) {\n    // Try to find the next lyric line first, then previous\n    let nextLyricIndex = findNextLyricLine(lineIndex + 1)\n    if (nextLyricIndex === lineIndex + 1 && nextLyricIndex >= project.value.lyrics.length) {\n      nextLyricIndex = findPrevLyricLine(lineIndex - 1)\n    }\n    currentLine.value = nextLyricIndex\n    return\n  }\n\n  // Handle regular lyric lines with smart timing behavior\n  if (selectedLine.startTime !== undefined && selectedLine.words && selectedLine.words.length > 0) {\n    // Case A: Line has timing - focus first word and seek to start time minus word duration as lead-in\n    currentLine.value = lineIndex\n    currentWordIndex.value = 0\n\n    // Calculate lead-in time: subtract first word's duration from line start time\n    const firstWord = selectedLine.words[0]\n    const wordDuration = firstWord.endTime && firstWord.startTime\n      ? firstWord.endTime - firstWord.startTime\n      : 500 // Default 500ms if no word timing\n\n    const leadInTime = Math.max(0, selectedLine.startTime - wordDuration)\n\n    console.log(`📍 Smart line selection: Line ${lineIndex + 1} with timing at ${selectedLine.startTime}ms, seeking to lead-in at ${leadInTime}ms`)\n    audioService.seek(leadInTime)\n\n  } else {\n    // Case B: Line has no timing - find previous timed line, seek there, select next line and focus first word\n    let previousTimedLineIndex = lineIndex - 1\n    let previousTimedLine = null\n\n    // Find the closest previous line with timing\n    while (previousTimedLineIndex >= 0) {\n      const line = project.value.lyrics[previousTimedLineIndex]\n      if (!isMetadataLine(line) && line.startTime !== undefined) {\n        previousTimedLine = line\n        break\n      }\n      previousTimedLineIndex--\n    }\n\n    if (previousTimedLine && previousTimedLine.startTime !== undefined) {\n      // Seek to the previous timed line's start time\n      console.log(`📍 Smart line selection: Line ${lineIndex + 1} without timing, seeking to previous timed line at ${previousTimedLine.startTime}ms`)\n      audioService.seek(previousTimedLine.startTime)\n\n      // Select the line that follows the previous timed line (could be the original selection or the line after the timed line)\n      const nextLineIndex = previousTimedLineIndex + 1\n      if (nextLineIndex < project.value.lyrics.length && !isMetadataLine(project.value.lyrics[nextLineIndex])) {\n        currentLine.value = nextLineIndex\n        currentWordIndex.value = 0\n        console.log(`📍 Auto-selected next line ${nextLineIndex + 1} for timing continuation`)\n      } else {\n        // Fallback to original selection\n        currentLine.value = lineIndex\n        currentWordIndex.value = 0\n      }\n    } else {\n      // No previous timed line found, just select normally\n      currentLine.value = lineIndex\n      currentWordIndex.value = 0\n      console.log(`📍 Line ${lineIndex + 1} selected without timing, no previous timed line found`)\n    }\n  }\n}\n\nconst updateLyrics = (lyrics: LyricLine[]) => {\n  if (project.value) {\n    project.value.lyrics = lyrics\n  }\n}\n\nconst togglePlayPause = async () => {\n  try {\n    if (playbackState.value.isPlaying) {\n      audioService.pause()\n      console.log('Audio paused')\n    } else {\n      console.log('Attempting to play audio...')\n      await audioService.play()\n      console.log('Audio play initiated')\n    }\n  } catch (error) {\n    console.error('Failed to toggle play/pause:', error)\n    alert('Failed to play audio. The audio context may need to be restarted. Try clicking the play button again.')\n  }\n}\n\nconst seekAudio = (time: number) => {\n  audioService.seek(time)\n}\n\nconst skipBackward = () => {\n  const newTime = Math.max(0, playbackState.value.currentTime - 10000) // 10 seconds in ms\n  audioService.seek(newTime)\n}\n\nconst skipForward = () => {\n  const duration = project.value?.audioFile?.duration || 0\n  if (duration > 0) {\n    const newTime = Math.min(duration - 100, playbackState.value.currentTime + 10000) // 10 seconds in ms, stay 100ms from end\n    audioService.seek(newTime)\n  }\n}\n\nconst skipBackwardShort = () => {\n  const newTime = Math.max(0, playbackState.value.currentTime - 1000) // 1 second in ms\n  audioService.seek(newTime)\n}\n\nconst skipForwardShort = () => {\n  const duration = project.value?.audioFile?.duration || 0\n  if (duration > 0) {\n    const newTime = Math.min(duration - 100, playbackState.value.currentTime + 1000) // 1 second in ms, stay 100ms from end\n    audioService.seek(newTime)\n  }\n}\n\nconst seekToStart = () => {\n  audioService.seek(0)\n  // Reset to first lyric line when seeking to start\n  currentLine.value = findNextLyricLine(0)\n  currentWordIndex.value = 0\n}\n\nconst seekToEnd = () => {\n  const duration = project.value?.audioFile?.duration || 0\n  if (duration > 0) {\n    // Seek to actual end, minus just 10ms to avoid potential audio edge issues\n    const newTime = Math.max(0, duration - 10)\n    audioService.seek(newTime)\n  }\n}\n\nconst toggleTimingMode = () => {\n  isTimingMode.value = !isTimingMode.value\n}\n\n// Helper function to ensure audio context is ready\nconst ensureAudioReady = async () => {\n  try {\n    // This requires a user interaction to work properly\n    await audioService.play()\n    audioService.pause()\n    console.log('Audio context verified as ready')\n  } catch (error) {\n    console.warn('Audio context may need user interaction:', error)\n  }\n}\n\n// Clear timing for current line and all subsequent lines\nconst clearCurrentLineTiming = () => {\n  if (!project.value) return\n\n  const lineIndex = currentLine.value\n  const lineCount = project.value.lyrics.length - lineIndex\n  const message = lineCount === 1\n    ? 'Clear timing for the current line?'\n    : `Clear timing for the current line and ${lineCount - 1} lines after it?\\n\\nThis prevents timing inconsistencies by clearing all subsequent timing.`\n\n  if (confirm(message)) {\n    project.value.lyrics = clearTimingFromLine(project.value.lyrics, lineIndex)\n    console.log(`🗑️ Cleared timing from line ${lineIndex} onwards (${lineCount} lines affected)`)\n  }\n}\n\n// Smart duration calculation helper\nconst calculateSmartDuration = (currentLineIndex: number, currentWordIndex: number): number => {\n  if (!project.value) return 500\n\n  const lyrics = project.value.lyrics\n  const currentLine = lyrics[currentLineIndex]\n  if (!currentLine) return 500\n\n  let nextTiming: number | undefined\n\n  // Try to find next word timing\n  if (currentWordIndex < currentLine.words.length - 1) {\n    // Next word in same line\n    const nextWord = currentLine.words[currentWordIndex + 1]\n    nextTiming = nextWord.startTime\n  } else {\n    // Find the next lyric line (skip metadata)\n    let nextLineIndex = currentLineIndex + 1\n    while (nextLineIndex < lyrics.length) {\n      const nextLine = lyrics[nextLineIndex]\n      if (!isMetadataLine(nextLine) && nextLine.words.length > 0) {\n        nextTiming = nextLine.words[0].startTime\n        break\n      }\n      nextLineIndex++\n    }\n  }\n\n  if (nextTiming) {\n    const currentTime = playbackState.value.currentTime\n    const timeToNext = nextTiming / 1000 - currentTime // Convert to seconds\n\n    // Use centralized timing rules for auto-timing behavior\n    const isLongBreak = TimingUtils.isPhraseBreak(timeToNext)\n\n    if (isLongBreak) {\n      // Use centralized phrase break spacing rules\n      const duration = timeToNext * TIMING.autoTiming.phraseBreakSpacing * 1000\n      return Math.max(TIMING.word.minDuration, Math.min(TIMING.autoTiming.maxPhraseBreakDuration, duration))\n    } else {\n      // Use centralized normal word spacing rules\n      const duration = timeToNext * TIMING.autoTiming.normalWordSpacing * 1000\n      return Math.max(TIMING.word.minDuration, Math.min(TIMING.autoTiming.maxNormalDuration, duration))\n    }\n  }\n\n  // Fallback durations based on word length\n  const currentWord = currentLine.words[currentWordIndex]\n  if (currentWord) {\n    const wordLength = currentWord.word.length\n    return Math.max(200, wordLength * 80) // ~80ms per character, min 200ms\n  }\n\n  return 500 // Default fallback\n}\n\nconst assignTiming = () => {\n  console.log('🎯 assignTiming called', {\n    hasProject: !!project.value,\n    isTimingMode: isTimingMode.value,\n    isPlaying: playbackState.value.isPlaying,\n    currentLine: currentLine.value,\n    currentWord: currentWordIndex.value,\n    currentTime: playbackState.value.currentTime\n  })\n\n  if (!project.value || !isTimingMode.value) {\n    console.log('❌ assignTiming aborted: missing project or not in timing mode')\n    return\n  }\n\n  if (!playbackState.value.isPlaying) {\n    console.log('❌ assignTiming aborted: audio not playing')\n    return\n  }\n\n  const lineIndex = currentLine.value\n  const wordIndex = currentWordIndex.value\n  const currentTime = playbackState.value.currentTime\n\n  if (lineIndex >= project.value.lyrics.length) {\n    console.log('❌ assignTiming aborted: invalid line index')\n    return\n  }\n\n  const targetLine = project.value.lyrics[lineIndex]\n  if (!targetLine || !targetLine.words || wordIndex >= targetLine.words.length) {\n    console.log('❌ assignTiming aborted: invalid word index')\n    return\n  }\n\n  // Calculate smart duration\n  const smartDuration = calculateSmartDuration(lineIndex, wordIndex)\n\n  // Assign timing to current word using spacebar with smart duration\n  project.value.lyrics = assignWordTiming(project.value.lyrics, lineIndex, wordIndex, currentTime, smartDuration)\n\n  console.log('✅ Smart timing assigned:', {\n    word: project.value.lyrics[lineIndex].words[wordIndex].word,\n    startTime: currentTime,\n    duration: smartDuration,\n    calculation: smartDuration > 400 ? 'phrase-break' : 'normal-spacing',\n  })\n\n  // Move to next word/line\n  moveToNextWord()\n}\n\nconst moveToNextWord = () => {\n  if (!project.value) return\n\n  const currentLyricLine = project.value.lyrics[currentLine.value]\n  if (!currentLyricLine) return\n\n  // Store current position before moving\n  const prevLineIndex = currentLine.value\n  const prevWordIndex = currentWordIndex.value\n\n  if (currentWordIndex.value < currentLyricLine.words.length - 1) {\n    // Move to next word in same line\n    currentWordIndex.value++\n  } else {\n    // Find the next line that has words (skip metadata lines)\n    let nextLineIndex = currentLine.value + 1\n    while (nextLineIndex < project.value.lyrics.length) {\n      const nextLine = project.value.lyrics[nextLineIndex]\n      // Skip metadata lines (they have no words for timing)\n      if (nextLine.words && nextLine.words.length > 0) {\n        currentLine.value = nextLineIndex\n        currentWordIndex.value = 0\n        break\n      }\n      nextLineIndex++\n    }\n  }\n\n  // Now that we know the next word position, finalize syllable timing for the previous word\n  const actuallyMoved = (currentLine.value !== prevLineIndex || currentWordIndex.value !== prevWordIndex)\n  if (actuallyMoved && project.value) {\n    // We moved to a new position, so finalize the previous word's syllables\n    project.value.lyrics = finalizePendingSyllableTiming(project.value.lyrics, prevLineIndex, prevWordIndex)\n  } else if (!actuallyMoved && project.value) {\n    // We didn't move (reached the end), so finalize the current word's syllables\n    const currentWord = project.value.lyrics[prevLineIndex]?.words?.[prevWordIndex]\n    if (currentWord && currentWord.startTime !== undefined && currentWord.syllables && currentWord.syllables.length > 0) {\n      project.value.lyrics = finalizePendingSyllableTiming(project.value.lyrics, prevLineIndex, prevWordIndex)\n      console.log('🏁 Finalized syllables for final word:', currentWord.word)\n    }\n  }\n}\n\nconst updateLyricsPosition = (lineIndex: number, time: number) => {\n  if (!project.value) return\n\n  const lyric = project.value.lyrics[lineIndex]\n  if (lyric) {\n    lyric.startTime = time\n  }\n}\n\nconst saveProject = () => {\n  if (!project.value) return\n\n  project.value.updatedAt = new Date()\n  saveProjectsToStorage()\n\n  // Show save confirmation\n  // TODO: Could add a toast notification here\n  console.log('Project saved:', project.value.name)\n}\n\nconst loadProject = async (projectId: string) => {\n  // Load projects from storage\n  const stored = localStorage.getItem('karaokeProjects')\n  if (!stored) {\n    console.warn('No projects found in storage, redirecting to compose page')\n    alert('⚠️ No projects found. Redirecting to the compose page.')\n    router.push('/compose')\n    return\n  }\n\n  try {\n    const projects = JSON.parse(stored)\n    const foundProject = projects.find((p: any) => p.id === projectId)\n\n    if (!foundProject) {\n      console.warn(`Project ${projectId} not found, redirecting to compose page`)\n      alert('⚠️ Project not found. It may have been deleted. Redirecting to the compose page.')\n      router.push('/compose')\n      return\n    }\n\n    // Restore project structure\n    const restoredProject: KaraokeProject = {\n      ...foundProject,\n      createdAt: new Date(foundProject.createdAt),\n      updatedAt: new Date(foundProject.updatedAt),\n      audioFile: {\n        ...foundProject.audioFile,\n        file: null, // Will be restored from storage if needed\n      },\n    }\n\n    project.value = restoredProject\n\n    // Try to load project audio, redirect if it fails\n    const audioLoadSuccess = await loadProjectAudio(restoredProject)\n    if (!audioLoadSuccess) {\n      console.warn(`Failed to load audio for project ${projectId}, redirecting to compose page`)\n      alert(\n        '⚠️ Could not load the audio file for this project. Please check if the file still exists or try re-importing it. Redirecting to the compose page.'\n      )\n      router.push('/compose')\n      return\n    }\n\n    // Initialize currentLine to the first lyric line (skip metadata lines)\n    currentLine.value = findNextLyricLine(0)\n    currentWordIndex.value = 0\n\n    loading.value = false\n  } catch (error) {\n    console.error('Error loading project:', error)\n    alert(`⚠️ Error loading project: ${error}. Redirecting to the compose page.`)\n    router.push('/compose')\n  }\n}\n\nconst loadProjectAudio = async (proj: KaraokeProject): Promise<boolean> => {\n  if (!proj.audioFile) {\n    console.error('No audio file in project')\n    return false\n  }\n\n  console.log('🔄 Loading project audio:', {\n    projectName: proj.name,\n    audioFileName: proj.audioFile.name,\n    hasFile: !!proj.audioFile.file,\n    hasStoredData: !!proj.audioFile.storedData,\n    storageType: proj.audioFile.storedData?.storageType,\n    duration: proj.audioFile.duration,\n  })\n\n  try {\n    let audioFile = proj.audioFile\n\n    // If we have stored data but no file object, try to retrieve it\n    if (!audioFile.file && audioFile.storedData) {\n      console.log('Retrieving stored audio file...')\n      const retrievedFile = await audioStorageService.retrieveAudioFile(audioFile.storedData)\n\n      if (retrievedFile) {\n        audioFile = {\n          ...audioFile,\n          ...retrievedFile,\n        }\n        proj.audioFile = audioFile\n        console.log('✅ Audio file retrieved successfully')\n      } else {\n        console.error('Failed to retrieve audio file')\n        return false\n      }\n    }\n\n    let success = false\n    let retries = 3\n\n    // Retry logic for audio loading\n    while (!success && retries > 0) {\n      try {\n        console.log(`Attempting to load audio (${4 - retries}/3)...`)\n        success = await audioService.loadAudioFile(audioFile)\n\n        if (success) {\n          const state = audioService.getPlaybackState()\n          playbackState.value = { ...state }\n\n          // Store the detected duration in the project for future use\n          if (!proj.audioFile.duration || proj.audioFile.duration !== state.duration) {\n            console.log('💾 Storing detected audio duration:', state.duration / 1000, 'seconds')\n            proj.audioFile.duration = state.duration\n            proj.updatedAt = new Date()\n            saveProjectsToStorage()\n          }\n\n          // Generate waveform data if needed\n          if (!waveformData.value) {\n            const peaks = await audioService.generateWaveformData(1000)\n            if (peaks) {\n              waveformData.value = {\n                peaks,\n                sampleRate: 44100,\n                duration: state.duration,\n                channels: 1,\n              }\n            }\n          }\n          console.log('✅ Audio loaded successfully')\n          break\n        } else {\n          retries--\n          if (retries > 0) {\n            console.warn(`Audio loading failed, retrying... (${retries} attempts left)`)\n            await new Promise(resolve => setTimeout(resolve, 1000)) // Wait 1 second\n          }\n        }\n      } catch (loadError) {\n        console.error('Audio loading attempt failed:', loadError)\n        retries--\n        if (retries > 0) {\n          await new Promise(resolve => setTimeout(resolve, 1000))\n        }\n      }\n    }\n\n    if (!success) {\n      console.error('Failed to load audio after multiple attempts')\n      return false\n    }\n\n    return true\n  } catch (error) {\n    console.error('Error loading project audio:', error)\n    return false\n  }\n}\n\nconst saveProjectsToStorage = () => {\n  if (!project.value) return\n\n  try {\n    const stored = localStorage.getItem('karaokeProjects')\n    const projects = stored ? JSON.parse(stored) : []\n\n    // Find and update the project\n    const projectIndex = projects.findIndex((p: any) => p.id === project.value!.id)\n    if (projectIndex !== -1) {\n      // Create serializable version\n      const serializableProject = {\n        ...project.value,\n        audioFile: {\n          ...project.value.audioFile,\n          file: null, // Remove File object\n          url: undefined, // Remove blob URL\n        },\n      }\n\n      projects[projectIndex] = serializableProject\n      localStorage.setItem('karaokeProjects', JSON.stringify(projects))\n      console.log('💾 Project saved to storage')\n    }\n  } catch (error) {\n    console.error('Error saving project:', error)\n  }\n}\n\n// Setup audio service listeners\nconst setupAudioListeners = () => {\n  let lastTime = 0\n\n  audioService.onTimeUpdate(time => {\n    playbackState.value.currentTime = time\n\n    // Detect reset to beginning (time jumped from high to low)\n    if (lastTime > 5000 && time < 1000) {\n      // Audio was reset to beginning, reset lyrics position too\n      currentLine.value = findNextLyricLine(0)\n      currentWordIndex.value = 0\n      console.log('🔄 Audio reset detected, resetting to first lyric line')\n    }\n    lastTime = time\n\n    // Update current position based on timing - but NOT when in timing mode\n    // In timing mode, we want manual word-by-word control, not automatic syllable tracking\n    if (project.value && playbackState.value.isPlaying && !isTimingMode.value) {\n      const position = getCurrentPosition(project.value.lyrics, time)\n\n      // Only update if the position returned is actually a lyric line (not metadata)\n      const targetLine = project.value.lyrics[position.lineIndex]\n      if (targetLine && !isMetadataLine(targetLine)) {\n        currentLine.value = position.lineIndex\n        currentWordIndex.value = position.wordIndex\n      }\n\n      playbackState.value.currentWord = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n      }\n\n      playbackState.value.currentSyllable = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n        syllableIndex: position.syllableIndex,\n      }\n    } else if (project.value && playbackState.value.isPlaying && isTimingMode.value) {\n      // In timing mode, only update the playback state for preview purposes\n      // but don't interfere with manual currentLine/currentWord navigation\n      const position = getCurrentPosition(project.value.lyrics, time)\n\n      playbackState.value.currentWord = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n      }\n\n      playbackState.value.currentSyllable = {\n        lineIndex: position.lineIndex,\n        wordIndex: position.wordIndex,\n        syllableIndex: position.syllableIndex,\n      }\n    }\n  })\n\n  audioService.onPlaybackStateChange(state => {\n    playbackState.value = { ...state }\n  })\n}\n\n// Global hotkey system\nconst setupGlobalHotkeys = () => {\n  const handleKeyDown = (event: KeyboardEvent) => {\n    // Ignore if user is typing in an input field\n    if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n      return\n    }\n\n    switch (event.code) {\n      case 'Space':\n        event.preventDefault()\n        if (isTimingMode.value) {\n          if (playbackState.value.isPlaying) {\n            // Only assign timing when audio is actually playing\n            assignTiming()\n          } else {\n            // Start playback if not playing\n            togglePlayPause()\n          }\n        } else {\n          togglePlayPause()\n        }\n        break\n\n      case 'NumpadEnter':\n      case 'Enter':\n        if (!event.ctrlKey && !event.metaKey) {\n          event.preventDefault()\n          togglePlayPause()\n        }\n        break\n\n      case 'Numpad0':\n      case 'NumpadDecimal':\n        event.preventDefault()\n        if (isTimingMode.value) {\n          assignTiming()\n        }\n        break\n\n      case 'NumpadAdd':\n        event.preventDefault()\n        skipForwardShort()\n        break\n\n      case 'NumpadSubtract':\n        event.preventDefault()\n        skipBackwardShort()\n        break\n\n      case 'KeyT':\n        event.preventDefault()\n        toggleTimingMode()\n        break\n\n      case 'Insert':\n        event.preventDefault()\n        toggleTimingMode()\n        break\n\n      case 'KeyP':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          togglePlayPause()\n        }\n        break\n\n      case 'KeyS':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          saveProject()\n        }\n        break\n\n      // Removed Ctrl+Q due to Firefox browser conflict - use Escape instead\n\n      case 'KeyL':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipBackward()\n        }\n        break\n\n      case 'KeyR':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipForward()\n        }\n        break\n\n      case 'Home':\n        event.preventDefault()\n        seekToStart()\n        break\n\n      case 'End':\n        event.preventDefault()\n        seekToEnd()\n        break\n\n      case 'ArrowLeft':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipBackward()\n        }\n        break\n\n      case 'ArrowRight':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          skipForward()\n        }\n        break\n\n      case 'KeyF':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault()\n          // Toggle fast refresh mode for smoother syllable boundary movement\n          audioService.toggleFastMode()\n          isFastMode.value = audioService.getFastMode()\n          console.log('🔄 Toggled fast refresh mode')\n        }\n        break\n\n      case 'Escape':\n        event.preventDefault()\n        if (showHotkeyModal.value) {\n          closeHotkeyModal()\n        } else if (isTimingMode.value) {\n          // Finalize any pending syllables before exiting timing mode\n          finalizeCurrentWordSyllables()\n          // Exit timing mode\n          isTimingMode.value = false\n        }\n        // Removed page exit on Escape - too easy to lose work accidentally\n        break\n    }\n  }\n\n  window.addEventListener('keydown', handleKeyDown)\n\n  return () => {\n    window.removeEventListener('keydown', handleKeyDown)\n  }\n}\n\n// Musical Timing Methods\nconst applyMusicalTiming = () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Musical timing: No project or lyrics available')\n    return\n  }\n\n  console.log('🎵 Applying musical timing to song...')\n\n  try {\n    // Apply musical timing to the entire song (modifies lyrics in-place)\n    const analysis = applyMusicalTimingToSong(project.value.lyrics)\n\n    // Update songAnalysis with the returned analysis\n    songAnalysis.value = analysis\n\n    console.log('✅ Musical timing applied successfully', analysis)\n\n  } catch (error) {\n    console.error('❌ Error applying musical timing:', error)\n  }\n}\n\nconst resetSyllableTiming = () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Reset timing: No project or lyrics available')\n    return\n  }\n\n  console.log('🔄 Resetting all syllable timing...')\n\n  try {\n    // Reset all syllable timing in the song\n    resetSongSyllableTiming(project.value.lyrics)\n\n    // Clear song analysis\n    songAnalysis.value = null\n\n    console.log('✅ Syllable timing reset successfully')\n\n  } catch (error) {\n    console.error('❌ Error resetting syllable timing:', error)\n  }\n}\n\n// Timing Analysis Methods\nconst analyzeCurrentTiming = () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Timing analysis: No project or lyrics available')\n    return\n  }\n\n  console.log('🔍 Analyzing timing overlaps...')\n\n  try {\n    const result = analyzeTimingOverlaps(project.value.lyrics)\n    timingAnalysis.value = result\n\n    console.log('✅ Timing analysis completed:', result.summary)\n\n    if (result.overlaps.length > 0) {\n      console.warn(`Found ${result.overlaps.length} timing overlaps:`)\n      result.overlaps.forEach((overlap, index) => {\n        console.warn(`  ${index + 1}. \"${overlap.word1.word}\" → \"${overlap.word2.word}\" (${overlap.overlapDuration}ms overlap)`)\n      })\n    }\n\n  } catch (error) {\n    console.error('❌ Error analyzing timing:', error)\n  }\n}\n\nconst fixCurrentOverlaps = async () => {\n  if (!project.value?.lyrics) {\n    console.log('❌ Fix overlaps: No project or lyrics available')\n    return\n  }\n\n  console.log('🔧 Fixing timing overlaps...')\n\n  try {\n    const result = fixTimingOverlaps(project.value.lyrics)\n\n    if (result.fixCount > 0) {\n      console.log(`✅ Fixed ${result.fixCount} timing overlaps:`)\n      result.details.forEach(detail => console.log(`  • ${detail}`))\n\n      // Save the project after fixing\n      await saveProject()\n\n      // Force visual refresh by incrementing the component key\n      visualRefreshKey.value++\n\n      // Wait for the component to re-render\n      await nextTick()\n\n      // Re-analyze to update the UI\n      analyzeCurrentTiming()\n\n      console.log('🔄 Visual refresh triggered after timing fix')\n    } else {\n      console.log('✅ No overlaps to fix!')\n    }\n\n  } catch (error) {\n    console.error('❌ Error fixing timing overlaps:', error)\n  }\n}\n\n// WordTimingEditor event handlers\nconst handleTimingEditorWordsUpdate = (updatedWords: any[]) => {\n  // console.log('🔄 WordTimingEditor words updated:', updatedWords.length)\n\n  if (!project.value?.lyrics) {\n    console.error('❌ No project lyrics to update')\n    return\n  }\n\n  // Map the updated words back to the lyrics data\n  // We need to handle the metadata offset here\n  const lyricsOnlyLines = project.value.lyrics.filter(line => !isMetadataLine(line))\n\n  updatedWords.forEach((updatedWord) => {\n    // Parse the word ID to get line and word indices\n    const match = updatedWord.id.match(/lyrics-(\\d+)-word-(\\d+)/)\n    if (match) {\n      const lyricsLineIndex = parseInt(match[1])\n      const wordIndex = parseInt(match[2])\n\n      if (lyricsLineIndex < lyricsOnlyLines.length) {\n        const lyricsLine = lyricsOnlyLines[lyricsLineIndex]\n        if (wordIndex < lyricsLine.words.length) {\n          const originalWord = lyricsLine.words[wordIndex]\n\n          // Store old values for smart syllable handling\n          const oldStartTime = originalWord.startTime || 0\n          const oldEndTime = originalWord.endTime || 0\n          const newStartTime = Math.round(updatedWord.startTime * 1000)\n          const newEndTime = Math.round(updatedWord.endTime * 1000)\n\n          // console.log(`🔧 Word update: \"${originalWord.word}\" from ${oldStartTime}ms-${oldEndTime}ms to ${newStartTime}ms-${newEndTime}ms`)\n\n          // Check if syllables have actually changed (s-break drag)\n          let syllablesChanged = false\n          if (updatedWord.syllables && originalWord.syllables &&\n            updatedWord.syllables.length === originalWord.syllables.length) {\n            // Compare syllable boundaries to detect s-break changes\n            syllablesChanged = updatedWord.syllables.some((syl: any, idx: number) => {\n              const origSyl = originalWord.syllables[idx]\n              const newSylStart = Math.round(syl.startTime * 1000)\n              const newSylEnd = Math.round(syl.endTime * 1000)\n              return Math.abs(newSylStart - (origSyl.startTime || 0)) > 1 ||\n                Math.abs(newSylEnd - (origSyl.endTime || 0)) > 1\n            })\n          }\n\n          // If syllables changed (s-break drag), use them directly\n          if (syllablesChanged && updatedWord.syllables) {\n            // Direct syllable update (s-break drag) - convert seconds to milliseconds\n            originalWord.syllables = updatedWord.syllables.map((syl: any) => ({\n              syllable: syl.text,\n              startTime: Math.round(syl.startTime * 1000),\n              endTime: Math.round(syl.endTime * 1000)\n            }))\n            originalWord.startTime = newStartTime\n            originalWord.endTime = newEndTime\n            originalWord.duration = newEndTime - newStartTime\n            // console.log(`  → Direct syllable update from s-break drag`)\n          } else if (originalWord.syllables && originalWord.syllables.length > 0) {\n            // Use RelativeSyllableTiming model for word-level timing changes (move/resize)\n            try {\n              // console.log(`🔍 Debug syllable data for \"${originalWord.word}\":`, originalWord.syllables)\n\n              // Create absolute syllables for conversion\n              const absoluteSyllables = originalWord.syllables.map(syl => ({\n                text: syl.syllable || '',\n                startTime: syl.startTime || 0,\n                endTime: syl.endTime || 0\n              }))\n\n              // Debug the absolute syllables data before conversion\n              // console.log(`🔍 Converting \"${originalWord.word}\" syllables:`, absoluteSyllables.map(s => `\"${s.text}\": ${s.startTime}-${s.endTime} (${s.endTime - s.startTime}ms)`))\n\n              // Create RelativeSyllableTiming instance from current word data\n              const timing = RelativeSyllableTiming.fromAbsoluteSyllables(\n                `word-${lyricsLineIndex}-${wordIndex}`,\n                originalWord.word,\n                oldStartTime,\n                oldEndTime,\n                absoluteSyllables\n              )\n\n              let updatedTiming: RelativeSyllableTiming\n\n              // Determine the type of change and apply appropriate operation\n              const startTimeChanged = Math.abs(newStartTime - oldStartTime) > 10\n              const endTimeChanged = Math.abs(newEndTime - oldEndTime) > 10\n\n              if (startTimeChanged && !endTimeChanged) {\n                // Moving word: use moveWord method to shift all syllables\n                updatedTiming = timing.moveWord(newStartTime)\n\n                // Apply the timing changes\n                const updatedWordData = updatedTiming.getWordData()\n                const updatedAbsoluteSyllables = updatedTiming.getAbsoluteSyllables()\n                originalWord.startTime = updatedWordData.startTime\n                originalWord.endTime = updatedWordData.endTime\n                originalWord.duration = originalWord.endTime - originalWord.startTime\n                originalWord.syllables = updatedAbsoluteSyllables.map(syl => ({\n                  syllable: syl.text,\n                  startTime: syl.startTime,\n                  endTime: syl.endTime,\n                  duration: syl.endTime - syl.startTime\n                }))\n                // console.log(`  → MOVE: \"${originalWord.word}\" moved to ${newStartTime}ms`)\n\n              } else if (endTimeChanged && !startTimeChanged) {\n                // Resizing word end: DON'T redistribute syllables, just update word boundary\n                // Keep syllables at their absolute positions (like test rig)\n                originalWord.endTime = newEndTime\n                originalWord.duration = newEndTime - (originalWord.startTime || 0)\n                // console.log(`  → RESIZE: \"${originalWord.word}\" end changed, syllables unchanged`)\n\n              } else if (startTimeChanged && endTimeChanged) {\n                // Both changed: move word (shifts syllables), then update end time\n                updatedTiming = timing.moveWord(newStartTime)\n\n                // Apply move, then adjust end time without redistributing syllables\n                const updatedAbsoluteSyllables = updatedTiming.getAbsoluteSyllables()\n                originalWord.startTime = newStartTime\n                originalWord.endTime = newEndTime\n                originalWord.duration = newEndTime - newStartTime\n                originalWord.syllables = updatedAbsoluteSyllables.map(syl => ({\n                  syllable: syl.text,\n                  startTime: syl.startTime,\n                  endTime: syl.endTime,\n                  duration: syl.endTime - syl.startTime\n                }))\n                // console.log(`  → MOVE & RESIZE: \"${originalWord.word}\" moved, syllables shifted, end changed`)\n\n              } else {\n                // No significant change - no updates needed\n              }\n\n              // console.log(`✅ Updated \"${originalWord.word}\" using RelativeSyllableTiming model`)\n\n            } catch (error) {\n              console.error(`❌ Error using RelativeSyllableTiming for \"${originalWord.word}\":`, error)\n\n              // Fallback: simple update without syllable model\n              originalWord.startTime = newStartTime\n              originalWord.endTime = newEndTime\n              originalWord.duration = originalWord.endTime - originalWord.startTime\n              // console.log(`  → Fallback: Basic timing update only`)\n            }\n          } else {\n            // No syllables: simple timing update\n            originalWord.startTime = newStartTime\n            originalWord.endTime = newEndTime\n            originalWord.duration = originalWord.endTime - originalWord.startTime\n            // console.log(`  → Simple timing update (no syllables)`)\n          }\n        }\n      }\n    }\n  })\n\n  // No auto-save: User controls when to save with Ctrl+S\n  // (Removed auto-save to prevent unwanted saves during experimentation)\n}\n\nconst handleWordSelect = (wordId: string | null) => {\n  console.log('🎯 Word selected:', wordId)\n  // Could be used for highlighting or focus management in the future\n}\n\n// Lifecycle\nonMounted(async () => {\n  const projectId = route.params.projectId as string\n  if (projectId) {\n    await loadProject(projectId)\n  } else {\n    loading.value = false\n  }\n\n  setupAudioListeners()\n\n  // Setup global hotkeys\n  const cleanupHotkeys = setupGlobalHotkeys()\n  cleanupGlobalHotkeys = cleanupHotkeys\n\n  // Focus the component so hotkeys work\n  setTimeout(() => {\n    if (timingViewRef.value) {\n      timingViewRef.value.focus()\n      console.log('TimingView focused for hotkey support')\n    }\n  }, 100)\n\n  // Setup viewport tracking\n  const updateViewportSize = () => {\n    viewportWidth.value = window.innerWidth\n    viewportHeight.value = window.innerHeight\n  }\n\n  window.addEventListener('resize', updateViewportSize)\n\n  // Store the cleanup function\n  const originalCleanup = cleanupGlobalHotkeys\n  cleanupGlobalHotkeys = () => {\n    if (originalCleanup) originalCleanup()\n    window.removeEventListener('resize', updateViewportSize)\n  }\n})\n\nonUnmounted(() => {\n  // Don't dispose the audio service - it should persist across routes\n  // Just pause any playing audio\n  audioService.pause()\n\n  // Cleanup global hotkeys\n  if (cleanupGlobalHotkeys) {\n    cleanupGlobalHotkeys()\n  }\n})\n</script>\n\n<style scoped>\n.timing-view {\n  outline: none !important;\n}\n\n.timing-view:focus,\n.timing-view:focus-visible {\n  outline: none !important;\n  box-shadow: none !important;\n}\n\n.modal.show {\n  display: block;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.timing-header {\n  border-radius: 0.5rem;\n  border: 1px solid #dee2e6;\n}\n\n.timing-editor {\n  min-height: 80vh;\n}\n\n.loading-screen,\n.error-screen {\n  min-height: 60vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.breadcrumb-item a {\n  color: #6c757d;\n}\n\n.breadcrumb-item a:hover {\n  color: #0d6efd;\n}\n\n.stat-item {\n  padding: 0.5rem;\n}\n\n.stat-number {\n  font-size: 1.25rem;\n  font-weight: bold;\n  color: #0d6efd;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n}\n\n/* Full-width layout without container constraints */\n.full-width-layout {\n  width: 100vw;\n  margin-left: calc(-50vw + 50%);\n  padding: 1rem 2rem;\n  min-height: 100vh;\n}\n\n/* Flexible layout that adapts to viewport */\n.flexible-layout {\n  display: flex;\n  gap: 1.5rem;\n  min-height: 80vh;\n  max-width: none;\n  /* Remove any max-width constraints */\n}\n\n.sidebar-column {\n  flex: 0 0 320px;\n  /* Fixed width sidebar that doesn't shrink */\n  min-width: 280px;\n  max-width: 400px;\n}\n\n.main-content-column {\n  flex: 1;\n  /* Takes all remaining space */\n  min-width: 0;\n  /* Allows content to shrink */\n}\n\n/* Responsive adjustments */\n@media (max-width: 1200px) {\n  .sidebar-column {\n    flex: 0 0 280px;\n    max-width: 320px;\n  }\n}\n\n@media (max-width: 768px) {\n  .flexible-layout {\n    flex-direction: column;\n  }\n\n  .sidebar-column {\n    flex: none;\n    width: 100%;\n    max-width: none;\n  }\n}\n\n/* Compact sidebar layout */\n.card-header h6 {\n  font-size: 0.9rem;\n  font-weight: 600;\n}\n\n.card-header small {\n  font-size: 0.75rem;\n}\n\n.btn-group-vertical .btn {\n  border-radius: 0.25rem !important;\n  margin-bottom: 0.25rem;\n}\n\n.btn-group-vertical .btn:last-child {\n  margin-bottom: 0;\n}\n\n/* Hotkey help formatting */\n</style>\n"],"names":["AudioService","__publicField","error","audioFile","url","contextError","resolve","reject","handleCanPlay","handleError","duration","timeMs","volume","rate","callback","enabled","hz","interval","TimingUtils","currentTimeMs","dataArray","samples","arrayBuffer","channelData","blockSize","peaks","i","start","end","max","j","audioBuffer","durationMs","audioService","detectRestPattern","currentWord","nextWordText","timeToNextWord","wordEndsWithComma","wordEndsWithPeriod","nextWordIsCapitalized","TIMING","estimateNotePattern","syllableCount","availableTime","context","estimatedBeatDuration","noteDurations","closestNote","distributeSyllablesMusically","word","wordStartTime","silent","preserveWordBoundaries","restPattern","existingWordDuration","notePattern","currentTime","syllable","index","note","analyzeSongTiming","lyrics","totalWords","totalDuration","detectedRests","line","nextWord","gap","avgWordDuration","estimatedBPM","clampedBPM","timingQuality","applyMusicalTimingToSong","options","preserveWordTiming","onlyProcessUntimedSyllables","analysis","s","wordDuration","conservativeTime","resetSongSyllableTiming","resetCount","useTimingAnalysis","analyzeTimingOverlaps","overlaps","smallGaps","sequenceViolations","timedWords","allWords","lineIndex","wordIndex","lineWords","w","word1","word2","a","b","overlapStart","overlapEnd","overlapDuration","hasIssues","totalIssues","summary","fixTimingOverlaps","details","fixCount","minGap","wordRef1","wordRef2","currentGap","originalEnd","newEnd","actionType","syllableDuration","props","__props","emit","__emit","editingLine","ref","lyricsContainer","editInput","completedTimings","computed","lyric","isMetadataLyricLine","selectLine","addLine","newLine","parseLyricsLine","updatedLyrics","updateLineNumbers","nextTick","startEditing","deleteLine","input","_a","finishEditing","parsedLine","cancelEditing","clearTiming","lineCount","message","clearTimingFromLine","formatTime","seconds","minutes","remainingSeconds","handleKeydown","event","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_cache","_hoisted_4","_normalizeClass","_hoisted_5","_Fragment","_renderList","$event","_hoisted_7","_toDisplayString","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_vModelText","_hoisted_16","_createTextVNode","_hoisted_17","sylIndex","_hoisted_18","_hoisted_19","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","isKaraokeMode","fontSize","lyricsDisplay","currentLyric","isCurrentLinePlaying","startTime","endTime","timedLines","completionPercentage","extractedMetadata","lyricsText","metadata","parseLyricsWithMetadata","songTitle","songAuthor","currentCaption","captionLines","activeCaption","captionLine","slot1Content","slot2Content","slot3Content","futureLyricLines","toggleKaraokeMode","setFontSize","size","isLinePlaying","getLineProgress","progress","getCleanText","isWordPast","isWordFuture","isSyllablePast","isSyllableFuture","watch","display","currentElement","_hoisted_6","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_20","_hoisted_21","_normalizeStyle","_hoisted_30","_hoisted_31","waveformContainer","waveformCanvas","isLoading","generatedWaveformData","zoomLevel","canvasWidth","canvasHeight","selectionStart","selectionEnd","isDragging","dragMarkerIndex","selectedMarkers","viewMode","windowDuration","windowStart","autoScroll","positionedLyrics","timeToPixel","timedLyricsCount","progressPercent","selectedDuration","pixelToTime","selectionStyle","left","width","timeMarks","marks","windowStartMs","windowDurationMs","windowEndMs","intervalMs","firstMarkMs","positionInWindow","time","pixel","seekToPosition","rect","x","selectLyricMarker","markerIndex","startDragMarker","handleMouseMove","handleMouseUp","startSelection","updateSelection","endSelection","zoomIn","drawWaveform","zoomOut","setViewMode","mode","updateWindowPosition","emitViewWindowChange","onWindowDurationChange","toggleAutoScroll","viewStart","viewEnd","halfWindow","seekToClick","seekTime","canvas","waveformData","ctx","height","visiblePeaks","startIndex","startRatio","durationRatio","endIndex","fallbackEndIndex","barWidth","stepSize","amplitude","scalingFactor","barHeight","y","actualBarWidth","_b","timeX","endThreshold","remainingTime","remainingWindow","generateWaveformData","audioContext","globalMax","updateCanvasSize","newTime","oldTime","isManualSeek","onMounted","_c","_renderSlot","_ctx","mark","_hoisted_32","_hoisted_33","_hoisted_34","_d","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","showAnalysis","showDiagnostics","hasTimedWords","$emit","violation","overlap","route","useRoute","router","useRouter","timingViewRef","project","loading","showHotkeyModal","currentLine","currentWordIndex","isTimingMode","visualRefreshKey","songAnalysis","timingAnalysis","viewWindowStart","viewWindowEnd","viewWindowMode","viewportWidth","viewportHeight","cleanupGlobalHotkeys","playbackState","isFastMode","timingStats","getTimingStats","currentBreakpoint","timingEditorWords","words","lyricsLineIndex","isMetadataLine","audioDuration","closeHotkeyModal","exitProject","handleViewWindowChange","findNextLyricLine","findPrevLyricLine","finalizeCurrentWordSyllables","finalizePendingSyllableTiming","selectedLine","nextLyricIndex","firstWord","leadInTime","previousTimedLineIndex","previousTimedLine","nextLineIndex","updateLyrics","togglePlayPause","seekAudio","skipBackward","skipForward","skipBackwardShort","skipForwardShort","seekToStart","seekToEnd","toggleTimingMode","ensureAudioReady","clearCurrentLineTiming","calculateSmartDuration","currentLineIndex","nextTiming","nextLine","timeToNext","wordLength","assignTiming","targetLine","smartDuration","assignWordTiming","moveToNextWord","currentLyricLine","prevLineIndex","prevWordIndex","actuallyMoved","updateLyricsPosition","saveProject","saveProjectsToStorage","loadProject","projectId","stored","foundProject","p","restoredProject","loadProjectAudio","proj","retrievedFile","audioStorageService","success","retries","state","loadError","projects","projectIndex","serializableProject","setupAudioListeners","lastTime","position","getCurrentPosition","setupGlobalHotkeys","handleKeyDown","applyMusicalTiming","resetSyllableTiming","analyzeCurrentTiming","result","fixCurrentOverlaps","detail","handleTimingEditorWordsUpdate","updatedWords","lyricsOnlyLines","updatedWord","match","lyricsLine","originalWord","oldStartTime","oldEndTime","newStartTime","newEndTime","syllablesChanged","syl","idx","origSyl","newSylStart","newSylEnd","absoluteSyllables","timing","RelativeSyllableTiming","updatedTiming","startTimeChanged","endTimeChanged","updatedWordData","updatedAbsoluteSyllables","handleWordSelect","wordId","updateViewportSize","originalCleanup","onUnmounted","_createVNode","TimingControlsPanel","ProgressStats","ViewportIndicator","HotkeyHelp","LyricsEditor","LyricsPreview","WaveformViewer","_createBlock","WordTimingEditor","_component_router_link"],"mappings":"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"}