{"version":3,"file":"TestTimingView-legacy-6d2d077a.js","sources":["../../src/utils/novemberLyrics.ts","../../src/views/TestTimingView.vue"],"sourcesContent":["// Utility to parse November lyrics and create timed word data for testing\n\nimport { parseLyricsWithMetadata } from './lyricsParser'\n\nimport { TIMING, TimingUtils } from '../models/TimingConstants'\n\ninterface Syllable {\n  text: string\n  startTime: number\n  endTime: number\n}\n\ninterface TimedWord {\n  id: string\n  text: string\n  startTime: number\n  endTime: number\n  syllables: Syllable[]\n}\n\n\n\nconst NOVEMBER_LYRICS = `[@TITLE:Meet Me In November]\n[@AUTHOR:Ancient Wizard]\n\n[@CAPTION:You GO Marry Poppins!]\nSu/per/cal/i/frag/i/lis/tic/ex/pi/al/i/do/cious!\n\n[@CAPTION:Verse 1]\nMeet me in No/vem/ber, like a song of sto/ries told.\nSo per/fect it can't be real, yet hope will make it so.\nSpeak my name with love, and I will know your soul.\nWhere love can find a voice, two hearts will live as one.\n\n[@CAPTION:Verse 2]\nWe meet in No/vem/ber, like a song of sto/ries told.\nSo per/fect it be/came real, where hope has made it so.\nYou spoke my name with love; you'd al/ways felt it so.\nI al/rea/dy fall/ing, my heart knew it was home.\n\n[@CAPTION:Pre Chorus]\nCome meet me this No/vem/ber, to live our life fore/told.\nOur Mo/ments yet to hap/pen, al/rea/dy feel like old.\n\n[@CAPTION:Chorus]\nI Choose You! Wal/king hand in hand.\nI Choose You! Danc/ing through the night.\nI Choose You.\n\n[@CAPTION:Verse 3]\nOur time a con/ver/sa/tion, our words a love song.\nWe sang in/to each ot/her, where love we grew made strong.\nIn that per/fect mel/o/dy, our souls had found their home.\n\n[@CAPTION:Verse 4]\nYou're my Tex/as in No/vem/ber; our life made a new.\nSo per/fect it be/came truth, where hope has made it so.\nI al/rea/dy fall/ing, my heart has come home.\n\n[@CAPTION:Chorus]\nI Choose You! Now and in Nov/em/ber.\nI Choose You! Now and in for/e/ver.\nI Choose You!\n\n[@CAPTION:Bridge]\nWe star/ted in, A Tex/as No/vem/ber,\nand in that mo/ment, you found your heart a home.\n\n[@CAPTION:Pre Chorus (reprise)]\nCome meet me in No/vem/ber, to live our life fore/told.\nOur mo/ments yet to hap/pen, al/rea/dy feel like old.\n\n[@CAPTION:Final Chorus]\nYou Choose Me! In all No/vem/ber.\nYou Choose Me! Make it for/e/ver.\n\n[@CAPTION:(whisper)]\nI do.\n`\n\nexport function parseNovemberLyrics(): TimedWord[] {\n  const words: TimedWord[] = []\n  let currentTime = 0\n  let wordId = 0\n  const beatInterval = 0.8 // Longer intervals for more obvious gaps\n  const wordDuration = 0.4 // Words are shorter than the beat interval\n\n  console.log(`🎵 Generating lyrics with: wordDuration=${wordDuration}s, beatInterval=${beatInterval}s`)\n  console.log(`⚙️ Using centralized timing: minGap=${TIMING.word.collisionMargin}ms, minSyllable=${TIMING.syllable.minDuration}ms`)\n\n  // Parse the lyrics with metadata handling (like the main app)\n  const { lyrics, metadata } = parseLyricsWithMetadata(NOVEMBER_LYRICS)\n\n  console.log('📋 Parsed metadata:', {\n    title: metadata.title,\n    author: metadata.author,\n    captions: metadata.captions?.length || 0\n  })\n\n  // Process only the lyrics lines (skip metadata)\n  const lyricsLines = lyrics.filter(line => line.type === 'lyrics' || !line.type)\n  console.log(`🎵 Processing ${lyricsLines.length} lyrics lines (skipping ${lyrics.length - lyricsLines.length} metadata lines)`)\n\n  for (const lyricLine of lyricsLines) {\n    const lineText = lyricLine.text\n\n    // Skip empty lines\n    if (!lineText.trim()) {\n      continue\n    }\n\n    // Handle special stage directions\n    if (lineText.trim().startsWith('(') && lineText.trim().endsWith(')')) {\n      const stageLine = lineText.trim().slice(1, -1) // Remove parentheses\n      words.push(createTimedWord(wordId++, stageLine, currentTime, currentTime + 1))\n      currentTime += 1.5\n      continue\n    }\n\n    // Split line into words (separated by spaces)\n    const lineWords = lineText.split(/\\s+/).filter((word: string) => word.trim())\n\n    for (const word of lineWords) {\n      // Remove punctuation for processing but keep it for display\n      const cleanWord = word.replace(/[.,!?;:]/g, '')\n      const punctuation = word.match(/[.,!?;:]/g)?.[0] || ''\n\n      // Calculate actual word duration (may be extended for minimum syllable requirements)\n      let actualWordDuration = wordDuration\n\n      if (cleanWord.includes('/')) {\n        // Multi-syllable word with musical timing distribution\n        const syllableParts = cleanWord.split('/')\n        const syllables: Syllable[] = []\n\n        // Use centralized syllable weighting system for consistent timing\n        const weights = TimingUtils.calculateSyllableWeights(syllableParts.length)\n\n        const totalWeight = weights.reduce((sum: number, weight: number) => sum + weight, 0)\n\n        // Ensure syllable durations meet minimum requirements\n        const minSyllableDurationSec = TIMING.syllable.minDuration / 1000\n        const totalMinDuration = minSyllableDurationSec * syllableParts.length\n\n        if (wordDuration < totalMinDuration) {\n          actualWordDuration = totalMinDuration\n          console.warn(`⚠️ Test data: Extended word \"${cleanWord}\" from ${wordDuration}s to ${actualWordDuration}s for ${syllableParts.length} syllables`)\n        }\n\n        const syllableDurations = weights.map((weight: number) => {\n          const baseDuration = minSyllableDurationSec\n          const extraDuration = ((weight / totalWeight) * (actualWordDuration - totalMinDuration))\n          return baseDuration + extraDuration\n        })\n\n        let syllableStartTime = currentTime\n        syllableParts.forEach((syllable: string, index: number) => {\n          const endTime = syllableStartTime + syllableDurations[index]\n          syllables.push({\n            text: syllable + (index === syllableParts.length - 1 ? punctuation : ''),\n            startTime: syllableStartTime,\n            endTime,\n          })\n          syllableStartTime = endTime\n        })\n\n        words.push({\n          id: `word-${wordId++}`,\n          text: cleanWord.replace(/\\//g, '') + punctuation,\n          startTime: currentTime,\n          endTime: currentTime + actualWordDuration,\n          syllables,\n        })\n      } else {\n        // Single word or \"FULL\" word\n        const isFullWord = cleanWord.length > 6 // Longer words become \"FULL\"\n\n        if (isFullWord) {\n          words.push({\n            id: `word-${wordId++}`,\n            text: 'FULL',\n            startTime: currentTime,\n            endTime: currentTime + wordDuration,\n            syllables: [\n              {\n                text: 'FULL',\n                startTime: currentTime,\n                endTime: currentTime + wordDuration,\n              },\n            ],\n          })\n        } else {\n          words.push(createTimedWord(wordId++, cleanWord + punctuation, currentTime, currentTime + actualWordDuration))\n        }\n      }\n\n      // Apply realistic word spacing using beat-based gaps\n      // Use a fraction of the beat interval as gap (more musical)\n      const wordGap = beatInterval - actualWordDuration // Remaining time in beat\n      const minGap = TIMING.word.collisionMargin / 1000 // Minimum safe gap\n      const actualGap = Math.max(wordGap * 0.6, minGap) // Use 60% of available gap, minimum safe gap\n\n      // Debug first few words to show gap calculations\n      if (wordId <= 5) {\n        console.log(`📏 Word \"${cleanWord}\": duration=${actualWordDuration.toFixed(3)}s, gap=${actualGap.toFixed(3)}s, next=${(currentTime + actualWordDuration + actualGap).toFixed(3)}s`)\n      }\n\n      currentTime += actualWordDuration + actualGap\n    }\n\n    // Add pause between lines\n    currentTime += beatInterval * 0.5\n  }\n\n  // Debug: Log first few words to see timing and gaps\n  console.log('📊 First 5 words with gaps:')\n  words.slice(0, 5).forEach((word, index) => {\n    const nextWord = words[index + 1]\n    const gap = nextWord ? nextWord.startTime - word.endTime : 0\n    console.log(\n      `  ${index + 1}. \"${word.text}\": ${word.startTime.toFixed(3)}s - ${word.endTime.toFixed(3)}s` +\n      (gap > 0 ? ` → gap: ${gap.toFixed(3)}s` : ' (last)')\n    )\n  })\n\n  return words\n}\n\nfunction createTimedWord(id: number, text: string, startTime: number, endTime: number): TimedWord {\n  return {\n    id: `word-${id}`,\n    text,\n    startTime,\n    endTime,\n    syllables: [\n      {\n        text,\n        startTime,\n        endTime,\n      },\n    ],\n  }\n}\n\n// Calculate total duration for the test\nexport function getTestDuration(): number {\n  const words = parseNovemberLyrics()\n  return words.length > 0 ? Math.max(...words.map(w => w.endTime)) + 2 : 60\n}\n\n// Debug function to test metadata parsing\nexport function debugNovemberParsing() {\n  console.log('🧪 DEBUG: Testing November lyrics parsing with metadata')\n  const { lyrics, metadata } = parseLyricsWithMetadata(NOVEMBER_LYRICS)\n\n  console.log('📋 Metadata extracted:')\n  console.log(`  Title: \"${metadata.title}\"`)\n  console.log(`  Author: \"${metadata.author}\"`)\n  console.log(`  Captions: ${metadata.captions?.length || 0} found`)\n  metadata.captions?.forEach((caption: string, index: number) => {\n    console.log(`    ${index + 1}. \"${caption}\"`)\n  })\n\n  console.log(`\\n📝 Lines breakdown (${lyrics.length} total):`)\n  lyrics.forEach((line, index) => {\n    const isMetadata = line.type !== 'lyrics' && line.type !== undefined\n    console.log(`  ${index + 1}. [${isMetadata ? 'META' : 'LYRICS'}] \"${line.text}\"`)\n    if (!isMetadata && line.words) {\n      console.log(`     → ${line.words.length} words: ${line.words.map(w => w.word).join(', ')}`)\n    }\n  })\n\n  const lyricsOnly = lyrics.filter(line => line.type === 'lyrics' || !line.type)\n  console.log(`\\n✅ Result: ${lyricsOnly.length} lyrics lines, ${lyrics.length - lyricsOnly.length} metadata lines skipped`)\n}\n\nexport { type TimedWord, type Syllable }\n","<template>\n  <div class=\"test-timing-page\">\n    <!-- Header -->\n    <div class=\"header bg-light p-3 mb-4\">\n      <div class=\"container\">\n        <div class=\"row align-items-center\">\n          <div class=\"col\">\n            <nav aria-label=\"breadcrumb\" class=\"mb-2\">\n              <ol class=\"breadcrumb mb-0\">\n                <li class=\"breadcrumb-item\">\n                  <router-link to=\"/compose\" class=\"text-decoration-none\">\n                    <i class=\"bi bi-arrow-left\"></i> Back to Projects\n                  </router-link>\n                </li>\n                <li class=\"breadcrumb-item active\">Word Timing Test</li>\n              </ol>\n            </nav>\n            <h2 class=\"mb-1\">Word Timing Editor Test</h2>\n            <p class=\"mb-0 text-muted\">Testing drag & drop word timing with \"November\" lyrics</p>\n          </div>\n          <div class=\"col-auto\">\n            <button class=\"btn btn-primary btn-sm me-2\" @click=\"resetTiming\"><i class=\"bi bi-arrow-clockwise\"></i>\n              Reset</button>\n            <button class=\"btn btn-info btn-sm\" @click=\"showDebugInfo = !showDebugInfo\"><i class=\"bi bi-bug\"></i>\n              Debug</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main Content -->\n    <!-- Slide-in Help Panel -->\n    <div class=\"help-panel-container\">\n      <div class=\"help-panel\" :class=\"{ visible: showHelp }\" @mouseenter=\"showHelp = true\"\n        @mouseleave=\"showHelp = false\">\n        <div class=\"help-tab\">\n          <i class=\"bi bi-question-circle\"></i>\n          <span>Help</span>\n        </div>\n        <div class=\"help-content\">\n          <h5><i class=\"bi bi-info-circle\"></i> Word Timing Editor</h5>\n          <ul class=\"help-list\">\n            <li><strong>Select:</strong> Click on any word box to select it</li>\n            <li><strong>Move:</strong> Drag a word box left/right to change its start time</li>\n            <li><strong>Resize:</strong> Drag the green handle on the right edge to change duration</li>\n            <li><strong>Syllables:</strong> Drag orange dividers within multi-syllable words</li>\n            <li><strong>View:</strong> Adjust the view window controls above to zoom in/out</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main Content -->\n    <div class=\"container\">\n      <!-- Word Timing Editor -->\n      <div class=\"timing-editor-section mb-4\">\n        <h4>Word Timing Editor</h4>\n        <WordTimingEditor :words=\"words\" :duration=\"duration\" :view-start=\"viewStart\" :view-end=\"viewEnd\"\n          :show-debug=\"showDebug\" :show-background=\"true\" :show-border=\"true\" @update:words=\"handleWordsUpdate\"\n          @select-word=\"handleWordSelect\" />\n      </div>\n\n      <!-- Controls -->\n      <div class=\"controls-section mb-4\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <label class=\"form-label\">View Window (seconds)</label>\n            <div class=\"row\">\n              <div class=\"col\">\n                <input v-model.number=\"viewStartInput\" type=\"number\" class=\"form-control form-control-sm\" min=\"0\"\n                  :max=\"duration\" step=\"0.5\" placeholder=\"Start\" />\n              </div>\n              <div class=\"col\">\n                <input v-model.number=\"viewDurationInput\" type=\"number\" class=\"form-control form-control-sm\" min=\"0.1\"\n                  :max=\"duration - viewStart\" step=\"0.5\" placeholder=\"Duration\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-4\">\n            <label class=\"form-label\">Selected Word</label>\n            <div class=\"form-control form-control-sm bg-light\">\n              {{\n                selectedWord\n                  ? `\"${selectedWord.text}\" (${selectedWord.startTime.toFixed(1)}s - ${selectedWord.endTime.toFixed(1)}s)`\n                  : 'None'\n              }}\n            </div>\n          </div>\n          <div class=\"col-md-4\">\n            <label class=\"form-label\">Total Duration</label>\n            <div class=\"form-control form-control-sm bg-light\">\n              {{ duration.toFixed(1) }} seconds ({{ Math.floor(duration / 60) }}:{{\n                Math.floor(duration % 60)\n                  .toString()\n                  .padStart(2, '0')\n              }})\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Lyrics Display -->\n      <div class=\"lyrics-section mb-4\">\n        <h5>Current Lyrics with Timing</h5>\n        <div class=\"lyrics-display p-3 border rounded bg-light\">\n          <div v-for=\"(line, lineIndex) in lyricsLines\" :key=\"lineIndex\" class=\"lyrics-line mb-2\">\n            <span v-for=\"word in line\" :key=\"word.id\" class=\"lyrics-word me-1\"\n              :class=\"{ 'selected-word': selectedWordId === word.id }\" @click=\"handleWordSelected(word.id)\">\n              {{ word.text }}\n              <small class=\"text-muted\">({{ word.startTime.toFixed(1) }}s)</small>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Debug Info -->\n      <div v-if=\"showDebugInfo\" class=\"debug-section\">\n        <h5>Debug Information</h5>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <h6>Words in View ({{ visibleWords.length }})</h6>\n            <div class=\"debug-box\">\n              <div v-for=\"word in visibleWords\" :key=\"word.id\" class=\"debug-word mb-1\">\n                <strong>{{ word.text }}</strong>: {{ word.startTime.toFixed(2) }}s - {{ word.endTime.toFixed(2) }}s\n                <span v-if=\"word.syllables.length > 1\" class=\"text-muted\"> ({{ word.syllables.length }} syllables)\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <h6>Selected Word Details</h6>\n            <div class=\"debug-box\">\n              <pre v-if=\"selectedWord\">{{ JSON.stringify(selectedWord, null, 2) }}</pre>\n              <div v-else class=\"text-muted\">No word selected</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Close container -->\n  </div>\n  <!-- Close test-timing-page -->\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue'\nimport WordTimingEditor from '@/components/WordTimingEditor.vue'\nimport { parseNovemberLyrics, getTestDuration, type TimedWord } from '@/utils/novemberLyrics'\nimport { RelativeSyllableTiming } from '@/models/RelativeSyllableTiming'\n\n// Reactive state\nconst words = ref<TimedWord[]>([])\nconst duration = ref(60)\nconst viewStartInput = ref(0)\nconst viewDurationInput = ref(3)\nconst selectedWordId = ref<string | null>(null)\nconst showDebugInfo = ref(true) // Enable debug by default in test rig\nconst showHelp = ref(false)\nconst showDebug = computed(() => showDebugInfo.value)\n\n// Computed properties for safe input handling\nconst viewStart = computed(() => {\n  const value = Number(viewStartInput.value)\n  return isNaN(value) ? 0 : Math.max(0, Math.min(value, duration.value))\n})\n\nconst viewDuration = computed(() => {\n  const value = Number(viewDurationInput.value)\n  return isNaN(value) ? 3 : Math.max(0.1, Math.min(value, duration.value - viewStart.value))\n})\n\nconst viewEnd = computed(() => {\n  return viewStart.value + viewDuration.value\n})\n\n// Computed properties\nconst selectedWord = computed(() => {\n  return selectedWordId.value ? words.value.find(w => w.id === selectedWordId.value) : null\n})\n\nconst visibleWords = computed(() => {\n  return words.value.filter(word => {\n    return word.endTime >= viewStart.value && word.startTime <= viewEnd.value\n  })\n})\n\nconst lyricsLines = computed(() => {\n  // Group words into lines for display (rough approximation)\n  const lines: TimedWord[][] = []\n  let currentLine: TimedWord[] = []\n  let lastEndTime = 0\n\n  for (const word of words.value) {\n    // New line if there's a significant gap or we have too many words\n    if (word.startTime - lastEndTime > 1.0 || currentLine.length > 8) {\n      if (currentLine.length > 0) {\n        lines.push([...currentLine])\n        currentLine = []\n      }\n    }\n\n    currentLine.push(word)\n    lastEndTime = word.endTime\n  }\n\n  if (currentLine.length > 0) {\n    lines.push(currentLine)\n  }\n\n  return lines\n})\n\n// Methods\n// const handleWordUpdate = (wordId: string, startTime: number, endTime: number) => {\n//   const wordIndex = words.value.findIndex(w => w.id === wordId)\n//   if (wordIndex !== -1) {\n//     const word = words.value[wordIndex]\n//     const oldStartTime = word.startTime\n//     const oldEndTime = word.endTime\n\n//     // Update word timing\n//     word.startTime = startTime\n//     word.endTime = endTime\n\n//     // SMART SYLLABLE HANDLING: Only adjust what needs to change\n//     if (word.syllables.length > 1) {\n//       const startTimeChanged = Math.abs(startTime - oldStartTime) > 0.01\n//       const endTimeChanged = Math.abs(endTime - oldEndTime) > 0.01\n\n//       if (startTimeChanged && !endTimeChanged) {\n//         // Moving word start: shift all syllables equally\n//         const deltaStart = startTime - oldStartTime\n//         word.syllables.forEach((syllable) => {\n//           syllable.startTime += deltaStart\n//           syllable.endTime += deltaStart\n//         })\n//         console.log(`MOVE START: \"${word.text}\" shifted by ${deltaStart.toFixed(2)}s`)\n\n//       } else if (endTimeChanged && !startTimeChanged) {\n//         // Resizing word end: redistribute syllables proportionally from original start\n//         const originalTotalDuration = oldEndTime - oldStartTime\n//         const newTotalDuration = endTime - oldStartTime\n//         const scaleFactor = newTotalDuration / originalTotalDuration\n\n//         console.log(`RESIZE END: \"${word.text}\" ${oldEndTime.toFixed(2)}s -> ${endTime.toFixed(2)}s (scale: ${scaleFactor.toFixed(2)})`)\n\n//         let syllableStartTime = oldStartTime\n//         word.syllables.forEach((syllable) => {\n//           const originalDuration = syllable.endTime - syllable.startTime\n//           const newDuration = originalDuration * scaleFactor\n//           syllable.startTime = syllableStartTime\n//           syllable.endTime = syllableStartTime + newDuration\n//           syllableStartTime = syllable.endTime\n//         })\n\n//         console.log(`   -> Syllables: ${word.syllables.map(s => `${s.text}(${s.startTime.toFixed(1)}-${s.endTime.toFixed(1)})`).join(' ')}`)\n\n//       } else if (startTimeChanged && endTimeChanged) {\n//         // Both changed: adjust first and last syllable boundaries, keep middle boundaries\n//         word.syllables[0].startTime = startTime\n//         word.syllables[word.syllables.length - 1].endTime = endTime\n//         console.log(`MOVE WORD: \"${word.text}\" adjusted boundaries only`)\n//       }\n//     } else {\n//       // Single syllable: just update it to match word\n//       word.syllables[0].startTime = startTime\n//       word.syllables[0].endTime = endTime\n//     }\n//   }\n// }\n\n// const handleSyllableUpdate = (wordId: string, syllableIndex: number, startTime: number, endTime: number) => {\n//   const word = words.value.find(w => w.id === wordId)\n//   if (word && word.syllables[syllableIndex]) {\n//     word.syllables[syllableIndex].startTime = startTime\n//     word.syllables[syllableIndex].endTime = endTime\n\n//     // Update word boundaries if needed\n//     word.startTime = Math.min(word.startTime, startTime)\n//     word.endTime = Math.max(word.endTime, endTime)\n\n//     console.log(`Updated syllable \"${word.syllables[syllableIndex].text}\": ${startTime.toFixed(2)}s - ${endTime.toFixed(2)}s`)\n//   }\n// }\n\nconst handleWordSelected = (wordId: string | null) => {\n  selectedWordId.value = wordId\n\n  if (wordId) {\n    const word = words.value.find(w => w.id === wordId)\n    if (word) {\n      console.log(`Selected word: \"${word.text}\"`)\n    }\n  }\n}\n\n// New handlers for the simplified component\nconst handleWordsUpdate = (updatedWords: any[]) => {\n  // Use RelativeSyllableTiming model for proper syllable handling\n  updatedWords.forEach((updatedWordData) => {\n    const originalWordIndex = words.value.findIndex(w => w.id === updatedWordData.id)\n    if (originalWordIndex !== -1) {\n      const originalWord = words.value[originalWordIndex]\n      const oldStartTime = originalWord.startTime\n      const oldEndTime = originalWord.endTime\n      const newStartTime = updatedWordData.startTime\n      const newEndTime = updatedWordData.endTime\n\n      // Create RelativeSyllableTiming instance from current word data\n      // Convert seconds to milliseconds and create absolute syllables for conversion\n      const absoluteSyllables = originalWord.syllables.map(syl => ({\n        text: syl.text,\n        startTime: Math.round(syl.startTime * 1000),\n        endTime: Math.round(syl.endTime * 1000)\n      }))\n\n      const timing = RelativeSyllableTiming.fromAbsoluteSyllables(\n        originalWord.id,\n        originalWord.text,\n        Math.round(oldStartTime * 1000),\n        Math.round(oldEndTime * 1000),\n        absoluteSyllables\n      )\n\n      let updatedTiming: RelativeSyllableTiming\n\n      // Determine the type of change and apply appropriate operation\n      const startTimeChanged = Math.abs(newStartTime - oldStartTime) > 0.01\n      const endTimeChanged = Math.abs(newEndTime - oldEndTime) > 0.01\n\n      if (startTimeChanged && !endTimeChanged) {\n        // Moving word: use moveWord method\n        updatedTiming = timing.moveWord(Math.round(newStartTime * 1000))\n        if (showDebugInfo.value) console.log(`MOVE: \"${originalWord.text}\" moved to ${newStartTime.toFixed(2)}s`)\n\n      } else if (endTimeChanged && !startTimeChanged) {\n        // Resizing word end: use resizeWordEnd method\n        updatedTiming = timing.resizeWordEnd(Math.round(newEndTime * 1000))\n        if (showDebugInfo.value) console.log(`RESIZE: \"${originalWord.text}\" resized to ${newEndTime.toFixed(2)}s`)\n\n      } else if (startTimeChanged && endTimeChanged) {\n        // Both changed: first move, then resize\n        const movedTiming = timing.moveWord(Math.round(newStartTime * 1000))\n        updatedTiming = movedTiming.resizeWordEnd(Math.round(newEndTime * 1000))\n        if (showDebugInfo.value) console.log(`MOVE & RESIZE: \"${originalWord.text}\" moved and resized`)\n\n      } else {\n        // No change needed\n        updatedTiming = timing\n      }\n\n      // Convert back to TimedWord format (milliseconds to seconds)\n      const updatedTimingWordData = updatedTiming.getWordData()\n      const updatedAbsoluteSyllables = updatedTiming.getAbsoluteSyllables()\n\n      // Update the original word with new timing data\n      originalWord.startTime = updatedTimingWordData.startTime / 1000\n      originalWord.endTime = updatedTimingWordData.endTime / 1000\n      originalWord.syllables = updatedAbsoluteSyllables.map(syl => ({\n        text: syl.text,\n        startTime: syl.startTime / 1000,\n        endTime: syl.endTime / 1000\n      }))\n    }\n  })\n\n  console.log('Words updated:', updatedWords.length)\n}\n\nconst handleWordSelect = (wordId: string | null) => {\n  handleWordSelected(wordId)\n}\n\nconst resetTiming = () => {\n  words.value = parseNovemberLyrics()\n  duration.value = getTestDuration()\n  selectedWordId.value = null\n  console.log('Timing data reset')\n}\n\n// Lifecycle\nonMounted(() => {\n  resetTiming()\n})\n</script>\n\n<style scoped>\n.test-timing-page {\n  min-height: 100vh;\n  background: #f8f9fa;\n}\n\n.timing-editor-section {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.controls-section {\n  background: white;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.lyrics-section {\n  background: white;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.lyrics-display {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.lyrics-word {\n  cursor: pointer;\n  padding: 2px 4px;\n  border-radius: 3px;\n  transition: background-color 0.2s;\n  display: inline-block;\n}\n\n.lyrics-word:hover {\n  background-color: rgba(0, 123, 255, 0.1);\n}\n\n.lyrics-word.selected-word {\n  background-color: rgba(255, 193, 7, 0.3);\n  font-weight: bold;\n}\n\n.debug-section {\n  background: white;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n\n.debug-box {\n  background: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 4px;\n  padding: 10px;\n  max-height: 200px;\n  overflow-y: auto;\n  font-family: 'Courier New', monospace;\n  font-size: 12px;\n}\n\n.debug-word {\n  padding: 2px 0;\n  border-bottom: 1px solid #eee;\n}\n\n.lyrics-line {\n  line-height: 1.8;\n}\n\n/* Slide-in Help Panel */\n.help-panel-container {\n  position: fixed;\n  top: 50%;\n  left: 0;\n  z-index: 1000;\n  transform: translateY(-50%);\n}\n\n.help-panel {\n  position: relative;\n  width: 250px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 0 8px 8px 0;\n  box-shadow: 2px 0 12px rgba(0, 0, 0, 0.2);\n  transform: translateX(-230px);\n  transition: transform 0.3s ease-in-out;\n  color: white;\n}\n\n.help-panel.visible {\n  transform: translateX(0);\n}\n\n.help-tab {\n  position: absolute;\n  right: -40px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 8px 12px 8px 8px;\n  border-radius: 0 8px 8px 0;\n  cursor: pointer;\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  font-size: 12px;\n  font-weight: 600;\n  white-space: nowrap;\n  box-shadow: 2px 0 8px rgba(0, 0, 0, 0.15);\n}\n\n.help-tab i {\n  margin-bottom: 4px;\n  font-size: 14px;\n}\n\n.help-content {\n  padding: 20px;\n}\n\n.help-content h5 {\n  margin: 0 0 15px 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: #fff;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  padding-bottom: 8px;\n}\n\n.help-content h5 i {\n  margin-right: 8px;\n  color: #ffd700;\n}\n\n.help-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.help-list li {\n  padding: 6px 0;\n  font-size: 13px;\n  line-height: 1.4;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.help-list li:last-child {\n  border-bottom: none;\n}\n\n.help-list li strong {\n  color: #ffd700;\n  font-weight: 600;\n}\n\n/* Hover effects */\n.help-tab:hover {\n  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);\n}\n\n.help-panel:hover .help-tab {\n  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);\n}\n</style>\n"],"names":["parseNovemberLyrics","words","currentTime","wordId","wordDuration","console","log","TIMING","word","collisionMargin","syllable","minDuration","lyrics","metadata","parseLyricsWithMetadata","title","author","captions","length","lyricsLines","filter","line","type","lyricLine","lineText","text","trim","startsWith","endsWith","stageLine","slice","push","createTimedWord","lineWords","split","cleanWord","replace","punctuation","match","actualWordDuration","includes","syllableParts","syllables","weights","TimingUtils","calculateSyllableWeights","totalWeight","reduce","sum","weight","minSyllableDurationSec","totalMinDuration","warn","syllableDurations","map","syllableStartTime","forEach","index","endTime","startTime","id","wordGap","minGap","actualGap","Math","max","toFixed","beatInterval","nextWord","gap","ref","duration","viewStartInput","viewDurationInput","selectedWordId","showDebugInfo","showHelp","showDebug","computed","value","viewStart","Number","isNaN","min","viewDuration","viewEnd","selectedWord","find","w","visibleWords","lines","currentLine","lastEndTime","handleWordSelected","handleWordsUpdate","updatedWords","updatedWordData","originalWordIndex","findIndex","originalWord","oldStartTime","oldEndTime","newStartTime","newEndTime","absoluteSyllables","syl","round","timing","RelativeSyllableTiming","fromAbsoluteSyllables","updatedTiming","startTimeChanged","abs","endTimeChanged","moveWord","resizeWordEnd","updatedTimingWordData","getWordData","updatedAbsoluteSyllables","getAbsoluteSyllables","handleWordSelect","resetTiming","getTestDuration","onMounted","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_createVNode","_component_router_link","to","class","_cache","_hoisted_9","onClick","$event","_hoisted_10","_normalizeClass","visible","onMouseenter","onMouseleave","_hoisted_11","_hoisted_12","WordTimingEditor","onSelectWord","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","step","placeholder","number","_hoisted_19","_hoisted_21","_hoisted_22","_toDisplayString","_hoisted_23","_hoisted_24","floor","toString","padStart","_hoisted_25","_hoisted_26","_Fragment","_renderList","lineIndex","key","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_createTextVNode","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","JSON","stringify","_hoisted_37"],"mappings":"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"}