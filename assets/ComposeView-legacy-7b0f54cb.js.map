{"version":3,"file":"ComposeView-legacy-7b0f54cb.js","sources":["../../src/formats/LRCFormat.ts","../../src/components/ExportDialog.vue","../../src/services/projectExportService.ts","../../src/views/ComposeView.vue"],"sourcesContent":["/**\n * LRC (Lyrics) File Format - V2+ Implementation\n *\n * STANDARD LRC V2 FEATURES:\n * =========================\n * - Line-level timing: [mm:ss.xx]Line text\n * - Word-level timing: [mm:ss.xx]<mm:ss.xx>word\n * - Metadata tags: [au:Author] [ti:Title] [al:Album] [by:Creator] [offset:Â±ms]\n *   Note: We use [au:] for author/songwriter instead of [ar:] for artist/performer\n * - Multiple timestamps per line (repeated choruses)\n *\n * OUR V2+ EXTENSIONS:\n * ===================\n * We extend the format to preserve our rich syllable timing data:\n *\n * 1. SYLLABLE-LEVEL TIMING (Extension)\n *    Format: [mm:ss.xx]<mm:ss.xx>wo<mm:ss.xx>rd\n *    The '<' marker before a syllable indicates its start time\n *    Example: [00:10.50]<00:10.50>No<00:10.80>vem<00:11.20>ber\n *\n * 2. EXTENDED METADATA (Extension)\n *    [duration:mm:ss.xx] - Total song duration\n *    [creator:Application Name] - Creation tool\n *    [version:2.1] - Enhanced LRC version marker\n *    [syllable_timing:true] - Indicates syllable data present\n *\n * 3. LINE METADATA (Extension)\n *    #[line:N:metadata] format for line-specific data\n *    Examples: #[line:0:title:Verse 1], #[line:0:author:John Doe], #[line:0:caption:Lyrics]\n *\n * PARSING STRATEGY:\n * =================\n * - Read file line by line\n * - Parse metadata tags\n * - Extract timestamps and text\n * - Reconstruct syllable boundaries from timing markers\n * - Handle both standard LRC and our extensions gracefully\n *\n * WRITING STRATEGY:\n * =================\n * - Write metadata header first\n * - Convert milliseconds to mm:ss.xx format\n * - Insert syllable timing markers\n * - Sort lines by timestamp\n * - Ensure backward compatibility (standard players ignore extensions)\n */\n\nimport type { KaraokeProject, LyricLine } from '@/types/karaoke'\n\n/**\n * LRC file metadata\n * Note: 'author' refers to the songwriter/lyricist, not the performer\n */\nexport interface LRCMetadata {\n  author?: string // The songwriter/lyricist (our 'artist' field maps here)\n  title?: string\n  album?: string\n  creator?: string\n  version?: string\n  offset?: number // milliseconds\n  duration?: number // milliseconds\n  syllableTiming?: boolean\n}\n\n/**\n * LRC line with timing information\n */\nexport interface LRCLine {\n  timestamp: number // milliseconds\n  text: string\n  caption?: string // Optional caption for this line (e.g., \"Verse 1\", \"Chorus\")\n  words?: Array<{\n    text: string\n    timestamp: number\n    syllables?: Array<{\n      text: string\n      timestamp: number\n    }>\n  }>\n}\n\n/**\n * LRC Writer - Converts our rich timing data to LRC V2+ format\n */\nexport class LRCWriter {\n  /**\n   * Convert KaraokeProject to LRC V2+ format\n   */\n  static toLRC(project: KaraokeProject): string {\n    const lines: string[] = []\n\n    // Write metadata header\n    lines.push(`[version:2.1]`)\n    lines.push(`[syllable_timing:true]`)\n\n    if (project.name) {\n      lines.push(`[ti:${this.escapeMetadata(project.name)}]`)\n    }\n    if (project.artist) {\n      // Use [au:] tag for author/songwriter (not [ar:] for artist/performer)\n      lines.push(`[au:${this.escapeMetadata(project.artist)}]`)\n    }\n\n    lines.push(`[creator:Karaoke Composer]`)\n\n    // Calculate duration from last word\n    const duration = this.calculateDuration(project.lyrics)\n    if (duration > 0) {\n      lines.push(`[duration:${this.formatTimestamp(duration)}]`)\n    }\n\n    lines.push('') // Blank line after metadata\n\n    // Write lyrics with timing\n    let lyricsLineIndex = 0\n    for (const lyricLine of project.lyrics) {\n      // Skip metadata lines (title, author) but not caption\n      if (lyricLine.type && lyricLine.type !== 'lyrics' && lyricLine.type !== 'caption') {\n        continue\n      }\n\n      // Handle caption lines - output as extended metadata\n      if (lyricLine.type === 'caption') {\n        const captionText = lyricLine.metadata?.caption || lyricLine.text.replace(/^\\[@CAPTION:\\s*/, '').replace(/\\]$/, '')\n        lines.push(`#[line:${lyricsLineIndex}:caption:${this.escapeMetadata(captionText)}]`)\n        continue\n      }\n\n      if (!lyricLine.words || lyricLine.words.length === 0) {\n        continue\n      }\n\n      const lineTimestamp = lyricLine.words[0].startTime || 0\n      const lineText = this.formatLine(lyricLine)\n\n      lines.push(`[${this.formatTimestamp(lineTimestamp)}]${lineText}`)\n      lyricsLineIndex++\n    }\n\n    return lines.join('\\n') + '\\n'\n  }\n\n  /**\n   * Format a lyric line with syllable timing\n   */\n  private static formatLine(line: LyricLine): string {\n    if (!line.words) {\n      return line.text\n    }\n\n    const parts: string[] = []\n\n    for (const word of line.words) {\n      if (!word.syllables || word.syllables.length === 0) {\n        // Simple word without syllables\n        if (word.startTime !== undefined) {\n          parts.push(`<${this.formatTimestamp(word.startTime)}>${word.word}`)\n        } else {\n          parts.push(word.word)\n        }\n      } else {\n        // Word with syllable timing\n        for (const syllable of word.syllables) {\n          if (syllable.startTime !== undefined) {\n            parts.push(`<${this.formatTimestamp(syllable.startTime)}>${syllable.syllable}`)\n          } else {\n            parts.push(syllable.syllable)\n          }\n        }\n      }\n\n      parts.push(' ') // Space between words\n    }\n\n    // Remove trailing space\n    return parts.join('').trim()\n  }\n\n  /**\n   * Format timestamp as mm:ss.xx\n   */\n  private static formatTimestamp(ms: number): string {\n    const totalSeconds = ms / 1000\n    const minutes = Math.floor(totalSeconds / 60)\n    const seconds = totalSeconds % 60\n\n    return `${String(minutes).padStart(2, '0')}:${seconds.toFixed(2).padStart(5, '0')}`\n  }\n\n  /**\n   * Escape metadata values\n   */\n  private static escapeMetadata(value: string): string {\n    // Remove line breaks and brackets\n    return value.replace(/[\\r\\n]/g, ' ').replace(/[[\\]]/g, '')\n  }\n\n  /**\n   * Calculate total duration from lyrics\n   */\n  private static calculateDuration(lyrics: LyricLine[]): number {\n    let maxTime = 0\n\n    for (const line of lyrics) {\n      if (line.words) {\n        for (const word of line.words) {\n          if (word.endTime !== undefined && word.endTime > maxTime) {\n            maxTime = word.endTime\n          }\n        }\n      }\n    }\n\n    return maxTime\n  }\n}\n\n/**\n * LRC Parser - Reads LRC V2+ format back to our data structure\n */\nexport class LRCParser {\n  /**\n   * Parse LRC file content\n   */\n  static parse(content: string): { metadata: LRCMetadata; lines: LRCLine[] } {\n    const metadata: LRCMetadata = {}\n    const lines: LRCLine[] = []\n    const lineMetadata: Map<number, { caption?: string }> = new Map()\n\n    const fileLines = content.split(/\\r?\\n/)\n\n    // First pass: collect line metadata (captions, etc.)\n    for (const fileLine of fileLines) {\n      const trimmed = fileLine.trim()\n\n      if (!trimmed) {\n        continue // Skip empty lines\n      }\n\n      // Check for extended line metadata: #[line:N:key:value]\n      const lineMetadataMatch = trimmed.match(/^#\\[line:(\\d+):(\\w+):(.+)\\]$/)\n      if (lineMetadataMatch) {\n        const [, lineIndexStr, key, value] = lineMetadataMatch\n        const lineIndex = parseInt(lineIndexStr, 10)\n\n        if (!lineMetadata.has(lineIndex)) {\n          lineMetadata.set(lineIndex, {})\n        }\n\n        const lineMeta = lineMetadata.get(lineIndex)!\n        if (key === 'caption') {\n          lineMeta.caption = value\n        }\n\n        continue\n      }\n    }\n\n    // Second pass: parse lyrics lines\n    let lyricsLineIndex = 0\n    for (const fileLine of fileLines) {\n      const trimmed = fileLine.trim()\n\n      if (!trimmed) {\n        continue // Skip empty lines\n      }\n\n      // Skip line metadata lines (already processed)\n      if (trimmed.startsWith('#[line:')) {\n        continue\n      }\n\n      // Check if this is a timestamp line (starts with [MM:SS.xx])\n      const isTimestampLine = /^\\[\\d+:\\d+\\.\\d+\\]/.test(trimmed)\n\n      if (trimmed.startsWith('[') && !isTimestampLine) {\n        // This is metadata (tags like [ti:Title], [au:Author])\n        this.parseMetadata(trimmed, metadata)\n        continue\n      }\n\n      // Parse timed lines (lines with timestamps)\n      if (isTimestampLine) {\n        const parsedLine = this.parseLine(trimmed)\n        if (parsedLine) {\n          // Attach caption metadata if exists\n          const lineMeta = lineMetadata.get(lyricsLineIndex)\n          if (lineMeta?.caption) {\n            parsedLine.caption = lineMeta.caption\n          }\n\n          lines.push(parsedLine)\n          lyricsLineIndex++\n        }\n      }\n    }\n\n    // Sort lines by timestamp\n    lines.sort((a, b) => a.timestamp - b.timestamp)\n\n    return {\n      metadata,\n      lines\n    }\n  }\n\n  /**\n   * Parse metadata tag\n   */\n  private static parseMetadata(line: string, metadata: LRCMetadata): void {\n    const match = line.match(/\\[([^:]+):([^\\]]+)\\]/)\n    if (!match) return\n\n    const [, key, value] = match\n\n    switch (key.toLowerCase()) {\n      case 'au': // Author/songwriter\n        metadata.author = value\n        break\n      case 'ar': // Also accept artist tag for compatibility\n        metadata.author = value\n        break\n      case 'ti':\n        metadata.title = value\n        break\n      case 'al':\n        metadata.album = value\n        break\n      case 'creator':\n        metadata.creator = value\n        break\n      case 'version':\n        metadata.version = value\n        break\n      case 'offset':\n        metadata.offset = parseInt(value, 10)\n        break\n      case 'duration':\n        metadata.duration = this.parseTimestamp(value)\n        break\n      case 'syllable_timing':\n        metadata.syllableTiming = value.toLowerCase() === 'true'\n        break\n    }\n  }\n\n  /**\n   * Parse a timed line with syllable markers\n   */\n  private static parseLine(line: string): LRCLine | null {\n    // Extract timestamp and text\n    const match = line.match(/\\[([^\\]]+)\\](.+)/)\n    if (!match) return null\n\n    const [, timestampStr, text] = match\n    const timestamp = this.parseTimestamp(timestampStr)\n\n    // Check for syllable timing markers\n    if (text.includes('<')) {\n      return this.parseLineWithTiming(timestamp, text)\n    }\n\n    // Simple line without timing\n    return {\n      timestamp,\n      text: text.trim()\n    }\n  }\n\n  /**\n   * Parse line with word/syllable timing markers\n   */\n  private static parseLineWithTiming(lineTimestamp: number, text: string): LRCLine {\n    const words: LRCLine['words'] = []\n    let currentWord = ''\n    let currentTimestamp = lineTimestamp\n    const syllables: Array<{ text: string; timestamp: number }> = []\n\n    // Split by < markers\n    const parts = text.split('<')\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i]\n\n      if (i === 0 && !text.startsWith('<')) {\n        // Text before first marker\n        currentWord += part\n        continue\n      }\n\n      // Extract timestamp and text\n      const markerMatch = part.match(/^([^>]+)>(.*)$/)\n      if (!markerMatch) continue\n\n      const [, timestampStr, syllableText] = markerMatch\n      const syllableTimestamp = this.parseTimestamp(timestampStr)\n\n      // Check if this is end of word (has space)\n      const spaceIndex = syllableText.indexOf(' ')\n      if (spaceIndex !== -1) {\n        // End of word\n        syllables.push({\n          text: syllableText.substring(0, spaceIndex),\n          timestamp: syllableTimestamp\n        })\n\n        words.push({\n          text: currentWord + syllableText.substring(0, spaceIndex),\n          timestamp: currentTimestamp,\n          syllables: syllables.length > 0 ? [...syllables] : undefined\n        })\n\n        // Start new word\n        currentWord = ''\n        syllables.length = 0\n        // Don't update currentTimestamp here - it will be set by the next marker\n        // currentTimestamp will be updated when we process the next syllable/word\n\n        // Continue with text after space\n        if (spaceIndex + 1 < syllableText.length) {\n          currentWord = syllableText.substring(spaceIndex + 1)\n        }\n      } else {\n        // Middle of word or start of word\n        syllables.push({\n          text: syllableText,\n          timestamp: syllableTimestamp\n        })\n        currentWord += syllableText\n\n        // If this is the first syllable of a word, update the word timestamp\n        if (syllables.length === 1) {\n          currentTimestamp = syllableTimestamp\n        }\n      }\n    }\n\n    // Add last word if exists\n    if (currentWord.trim()) {\n      words.push({\n        text: currentWord.trim(),\n        timestamp: currentTimestamp,\n        syllables: syllables.length > 0 ? [...syllables] : undefined\n      })\n    }\n\n    return {\n      timestamp: lineTimestamp,\n      text: words.map(w => w.text).join(' '),\n      words\n    }\n  }\n\n  /**\n   * Parse timestamp from mm:ss.xx or mm:ss:xx format\n   */\n  private static parseTimestamp(timestamp: string): number {\n    const parts = timestamp.split(':')\n    if (parts.length < 2) return 0\n\n    const minutes = parseInt(parts[0], 10) || 0\n    const secondsParts = parts[1].split('.')\n    const seconds = parseInt(secondsParts[0], 10) || 0\n    const centiseconds = parseInt(secondsParts[1], 10) || 0\n\n    return (minutes * 60 + seconds) * 1000 + centiseconds * 10\n  }\n\n  /**\n   * Convert parsed LRC data to KaraokeProject\n   */\n  static toKaraokeProject(\n    content: string,\n    projectId: string = 'imported-song'\n  ): KaraokeProject {\n    const { metadata, lines } = this.parse(content)\n\n    const lyrics: LyricLine[] = []\n    let lineNumber = 1\n\n    for (const lrcLine of lines) {\n      // If this line has a caption, create a caption line first\n      if (lrcLine.caption) {\n        lyrics.push({\n          id: `caption-${lineNumber}`,\n          lineNumber: lineNumber++,\n          text: `[@CAPTION:${lrcLine.caption}]`,\n          words: [],\n          type: 'caption',\n          metadata: { caption: lrcLine.caption }\n        })\n      }\n\n      if (!lrcLine.words || lrcLine.words.length === 0) {\n        // Simple text line\n        const lyricLine: LyricLine = {\n          id: `line-${lineNumber}`,\n          lineNumber: lineNumber++,\n          text: lrcLine.text,\n          type: 'lyrics',\n          startTime: lrcLine.timestamp,\n          endTime: lrcLine.timestamp + 1000, // 1 second default duration\n          words: [\n            {\n              word: lrcLine.text,\n              startTime: lrcLine.timestamp,\n              syllables: [\n                {\n                  syllable: lrcLine.text,\n                  startTime: lrcLine.timestamp\n                }\n              ]\n            }\n          ]\n        }\n\n        // Attach caption metadata if exists\n        if (lrcLine.caption) {\n          if (!lyricLine.metadata) {\n            lyricLine.metadata = {}\n          }\n          lyricLine.metadata.caption = lrcLine.caption\n        }\n\n        lyrics.push(lyricLine)\n        continue\n      }\n\n      // Convert LRC words to our Word format\n      const words = lrcLine.words.map(lrcWord => ({\n        word: lrcWord.text,\n        startTime: lrcWord.timestamp,\n        syllables: lrcWord.syllables\n          ? lrcWord.syllables.map(s => ({\n            syllable: s.text,\n            startTime: s.timestamp\n          }))\n          : [\n            {\n              syllable: lrcWord.text,\n              startTime: lrcWord.timestamp\n            }\n          ]\n      }))\n\n      // Calculate line start and end times from words/syllables\n      let lineStartTime = lrcLine.timestamp\n      let lineEndTime = lrcLine.timestamp\n\n      if (words.length > 0) {\n        // Start time is the first word/syllable\n        lineStartTime = words[0].startTime || lrcLine.timestamp\n\n        // End time is after the last syllable\n        const lastWord = words[words.length - 1]\n        if (lastWord.syllables && lastWord.syllables.length > 0) {\n          const lastSyllable = lastWord.syllables[lastWord.syllables.length - 1]\n          // Add ~300ms per syllable as duration estimate\n          lineEndTime = (lastSyllable.startTime || lrcLine.timestamp) + 300\n        } else {\n          lineEndTime = (lastWord.startTime || lrcLine.timestamp) + 500\n        }\n      }\n\n      const lyricLine: LyricLine = {\n        id: `line-${lineNumber}`,\n        lineNumber: lineNumber++,\n        text: lrcLine.text,\n        type: 'lyrics',\n        words,\n        startTime: lineStartTime,\n        endTime: lineEndTime\n      }\n\n      // Attach caption metadata if exists\n      if (lrcLine.caption) {\n        if (!lyricLine.metadata) {\n          lyricLine.metadata = {}\n        }\n        lyricLine.metadata.caption = lrcLine.caption\n      }\n\n      lyrics.push(lyricLine)\n    }\n\n    return {\n      id: projectId,\n      name: metadata.title || 'Imported Song',\n      artist: metadata.author || 'Unknown Artist',\n      genre: '',\n      lyrics,\n      timings: [],\n      isCompleted: true,\n      audioFile: {\n        name: '',\n        file: null\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }\n}\n","<template>\n  <!-- Bootstrap Modal -->\n  <div class=\"modal show d-block\" tabindex=\"-1\" @click.self=\"closeDialog\">\n    <div class=\"modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\">ð¤ Export Project</h5>\n          <button type=\"button\" class=\"btn-close\" @click=\"closeDialog\" aria-label=\"Close\"></button>\n        </div>\n\n        <div class=\"modal-body\">\n          <!-- Project Info -->\n          <div class=\"alert alert-info\">\n            <h5 class=\"mb-1\">{{ project.name }}</h5>\n            <p class=\"mb-2 text-muted\"><em>by {{ project.artist }}</em></p>\n            <div class=\"d-flex gap-3 small\">\n              <span>{{ stats.timedSyllables }} syllables</span>\n              <span>â¢</span>\n              <span>{{ formatDuration(stats.duration) }}</span>\n              <span>â¢</span>\n              <span>{{ stats.completionPercentage }}% complete</span>\n            </div>\n          </div>\n\n          <!-- Format Tabs -->\n          <ul class=\"nav nav-tabs mb-3\" role=\"tablist\">\n            <li class=\"nav-item\" v-for=\"format in formats\" :key=\"format.id\">\n              <button class=\"nav-link\" :class=\"{ active: selectedFormat === format.id }\"\n                @click=\"selectedFormat = format.id\" type=\"button\">\n                <span class=\"me-2\">{{ format.icon }}</span>\n                {{ format.label }}\n              </button>\n            </li>\n          </ul>\n\n          <!-- Tab Content -->\n          <div class=\"tab-content\">\n            <!-- LRC Export -->\n            <div v-if=\"selectedFormat === 'lrc'\" class=\"tab-pane fade show active\">\n              <h5>LRC V2.1 Export</h5>\n              <p class=\"text-muted\">\n                Export as Enhanced LRC format with syllable-level timing. Compatible with modern karaoke players.\n              </p>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Settings</strong>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"lrcSettings.includeMetadata\"\n                      id=\"lrcMetadata\" />\n                    <label class=\"form-check-label\" for=\"lrcMetadata\">\n                      Include metadata (title, artist, album)\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"lrcSettings.includeSyllables\"\n                      id=\"lrcSyllables\" />\n                    <label class=\"form-check-label\" for=\"lrcSyllables\">\n                      Include syllable timing (V2.1 format)\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"lrcSettings.includeWordTiming\"\n                      id=\"lrcWordTiming\" />\n                    <label class=\"form-check-label\" for=\"lrcWordTiming\">\n                      Include word timing markers\n                    </label>\n                  </div>\n\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Timestamp precision:</label>\n                    <div class=\"col-sm-8\">\n                      <select class=\"form-select\" v-model=\"lrcSettings.precision\">\n                        <option value=\"2\">Centisecond (00.00)</option>\n                        <option value=\"3\">Millisecond (00.000)</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Preview</strong>\n                </div>\n                <div class=\"card-body\">\n                  <pre class=\"bg-dark text-light p-3 rounded small\"\n                    style=\"max-height: 200px; overflow-y: auto;\">{{ lrcPreview }}</pre>\n                </div>\n              </div>\n\n              <button class=\"btn btn-primary w-100\" @click=\"exportLRC\" :disabled=\"exporting\">\n                <span v-if=\"!exporting\">ð Export LRC File</span>\n                <span v-else>â³ Exporting...</span>\n              </button>\n            </div>\n\n            <!-- CDG Export -->\n            <div v-if=\"selectedFormat === 'cdg'\" class=\"tab-pane fade show active\">\n              <h5>CDG Export</h5>\n              <p class=\"text-muted\">\n                Export as CD+G format for professional karaoke machines. Creates binary .cdg file with graphics data.\n              </p>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Settings</strong>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Background color:</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"color\" class=\"form-control form-control-color\"\n                        v-model=\"cdgSettings.backgroundColor\" />\n                    </div>\n                  </div>\n\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Text color:</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"color\" class=\"form-control form-control-color\" v-model=\"cdgSettings.textColor\" />\n                    </div>\n                  </div>\n\n                  <div class=\"row align-items-center mb-2\">\n                    <label class=\"col-sm-4 col-form-label\">Highlight color:</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"color\" class=\"form-control form-control-color\"\n                        v-model=\"cdgSettings.highlightColor\" />\n                    </div>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"cdgSettings.showBorder\" id=\"cdgBorder\" />\n                    <label class=\"form-check-label\" for=\"cdgBorder\">\n                      Show decorative border\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"cdgSettings.centerText\" id=\"cdgCenter\" />\n                    <label class=\"form-check-label\" for=\"cdgCenter\">\n                      Center text on screen\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"cdgSettings.showCaptions\"\n                      id=\"cdgCaptions\" />\n                    <label class=\"form-check-label\" for=\"cdgCaptions\">\n                      Show captions (e.g., \"Verse 1\", \"Chorus\")\n                    </label>\n                  </div>\n\n                  <div v-if=\"cdgSettings.showCaptions\" class=\"row align-items-center mb-2 ms-4\">\n                    <label class=\"col-sm-5 col-form-label small\">Caption duration (seconds):</label>\n                    <div class=\"col-sm-7\">\n                      <input type=\"number\" class=\"form-control form-control-sm\"\n                        v-model.number=\"cdgSettings.captionDuration\" min=\"1\" max=\"10\" step=\"0.5\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>File Information</strong>\n                </div>\n                <div class=\"card-body\">\n                  <p class=\"mb-1\"><strong>Format:</strong> CD+G Binary</p>\n                  <p class=\"mb-1\"><strong>Estimated size:</strong> {{ estimatedCDGSize }} KB</p>\n                  <p class=\"mb-1\"><strong>Resolution:</strong> 288Ã192 pixels (6-bit color)</p>\n                  <p class=\"mb-0\"><strong>Packet rate:</strong> 75 packets/second</p>\n                </div>\n              </div>\n\n              <button class=\"btn btn-primary w-100\" @click=\"exportCDG\" :disabled=\"exporting\">\n                <span v-if=\"!exporting\">ð¿ Export CDG File</span>\n                <span v-else>â³ Exporting...</span>\n              </button>\n            </div>\n\n            <!-- JSON Export -->\n            <div v-if=\"selectedFormat === 'json'\" class=\"tab-pane fade show active\">\n              <h5>JSON Export</h5>\n              <p class=\"text-muted\">\n                Export complete project data as JSON for backup, sharing, or programmatic use.\n              </p>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>Settings</strong>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"jsonSettings.prettyPrint\"\n                      id=\"jsonPretty\" />\n                    <label class=\"form-check-label\" for=\"jsonPretty\">\n                      Pretty print (formatted, readable)\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"jsonSettings.includeMetadata\"\n                      id=\"jsonMetadata\" />\n                    <label class=\"form-check-label\" for=\"jsonMetadata\">\n                      Include project metadata\n                    </label>\n                  </div>\n\n                  <div class=\"form-check mb-2\">\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"jsonSettings.includeStats\"\n                      id=\"jsonStats\" />\n                    <label class=\"form-check-label\" for=\"jsonStats\">\n                      Include statistics\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"card mb-3\">\n                <div class=\"card-header\">\n                  <strong>ð Export Info</strong>\n                </div>\n                <div class=\"card-body\">\n                  <p class=\"mb-1\"><strong>Lines:</strong> {{ stats.totalLines }}</p>\n                  <p class=\"mb-1\"><strong>Words:</strong> {{ stats.totalWords }}</p>\n                  <p class=\"mb-1\"><strong>Syllables:</strong> {{ stats.totalSyllables }}</p>\n                  <p class=\"mb-0\"><strong>Estimated size:</strong> ~{{ estimatedJSONSize }} KB</p>\n                </div>\n              </div>\n\n              <button class=\"btn btn-primary w-100\" @click=\"exportJSON\" :disabled=\"exporting\">\n                <span v-if=\"!exporting\">ð¾ Export JSON File</span>\n                <span v-else>â³ Exporting...</span>\n              </button>\n            </div>\n          </div>\n\n          <!-- Export Status -->\n          <div v-if=\"exportStatus\" class=\"alert mt-3\"\n            :class=\"exportStatus.type === 'success' ? 'alert-success' : 'alert-danger'\">\n            {{ exportStatus.message }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport type { KaraokeProject } from '../types/karaoke'\nimport { LRCWriter } from '../formats/LRCFormat'\nimport { getProjectStats } from '../services/projectExportService'\n\nconst props = defineProps<{\n  project: KaraokeProject\n}>()\n\nconst emit = defineEmits<{\n  close: []\n}>()\n\n// Selected format tab\nconst selectedFormat = ref<'lrc' | 'cdg' | 'json'>('lrc')\n\n// Export settings\nconst lrcSettings = ref({\n  includeMetadata: true,\n  includeSyllables: true,\n  includeWordTiming: true,\n  precision: 2\n})\n\nconst cdgSettings = ref({\n  backgroundColor: '#000080',  // Navy blue\n  textColor: '#FFFFFF',        // White\n  highlightColor: '#FFFF00',   // Yellow\n  showBorder: true,\n  centerText: true,\n  showMetadata: true,\n  metadataDuration: 3,\n  showCaptions: true,          // Show captions above lyrics\n  captionDuration: 2           // Show captions for 2 seconds\n})\n\nconst jsonSettings = ref({\n  prettyPrint: true,\n  includeMetadata: true,\n  includeStats: true\n})\n\n// State\nconst exporting = ref(false)\nconst exportStatus = ref<{ type: 'success' | 'error'; message: string } | null>(null)\n\n// Format definitions\nconst formats = [\n  {\n    id: 'lrc' as const,\n    label: 'LRC',\n    icon: 'ð'\n  },\n  {\n    id: 'cdg' as const,\n    label: 'CDG',\n    icon: 'ð¿'\n  },\n  {\n    id: 'json' as const,\n    label: 'JSON',\n    icon: 'ð¾'\n  }\n]\n\n// Computed\nconst stats = computed(() => getProjectStats(props.project))\n\nconst lrcPreview = computed(() => {\n  try {\n    const lines = LRCWriter.toLRC(props.project).split('\\n')\n    return lines.slice(0, 10).join('\\n') + (lines.length > 10 ? '\\n...' : '')\n  } catch {\n    return 'Preview not available'\n  }\n})\n\nconst estimatedCDGSize = computed(() => {\n  // CDG: 24 bytes per packet, 75 packets/second\n  const duration = stats.value.duration\n  const packets = Math.ceil(duration * 75)\n  const bytes = packets * 24\n  return Math.ceil(bytes / 1024)\n})\n\nconst estimatedJSONSize = computed(() => {\n  const jsonStr = JSON.stringify(props.project)\n  return Math.ceil(jsonStr.length / 1024)\n})\n\n// Functions\nfunction closeDialog() {\n  emit('close')\n}\n\nfunction formatDuration(seconds: number): string {\n  const mins = Math.floor(seconds / 60)\n  const secs = Math.floor(seconds % 60)\n  return `${mins}:${secs.toString().padStart(2, '0')}`\n}\n\nasync function exportLRC() {\n  exporting.value = true\n  try {\n    const lrcContent = LRCWriter.toLRC(props.project)\n\n    // Download as .lrc file\n    const blob = new Blob([lrcContent], { type: 'text/plain;charset=utf-8' })\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = `${props.project.name.toLowerCase().replace(/\\s+/g, '_')}.lrc`\n\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n\n    URL.revokeObjectURL(url)\n\n    showStatus('success', 'â LRC file exported successfully!')\n  } catch (error: any) {\n    showStatus('error', `â Export failed: ${error.message}`)\n  } finally {\n    exporting.value = false\n  }\n}\n\nasync function exportCDG() {\n  exporting.value = true\n  try {\n    // Dynamic import to avoid loading CDG renderer in browser build\n    showStatus('error', 'â CDG export requires Node.js environment. Use the CLI tool: npx tsx src/karaoke/demo/generateCDG.ts')\n  } catch (error: any) {\n    showStatus('error', `â Export failed: ${error.message}`)\n  } finally {\n    exporting.value = false\n  }\n}\n\nasync function exportJSON() {\n  exporting.value = true\n  try {\n    const jsonContent = jsonSettings.value.prettyPrint\n      ? JSON.stringify(props.project, null, 2)\n      : JSON.stringify(props.project)\n\n    // Download as .json file\n    const blob = new Blob([jsonContent], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = `${props.project.name.toLowerCase().replace(/\\s+/g, '_')}.json`\n\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n\n    URL.revokeObjectURL(url)\n\n    showStatus('success', 'â JSON file exported successfully!')\n  } catch (error: any) {\n    showStatus('error', `â Export failed: ${error.message}`)\n  } finally {\n    exporting.value = false\n  }\n}\n\nfunction showStatus(type: 'success' | 'error', message: string) {\n  exportStatus.value = {\n    type,\n    message\n  }\n  setTimeout(() => {\n    exportStatus.value = null\n  }, 4000)\n}\n</script>\n\n<style scoped>\n/* Bootstrap modal backdrop */\n.modal.show {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n</style>\n","/**\n * Project Export Service\n *\n * Exports KaraokeProject as JSON file with all timing data\n * for use with terminal renderer and other tools.\n */\n\nimport type { KaraokeProject } from '../types/karaoke'\n\n/**\n * Export project as JSON file download\n */\nexport function exportProjectAsJSON(project: KaraokeProject): void {\n  // Create clean export data\n  const exportData = {\n    version: '1.0',\n    exportDate: new Date().toISOString(),\n    project: {\n      id: project.id,\n      name: project.name,\n      artist: project.artist,\n      genre: project.genre,\n      createdAt: project.createdAt,\n      updatedAt: project.updatedAt,\n      audioFile: {\n        name: project.audioFile.name,\n        duration: project.audioFile.duration,\n        // Note: Don't export actual file blob, just metadata\n      },\n      lyrics: project.lyrics,\n      timings: project.timings,\n      isCompleted: project.isCompleted,\n      metadata: project.metadata\n    }\n  }\n\n  // Convert to JSON with nice formatting\n  const json = JSON.stringify(exportData, null, 2)\n\n  // Create blob\n  const blob = new Blob([json], { type: 'application/json' })\n\n  // Create download link\n  const url = URL.createObjectURL(blob)\n  const link = document.createElement('a')\n  link.href = url\n\n  // Generate filename from project name\n  const filename = `${sanitizeFilename(project.name)}_karaoke_project.json`\n  link.download = filename\n\n  // Trigger download\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n\n  // Cleanup\n  URL.revokeObjectURL(url)\n}\n\n/**\n * Export project for terminal renderer demo\n * (TypeScript format for direct import)\n */\nexport function exportProjectForTerminal(project: KaraokeProject): void {\n  // Create TypeScript code\n  const tsCode = `/**\n * Exported Karaoke Project: ${project.name}\n * Exported: ${new Date().toISOString()}\n *\n * Import this in terminal demo to test with real timing data!\n */\n\nimport type { KaraokeProject } from '../../types/karaoke'\n\nexport const ${sanitizeVariableName(project.name)}: KaraokeProject = ${JSON.stringify(\n    {\n      id: project.id,\n      name: project.name,\n      artist: project.artist,\n      genre: project.genre,\n      createdAt: project.createdAt.toISOString(),\n      updatedAt: project.updatedAt.toISOString(),\n      audioFile: {\n        name: project.audioFile.name,\n        file: null,\n        url: 'exported://audio',\n        duration: project.audioFile.duration\n      },\n      lyrics: project.lyrics,\n      timings: project.timings,\n      isCompleted: project.isCompleted,\n      metadata: project.metadata\n    },\n    null,\n    2\n  )}\n`\n\n  // Download as .ts file\n  const blob = new Blob([tsCode], { type: 'text/typescript' })\n  const url = URL.createObjectURL(blob)\n  const link = document.createElement('a')\n  link.href = url\n  link.download = `${sanitizeFilename(project.name)}_export.ts`\n\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n\n  URL.revokeObjectURL(url)\n}\n\n/**\n * Import project from JSON file\n */\nexport async function importProjectFromJSON(file: File): Promise<KaraokeProject> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n\n    reader.onload = (e) => {\n      try {\n        const json = e.target?.result as string\n        const data = JSON.parse(json)\n\n        // Validate version\n        if (!data.version || !data.project) {\n          throw new Error('Invalid project file format')\n        }\n\n        // Reconstruct project with proper Date objects\n        const project: KaraokeProject = {\n          ...data.project,\n          createdAt: new Date(data.project.createdAt),\n          updatedAt: new Date(data.project.updatedAt),\n          audioFile: {\n            ...data.project.audioFile,\n            file: null, // File blob not stored in JSON\n            url: undefined // Will need to re-load audio\n          }\n        }\n\n        resolve(project)\n      } catch (error) {\n        reject(new Error(`Failed to parse project file: ${error}`))\n      }\n    }\n\n    reader.onerror = () => {\n      reject(new Error('Failed to read file'))\n    }\n\n    reader.readAsText(file)\n  })\n}\n\n/**\n * Sanitize filename for download\n */\nfunction sanitizeFilename(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '_')\n    .replace(/^_+|_+$/g, '')\n}\n\n/**\n * Sanitize for use as TypeScript variable name\n */\nfunction sanitizeVariableName(name: string): string {\n  const clean = name\n    .replace(/[^a-zA-Z0-9]+/g, '_')\n    .replace(/^_+|_+$/g, '')\n\n  // Ensure starts with letter\n  return /^[a-zA-Z]/.test(clean) ? clean : `project_${clean}`\n}\n\n/**\n * Generate summary stats for export\n */\nexport function getProjectStats(project: KaraokeProject): {\n  totalLines: number\n  totalWords: number\n  totalSyllables: number\n  timedLines: number\n  timedWords: number\n  timedSyllables: number\n  duration: number\n  completionPercentage: number\n} {\n  let totalWords = 0\n  let totalSyllables = 0\n  let timedWords = 0\n  let timedSyllables = 0\n\n  const timedLines = project.lyrics.filter(line => line.startTime !== undefined).length\n\n  for (const line of project.lyrics) {\n    for (const word of line.words) {\n      totalWords++\n      if (word.startTime !== undefined) {\n        timedWords++\n      }\n\n      for (const syllable of word.syllables) {\n        totalSyllables++\n        if (syllable.startTime !== undefined) {\n          timedSyllables++\n        }\n      }\n    }\n  }\n\n  const duration = project.audioFile.duration || 0\n  const completionPercentage = totalSyllables > 0\n    ? Math.round((timedSyllables / totalSyllables) * 100)\n    : 0\n\n  return {\n    totalLines: project.lyrics.length,\n    totalWords,\n    totalSyllables,\n    timedLines,\n    timedWords,\n    timedSyllables,\n    duration,\n    completionPercentage\n  }\n}\n","<template>\n  <div class=\"compose-view\">\n    <!-- Project Creation Modal -->\n    <div class=\"modal\" :class=\"{ show: showCreateProject }\" v-if=\"showCreateProject\" @click=\"closeCreateProject\">\n      <div class=\"modal-dialog\" @click.stop>\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Create New Karaoke Project</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeCreateProject\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <form @submit.prevent=\"createProject\">\n              <div class=\"mb-3\">\n                <label for=\"projectName\" class=\"form-label\">Song Title *</label>\n                <input type=\"text\" class=\"form-control\" id=\"projectName\" v-model=\"newProject.name\" required\n                  placeholder=\"Enter song title\" />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"projectArtist\" class=\"form-label\">Artist *</label>\n                <input type=\"text\" class=\"form-control\" id=\"projectArtist\" v-model=\"newProject.artist\" required\n                  placeholder=\"Enter artist name\" />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"projectGenre\" class=\"form-label\">Genre</label>\n                <select class=\"form-control\" id=\"projectGenre\" v-model=\"newProject.genre\">\n                  <option value=\"\">Select Genre</option>\n                  <option value=\"Pop\">Pop</option>\n                  <option value=\"Rock\">Rock</option>\n                  <option value=\"Country\">Country</option>\n                  <option value=\"Hip-Hop\">Hip-Hop</option>\n                  <option value=\"R&B\">R&B</option>\n                  <option value=\"Jazz\">Jazz</option>\n                  <option value=\"Classical\">Classical</option>\n                  <option value=\"Other\">Other</option>\n                </select>\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"audioFile\" class=\"form-label\">Audio File (MP3, WAV) *</label>\n                <input type=\"file\" class=\"form-control\" id=\"audioFile\" accept=\"audio/*\" @change=\"handleAudioFile\"\n                  required />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"lyrics\" class=\"form-label\">Lyrics</label>\n                <textarea class=\"form-control\" id=\"lyrics\" rows=\"8\" v-model=\"newProject.lyricsText\"\n                  placeholder=\"Paste your lyrics here (one line per verse/chorus line)...\"></textarea>\n                <div class=\"form-text\">Each line will become a timing point for synchronization</div>\n              </div>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeCreateProject\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"createProject\" :disabled=\"!canCreateProject\">\n              Create Project\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Storage Info Modal -->\n    <div class=\"modal\" :class=\"{ show: showStorageInfo }\" v-if=\"showStorageInfo\" @click=\"closeStorageInfo\">\n      <div class=\"modal-dialog\" @click.stop>\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">ðï¸ Audio Storage Information</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeStorageInfo\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h6>Storage Methods</h6>\n                <div class=\"list-group list-group-flush\">\n                  <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span>ð¦ Base64 (localStorage)</span>\n                    <span class=\"badge bg-warning rounded-pill\">â¤1MB</span>\n                  </div>\n                  <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span>ðï¸ IndexedDB</span>\n                    <span class=\"badge bg-success rounded-pill\">4-5MB+ Files</span>\n                  </div>\n                  <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span>ð Reference</span>\n                    <span class=\"badge bg-warning rounded-pill\">Re-select</span>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <h6>Current Usage</h6>\n                <div v-if=\"storageInfo\" class=\"card\">\n                  <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Preferred:</span>\n                      <strong>{{ storageInfo.method }}</strong>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Audio Files:</span>\n                      <strong>{{ storageInfo.count }}</strong>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Audio Size:</span>\n                      <strong>{{ storageInfo.sizeMB }} MB</strong>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                      <span>Storage Used:</span>\n                      <strong>{{ storageInfo.quotaUsedMB }}/{{ storageInfo.quotaLimitMB }} MB</strong>\n                    </div>\n\n                    <!-- Quota warning -->\n                    <div v-if=\"storageInfo.quotaUsedMB > storageInfo.quotaLimitMB * 0.8\"\n                      class=\"alert alert-warning mt-2 mb-0 p-2\">\n                      <small><i class=\"bi bi-exclamation-triangle\"></i> Storage nearly full!</small>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- Storage actions -->\n                <div class=\"mt-2\">\n                  <button class=\"btn btn-outline-info btn-sm w-100 mb-2\" @click=\"testIndexedDB\">\n                    <i class=\"bi bi-gear\"></i> Test IndexedDB\n                  </button>\n                  <button class=\"btn btn-outline-success btn-sm w-100 mb-2\" @click=\"fixStorageBadges\">\n                    <i class=\"bi bi-wrench\"></i> Fix Storage Badges\n                  </button>\n                  <button class=\"btn btn-outline-warning btn-sm w-100\" @click=\"clearAudioCache\">\n                    <i class=\"bi bi-trash3\"></i> Clear Audio Cache\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <hr />\n\n            <div class=\"alert alert-info\">\n              <h6><i class=\"bi bi-info-circle\"></i> Storage Methods Explained:</h6>\n              <ul class=\"mb-0\">\n                <li><strong>IndexedDB:</strong> Best for 4-5MB+ files - up to ~1GB capacity, persistent storage</li>\n                <li><strong>Base64:</strong> Small files only (â¤1MB) - fastest loading but limited by browser quota</li>\n                <li><strong>Reference:</strong> Fallback method - you'll need to re-select files when loading</li>\n              </ul>\n              <div class=\"mt-2 p-2 bg-light rounded\">\n                <small><strong>ð¡ IndexedDB is a built-in browser feature:</strong></small><br />\n                <small>â¢ No setup required - works automatically</small><br />\n                <small>â¢ Available in all modern browsers (Chrome, Firefox, Safari, Edge)</small><br />\n                <small>â¢ Perfect for your 4-5MB audio files - no quota issues!</small><br />\n                <small>â¢ Use \"Test IndexedDB\" button to verify it's working</small>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeStorageInfo\">Close</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Projects Management Screen -->\n    <div class=\"projects-screen py-4\">\n      <div class=\"card\">\n        <div class=\"card-header compose-header\">\n          <div class=\"row align-items-center\">\n            <div class=\"col-md-6\">\n              <h2 class=\"mb-1\">ð¼ Karaoke Composer</h2>\n              <p class=\"mb-0 text-muted\">Create and sync your karaoke tracks</p>\n            </div>\n            <div class=\"col-md-6 text-end\">\n              <button class=\"btn btn-primary me-2\" @click=\"showCreateProject = true\">\n                <i class=\"bi bi-plus-circle\"></i> New Project\n              </button>\n              <button class=\"btn btn-info btn-sm me-2\" @click=\"openStorageInfo\" title=\"Audio storage information\">\n                <i class=\"bi bi-info-circle\"></i> Storage\n              </button>\n              <button class=\"btn btn-danger btn-sm\" @click=\"clearAllProjects\" title=\"Clear all saved projects\">\n                <i class=\"bi bi-trash3\"></i> Clear All\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"card-body\">\n          <!-- Projects List -->\n          <div v-if=\"projects.length > 0\">\n            <h5 class=\"mb-3\">Your Projects</h5>\n            <div class=\"list-group\">\n              <div v-for=\"project in projects\" :key=\"project.id\" class=\"list-group-item p-0 project-item\">\n                <div class=\"btn-group w-100\" role=\"group\">\n                  <button class=\"btn btn-outline-secondary text-start flex-grow-1 project-content-btn\"\n                    @click=\"openProject(project)\">\n                    <div class=\"fw-bold d-flex align-items-center\">\n                      <i class=\"bi bi-music-note-beamed me-2 text-primary\"></i>\n                      {{ project.name }}\n                    </div>\n                    <div class=\"text-muted small\">by {{ project.artist }} â¢ {{ project.genre }}</div>\n                    <div class=\"text-muted small\">\n                      <i class=\"bi bi-clock me-1\"></i>\n                      Last updated {{ formatDate(project.updatedAt) }}\n                    </div>\n                    <div class=\"text-muted small\" v-if=\"project.audioFile\">\n                      <i class=\"bi bi-file-music me-1\"></i>\n                      {{ project.audioFile.name }}\n                      <span class=\"badge ms-2\"\n                        :class=\"getStorageBadgeClass(project.audioFile.storedData?.storageType || 'unknown')\">\n                        {{ getStorageBadgeText(project.audioFile.storedData?.storageType || 'unknown') }}\n                      </span>\n                    </div>\n                  </button>\n                  <button class=\"btn btn-success export-btn\" @click.stop=\"exportProject(project)\"\n                    title=\"Export project for terminal demo\">\n                    <i class=\"bi bi-download\"></i>\n                  </button>\n                  <button class=\"btn btn-warning delete-btn\" @click.stop=\"deleteProject(project)\"\n                    title=\"Delete project\">\n                    <i class=\"bi bi-trash3\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Empty State -->\n          <div v-else class=\"text-center py-5\">\n            <i class=\"bi bi-music-note-list display-1 text-muted mb-3\"></i>\n            <h5 class=\"text-muted\">No projects yet</h5>\n            <p class=\"text-muted\">Create your first karaoke project to get started</p>\n            <button class=\"btn btn-primary btn-lg\" @click=\"showCreateProject = true\">\n              <i class=\"bi bi-plus-circle me-2\"></i>Create Your First Project\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Developer Toolbar -->\n  <div class=\"developer-toolbar\">\n    <div class=\"container\">\n      <!-- Toolbar Header (always visible) -->\n      <div class=\"toolbar-header\" @click=\"toggleDevToolbar\">\n        <div class=\"toolbar-label\">\n          <i class=\"bi bi-code-slash me-1\"></i>\n          <small class=\"text-muted\">Developer Tools</small>\n        </div>\n        <div class=\"toolbar-toggle\">\n          <i class=\"bi bi-chevron-down\" :class=\"{ 'rotate-180': !showDevToolbar }\"></i>\n        </div>\n      </div>\n\n      <!-- Toolbar Content (collapsible) -->\n      <div v-if=\"showDevToolbar\" class=\"toolbar-content\">\n        <div class=\"toolbar-buttons\">\n          <router-link to=\"/test-timing\" class=\"btn btn-outline-primary btn-sm me-2\">\n            <i class=\"bi bi-play-circle me-1\"></i>\n            Test Word Timing Editor\n          </router-link>\n          <button class=\"btn btn-outline-secondary btn-sm me-2\" @click=\"showStorageInfo = true\">\n            <i class=\"bi bi-database me-1\"></i>\n            Storage Info\n          </button>\n          <button class=\"btn btn-outline-info btn-sm\" @click=\"fixStorageBadges\">\n            <i class=\"bi bi-wrench me-1\"></i>\n            Fix Badges\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Export Dialog -->\n  <ExportDialog v-if=\"showExportDialog && projectToExport\" :project=\"projectToExport\" @close=\"closeExportDialog\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\nimport { useRouter } from 'vue-router'\nimport type { KaraokeProject } from '@/types/karaoke'\nimport { audioStorageService } from '@/services/audioStorageService'\nimport { parseLyricsWithMetadata } from '@/utils/lyricsParser'\nimport ExportDialog from '@/components/ExportDialog.vue'\n\n// Reactive state\nconst router = useRouter()\nconst showCreateProject = ref(false)\nconst showStorageInfo = ref(false)\nconst showExportDialog = ref(false)\nconst projectToExport = ref<KaraokeProject | null>(null)\nconst projects = ref<KaraokeProject[]>([])\nconst isMounted = ref(true)\n\n// Developer toolbar\nconst showDevToolbar = ref(true)\n\n// Storage and IndexedDB testing\n// const indexedDBTestResult = ref<string>('')\nconst storageInfo = ref<{ method: string; sizeMB: number; count: number; quotaUsedMB: number; quotaLimitMB: number } | null>(null)\n\n// New project form\nconst newProject = ref({\n  name: '',\n  artist: '',\n  genre: '',\n  lyricsText: '',\n  audioFile: null as File | null,\n})\n\n// Computed properties\nconst canCreateProject = computed(() => {\n  return newProject.value.name && newProject.value.artist && newProject.value.audioFile\n})\n\n// const hotkeyHelpText = computed(() => {\n//   return 'Click for complete hotkey reference guide'\n// })\n\n// Watch for lyrics changes to auto-populate title and artist from metadata\nwatch(() => newProject.value.lyricsText, (newLyrics) => {\n  if (!newLyrics) return\n\n  const { metadata } = parseLyricsWithMetadata(newLyrics)\n\n  // Auto-populate title if found in metadata and user hasn't entered one yet\n  if (metadata.title && !newProject.value.name.trim()) {\n    newProject.value.name = metadata.title\n  }\n\n  // Auto-populate artist if found in metadata and user hasn't entered one yet\n  if (metadata.author && !newProject.value.artist.trim()) {\n    newProject.value.artist = metadata.author\n  }\n})\n\n// Methods\nconst closeCreateProject = () => {\n  showCreateProject.value = false\n  resetNewProject()\n}\n\nconst closeStorageInfo = () => {\n  showStorageInfo.value = false\n}\n\nconst openStorageInfo = () => {\n  storageInfo.value = audioStorageService.getStorageInfo()\n  showStorageInfo.value = true\n}\n\nconst clearAudioCache = async () => {\n  if (\n    confirm(\n      'This will remove all cached audio files from storage. Projects will still work but may need to re-select audio files. Continue?'\n    )\n  ) {\n    const cleared = await audioStorageService.clearOldAudioFiles()\n    alert(`Cleared ${cleared} audio files from cache.`)\n    // Refresh storage info\n    storageInfo.value = audioStorageService.getStorageInfo()\n  }\n}\n\nconst testIndexedDB = async () => {\n  const result = await audioStorageService.testIndexedDBConnection()\n\n  let message = 'ð IndexedDB Test Results:\\n\\n'\n\n  if (result.available) {\n    message += 'â IndexedDB is supported by your browser\\n'\n  } else {\n    message += 'â IndexedDB is NOT supported by your browser\\n'\n  }\n\n  if (result.canStore) {\n    message += 'â Can store files in IndexedDB\\n'\n    message += 'ðµ Your 4-5MB audio files will work perfectly!'\n  } else {\n    message += 'â Cannot store files in IndexedDB\\n'\n    if (result.error) {\n      message += `Error: ${result.error}\\n`\n    }\n    message += 'â ï¸ Will fallback to other storage methods'\n  }\n\n  alert(message)\n}\n\nconst getStorageBadgeClass = (storageType: string) => {\n  switch (storageType) {\n    case 'base64':\n      return 'bg-success'\n    case 'indexeddb':\n      return 'bg-info'\n    case 'reference':\n      return 'bg-warning'\n    default:\n      return 'bg-secondary'\n  }\n}\n\nconst getStorageBadgeText = (storageType: string) => {\n  switch (storageType) {\n    case 'base64':\n      return 'ð¦ Base64'\n    case 'indexeddb':\n      return 'ðï¸ IndexedDB'\n    case 'reference':\n      return 'ð Reference'\n    default:\n      return 'Unknown'\n  }\n}\n\nconst resetNewProject = () => {\n  newProject.value = {\n    name: '',\n    artist: '',\n    genre: '',\n    lyricsText: '',\n    audioFile: null,\n  }\n}\n\nconst handleAudioFile = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  if (target.files && target.files[0]) {\n    newProject.value.audioFile = target.files[0]\n  }\n}\n\nconst createProject = async () => {\n  console.log('createProject called', {\n    canCreate: canCreateProject.value,\n    name: newProject.value.name,\n    artist: newProject.value.artist,\n    audioFile: newProject.value.audioFile?.name,\n  })\n\n  if (!canCreateProject.value) {\n    console.log('Cannot create project - missing requirements')\n    return\n  }\n\n  // Parse lyrics with metadata and syllable support\n  const { lyrics } = parseLyricsWithMetadata(newProject.value.lyricsText)\n\n  const projectId = `project-${Date.now()}`\n\n  // Store the audio file using the storage service\n  console.log('Storing audio file...')\n  const storedAudioFile = await audioStorageService.storeAudioFile(newProject.value.audioFile!, projectId)\n\n  const project: KaraokeProject = {\n    id: projectId,\n    name: newProject.value.name,\n    artist: newProject.value.artist,\n    genre: newProject.value.genre || 'Unknown',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    audioFile: {\n      name: newProject.value.audioFile!.name,\n      file: newProject.value.audioFile,\n      url: URL.createObjectURL(newProject.value.audioFile!),\n      storedData: storedAudioFile,\n    },\n    lyrics,\n    timings: [],\n    isCompleted: false,\n  }\n\n  projects.value.push(project)\n\n  try {\n    saveProjectsToStorage()\n    closeCreateProject()\n    console.log('Project created successfully:', project.name)\n\n    // Navigate to the timing editor only if component is still mounted\n    if (isMounted.value) {\n      router.push(`/timing/${projectId}`)\n    }\n  } catch (error) {\n    console.error('Error creating project:', error)\n    alert('Error creating project: ' + error)\n  }\n}\n\nconst openProject = async (project: KaraokeProject) => {\n  // Navigate to the timing editor only if component is still mounted\n  if (isMounted.value) {\n    router.push(`/timing/${project.id}`)\n  }\n}\n\nconst deleteProject = async (project: KaraokeProject) => {\n  if (confirm(`Are you sure you want to delete \"${project.name}\"? This action cannot be undone.`)) {\n    // Remove from projects array\n    const index = projects.value.findIndex(p => p.id === project.id)\n    if (index > -1) {\n      projects.value.splice(index, 1)\n\n      // Save updated projects to storage\n      saveProjectsToStorage()\n\n      console.log(`Project \"${project.name}\" deleted successfully`)\n    }\n  }\n}\n\nconst exportProject = (project: KaraokeProject) => {\n  projectToExport.value = project\n  showExportDialog.value = true\n}\n\nconst closeExportDialog = () => {\n  showExportDialog.value = false\n  projectToExport.value = null\n}\n\nconst formatDate = (date: Date) => {\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(date)\n}\n\nconst loadProjectsFromStorage = () => {\n  const stored = localStorage.getItem('karaokeProjects')\n  if (stored) {\n    try {\n      const data = JSON.parse(stored)\n      projects.value = data.map((p: any) => ({\n        ...p,\n        createdAt: new Date(p.createdAt),\n        updatedAt: new Date(p.updatedAt),\n        // Ensure audioFile has the right structure\n        audioFile: {\n          ...p.audioFile,\n          file: null, // File objects can't be serialized, will be restored from storage\n        },\n      }))\n      console.log(`Loaded ${projects.value.length} projects from storage`)\n\n      // Debug storage badge issue\n      projects.value.forEach((project, index) => {\n        console.log(`ð Project ${index + 1}: \"${project.name}\"`)\n        console.log('   audioFile:', project.audioFile)\n        console.log('   storedData:', project.audioFile?.storedData)\n        console.log('   storageType:', project.audioFile?.storedData?.storageType)\n        console.log('   Badge will show:', getStorageBadgeText(project.audioFile?.storedData?.storageType || 'unknown'))\n        console.log('---')\n      })\n    } catch (error) {\n      console.error('Error loading projects:', error)\n    }\n  }\n}\n\nconst saveProjectsToStorage = () => {\n  try {\n    // Create a serializable version of projects (without File objects)\n    const serializableProjects = projects.value.map(project => ({\n      ...project,\n      audioFile: {\n        ...project.audioFile,\n        file: null, // Remove File object for serialization\n        url: undefined, // Remove blob URL (will be recreated)\n      },\n    }))\n\n    localStorage.setItem('karaokeProjects', JSON.stringify(serializableProjects))\n    console.log(`ð¾ Saved ${projects.value.length} projects to storage`)\n\n    // Debug: Check if storedData is preserved\n    serializableProjects.forEach((project, index) => {\n      console.log(`Project ${index}: ${project.name} - StoredData preserved:`, {\n        hasStoredData: !!project.audioFile.storedData,\n        storageType: project.audioFile.storedData?.storageType,\n        duration: project.audioFile.duration,\n      })\n    })\n  } catch (error) {\n    console.error('Error saving projects:', error)\n  }\n}\n\nconst fixStorageBadges = () => {\n  let fixedCount = 0\n\n  projects.value.forEach(project => {\n    if (project.audioFile && !project.audioFile.storedData) {\n      // Try to infer storage type from available data\n      let inferredStorageType = 'reference' // Default fallback\n\n      // Check if there's base64 data in localStorage\n      const lastModified = project.audioFile.file?.lastModified || 0\n      const audioKey = `audio_${project.id}_${project.audioFile.name}_${lastModified}`\n      if (localStorage.getItem(`audio_${audioKey}`)) {\n        inferredStorageType = 'base64'\n      }\n\n      // Create minimal storedData\n      project.audioFile.storedData = {\n        name: project.audioFile.name,\n        size: 0,\n        type: 'audio/mpeg',\n        lastModified: Date.now(),\n        storageType: inferredStorageType as 'base64' | 'indexeddb' | 'reference',\n      }\n\n      fixedCount++\n      console.log(`ð§ Fixed storage badge for project: ${project.name} -> ${inferredStorageType}`)\n    }\n  })\n\n  if (fixedCount > 0) {\n    saveProjectsToStorage()\n    alert(`Fixed storage badges for ${fixedCount} project(s). Refresh the page to see the changes.`)\n  } else {\n    alert('All projects already have proper storage data.')\n  }\n}\n\nconst clearAllProjects = () => {\n  if (confirm('Are you sure you want to delete ALL saved projects? This cannot be undone.')) {\n    localStorage.removeItem('karaokeProjects')\n    projects.value = []\n\n    console.log('All projects cleared from localStorage')\n    alert('All projects have been cleared. You can now start fresh!')\n  }\n}\n\nconst toggleDevToolbar = () => {\n  showDevToolbar.value = !showDevToolbar.value\n}\n\n// Global hotkey handler for ESC key\nconst handleKeyDown = (event: KeyboardEvent) => {\n  if (event.code === 'Escape') {\n    if (showCreateProject.value) {\n      event.preventDefault()\n      closeCreateProject()\n    } else if (showStorageInfo.value) {\n      event.preventDefault()\n      closeStorageInfo()\n    }\n  }\n}\n\nonMounted(async () => {\n  loadProjectsFromStorage()\n\n  // Wait a moment for IndexedDB to initialize\n  await new Promise(resolve => setTimeout(resolve, 100))\n\n  // Check storage health and IndexedDB status\n  const info = audioStorageService.getStorageInfo()\n  console.log('ð Audio storage service initialized:', info)\n\n  // Check IndexedDB availability\n  if (window.indexedDB) {\n    console.log('â IndexedDB is available in this browser')\n  } else {\n    console.warn('â IndexedDB is NOT available in this browser')\n  }\n\n  if (info.quotaUsedMB > info.quotaLimitMB * 0.9) {\n    console.warn('â ï¸ Storage quota nearly full:', info.quotaUsedMB, '/', info.quotaLimitMB, 'MB')\n  }\n\n  // Log storage method being used\n  if (info.method === 'indexeddb') {\n    console.log('ðï¸ Using IndexedDB - perfect for 4-5MB files!')\n  } else {\n    console.log('ð¦ Using fallback storage method:', info.method)\n  }\n\n  // Setup ESC key handler for closing modals\n  window.addEventListener('keydown', handleKeyDown)\n})\n\nonUnmounted(() => {\n  // Mark component as unmounted to prevent router navigation\n  isMounted.value = false\n\n  // Cleanup ESC key handler\n  window.removeEventListener('keydown', handleKeyDown)\n})\n</script>\n\n<style scoped>\n.modal.show {\n  display: block;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.compose-header {\n  border-radius: 0.5rem;\n  border: 1px solid #dee2e6;\n}\n\n.project-info {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n}\n\n.project-info .card-body {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 0.5rem;\n}\n\n.projects-screen {\n  min-height: 60vh;\n}\n\n.project-item {\n  border-left: 3px solid transparent;\n  transition: all 0.2s ease;\n}\n\n.project-item:hover {\n  border-left-color: #0d6efd;\n  transform: translateX(2px);\n}\n\n.project-content-btn {\n  padding: 1rem;\n  height: auto;\n  white-space: normal;\n  text-align: left !important;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex: 1;\n}\n\n.project-content-btn:hover {\n  background-color: #f8f9fa;\n  border-color: #0d6efd;\n  color: #212529 !important;\n}\n\n.project-content-btn:hover .text-muted {\n  color: #6c757d !important;\n}\n\n.project-content-btn:hover .text-primary {\n  color: #0d6efd !important;\n}\n\n.delete-btn {\n  width: 60px;\n  max-width: 60px;\n  flex: 0 0 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n}\n\n.export-btn {\n  width: 60px;\n  max-width: 60px;\n  flex: 0 0 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.3rem;\n}\n\n.export-btn:hover {\n  background-color: #198754 !important;\n  border-color: #198754 !important;\n}\n\n.project-item .btn-group {\n  transition: all 0.2s ease;\n}\n\n/* Ensure button group buttons connect properly */\n.btn-group>.btn:not(:last-child) {\n  border-right: none;\n}\n\n.btn-group>.btn:not(:first-child) {\n  border-left: none;\n}\n\n/* Developer Toolbar */\n.developer-toolbar {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: #f8f9fa;\n  border-top: 2px solid #007bff;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n}\n\n.toolbar-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 0;\n  cursor: pointer;\n  user-select: none;\n  transition: background-color 0.2s;\n}\n\n.toolbar-header:hover {\n  background-color: rgba(0, 0, 0, 0.02);\n}\n\n.toolbar-label {\n  display: flex;\n  align-items: center;\n}\n\n.toolbar-toggle {\n  color: #6c757d;\n  transition: transform 0.3s ease;\n}\n\n.toolbar-toggle .rotate-180 {\n  transform: rotate(180deg);\n}\n\n.toolbar-content {\n  padding-bottom: 10px;\n  border-top: 1px solid #dee2e6;\n  padding-top: 10px;\n}\n\n.toolbar-buttons {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n/* Add some padding to the main content so it doesn't get hidden behind the toolbar */\n.compose-view {\n  padding-bottom: 60px;\n}\n</style>\n"],"names":["LRCWriter","toLRC","project","lines","push","name","this","escapeMetadata","artist","duration","calculateDuration","lyrics","formatTimestamp","lyricsLineIndex","lyricLine","type","captionText","metadata","caption","text","replace","words","length","lineTimestamp","startTime","lineText","formatLine","join","line","parts","word","syllables","syllable","trim","ms","totalSeconds","minutes","Math","floor","seconds","String","padStart","toFixed","value","maxTime","endTime","props","__props","emit","__emit","selectedFormat","ref","lrcSettings","includeMetadata","includeSyllables","includeWordTiming","precision","cdgSettings","backgroundColor","textColor","highlightColor","showBorder","centerText","showMetadata","metadataDuration","showCaptions","captionDuration","jsonSettings","prettyPrint","includeStats","exporting","exportStatus","formats","id","label","icon","stats","computed","totalWords","totalSyllables","timedWords","timedSyllables","timedLines","filter","audioFile","completionPercentage","round","totalLines","getProjectStats","lrcPreview","split","slice","estimatedCDGSize","bytes","ceil","estimatedJSONSize","jsonStr","JSON","stringify","closeDialog","async","exportLRC","lrcContent","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","toLowerCase","body","appendChild","click","removeChild","revokeObjectURL","showStatus","error","message","exportCDG","exportJSON","jsonContent","setTimeout","_createElementBlock","class","tabindex","onClick","_createElementVNode","_hoisted_1","_hoisted_2","_cache","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","_hoisted_6","_hoisted_7","toString","_hoisted_8","_Fragment","_renderList","format","key","active","$event","_hoisted_10","_hoisted_11","_openBlock","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_vModelCheckbox","for","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_vModelSelect","_hoisted_20","_hoisted_21","_hoisted_22","disabled","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_vModelText","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","min","max","step","number","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_normalizeClass","router","useRouter","showCreateProject","showStorageInfo","showExportDialog","projectToExport","projects","isMounted","showDevToolbar","storageInfo","newProject","genre","lyricsText","canCreateProject","watch","newLyrics","parseLyricsWithMetadata","title","author","closeCreateProject","resetNewProject","closeStorageInfo","openStorageInfo","audioStorageService","getStorageInfo","clearAudioCache","confirm","cleared","clearOldAudioFiles","alert","testIndexedDB","result","testIndexedDBConnection","available","canStore","getStorageBadgeClass","storageType","getStorageBadgeText","handleAudioFile","event","target","files","createProject","console","log","canCreate","projectId","Date","now","storedAudioFile","storeAudioFile","createdAt","updatedAt","file","storedData","timings","isCompleted","saveProjectsToStorage","closeExportDialog","serializableProjects","map","localStorage","setItem","forEach","index","hasStoredData","fixStorageBadges","fixedCount","inferredStorageType","lastModified","audioKey","getItem","size","clearAllProjects","removeItem","toggleDevToolbar","handleKeyDown","code","preventDefault","onMounted","loadProjectsFromStorage","stored","data","parse","p","Promise","resolve","info","window","indexedDB","warn","quotaUsedMB","quotaLimitMB","method","addEventListener","onUnmounted","removeEventListener","show","onSubmit","required","placeholder","accept","onChange","rows","_hoisted_9","count","sizeMB","_hoisted_23","_hoisted_24","_hoisted_25","openProject","_createTextVNode","date","Intl","DateTimeFormat","month","day","hour","minute","_withModifiers","exportProject","findIndex","splice","deleteProject","_hoisted_43","_createVNode","_component_router_link","to","_createBlock","ExportDialog","onClose"],"mappings":"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"}